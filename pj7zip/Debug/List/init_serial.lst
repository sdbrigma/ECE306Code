###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           17/Nov/2015  02:50:27
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\init_serial.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\init_serial.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\List\" -o
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\List\init_serial.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\Obj\init_serial.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\init_serial.c
      1          //******************************************************************************
      2          //
      3          //  Description: Initializes serialized communications
      4          //
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //Points to Header files for Preprocessing
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x204
   \   union <unnamed> _A_PADIR_L
   \                     _A_PADIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20a
   \   union <unnamed> _A_PASEL0_L
   \                     _A_PASEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20c
   \   union <unnamed> _A_PASEL1_L
   \                     _A_PASEL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c0
   \   union <unnamed> _A_UCA0CTLW0_L
   \                     _A_UCA0CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c6
   \   union <unnamed> _A_UCA0BRW_L
   \                     _A_UCA0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c8
   \   union <unnamed> _A_UCA0MCTLW_L
   \                     _A_UCA0MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5da
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e0
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e6
   \   union <unnamed> _A_UCA1BRW_L
   \                     _A_UCA1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e8
   \   union <unnamed> _A_UCA1MCTLW_L
   \                     _A_UCA1MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          

   \                                 In  segment CODE, align 2
     16          void Init_Serial_UCA0(_Bool lowBaud) {
   \                     Init_Serial_UCA0:
     17          //******************************************************************************
     18          //
     19          //  Description: Initializes serialized communications
     20          //
     21          //
     22          //  Steffon Brigman
     23          //  Sept 2015
     24          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     25          //
     26          // Globals: rxRead, rxWrite, txRead, txWrite, RX_Char[WORD_LENGTH],
     27          // TX_Char[WORD_LENGTH],
     28          //
     29          // Passed: lowBaud
     30          //
     31          // Local: i
     32          //
     33          // Return: VOID
     34          //
     35          //****************************************************************************** 
     36          
     37          // Configure UART 0
     38          UCA0CTLW0 = INITIAL;			// Use Word register
   \   000000   8243C005     MOV.W   #0x0, &0x5c0
     39          UCA0CTLW0 |= UCSSEL__SMCLK;
   \   000004   B2D08000C005 BIS.W   #0x80, &0x5c0
     40          UCA0CTL1 |= UCSWRST;			// Set Software reset enable
   \   00000A   D2D3C005     BIS.B   #0x1, &0x5c0
     41          
     42          // Set Baudrate
     43          if (lowBaud)
   \   00000E   4C93         CMP.B   #0x0, R12
   \   000010   0724         JEQ     ??Init_Serial_UCA0_0
     44            {
     45              UCA0BRW = BRW9600;
   \   000012   B2403400C605 MOV.W   #0x34, &0x5c6
     46              UCA0MCTLW = BAUD_9600;     // Set Baud Rate to 9600
   \   000018   B2401149C805 MOV.W   #0x4911, &0x5c8
   \   00001E   053C         JMP     ??Init_Serial_UCA0_1
     47            }
     48          else 
     49            { 
     50              UCA0BRW = BRW115200;
   \                     ??Init_Serial_UCA0_0:
   \   000020   A242C605     MOV.W   #0x4, &0x5c6
     51              UCA0MCTLW = BAUD_115200;   // Set Baud Rate to 115200
   \   000024   B2405155C805 MOV.W   #0x5551, &0x5c8
     52            }
     53          
     54            // USB_TXD Initialization
     55            P2SEL0 &= ~USB_TXD;                   // P2SEL0 ->    0
   \                     ??Init_Serial_UCA0_1:
   \   00002A   D2C30B02     BIC.B   #0x1, &0x20b
     56            P2SEL1 |= USB_TXD;                    // P2SEL1 ->    1
   \   00002E   D2D30D02     BIS.B   #0x1, &0x20d
     57            P2OUT|= USB_TXD;                      // P2OUT ->     1
   \   000032   D2D30302     BIS.B   #0x1, &0x203
     58            P2DIR |= USB_TXD;                     // P2DIR ->     1
   \   000036   D2D30502     BIS.B   #0x1, &0x205
     59          
     60            // USB_RXD Initialization
     61            P2SEL0 &= ~USB_RXD;                   // P2SEL0 ->    0
   \   00003A   E2C30B02     BIC.B   #0x2, &0x20b
     62            P2SEL1 |= USB_RXD;                    // P2SEL1 ->    1
   \   00003E   E2D30D02     BIS.B   #0x2, &0x20d
     63            P2OUT &= ~USB_RXD;                    // P2OUT ->     0
   \   000042   E2C30302     BIC.B   #0x2, &0x203
     64            P2DIR  &= ~USB_RXD;                   // P2DIR ->     0
   \   000046   E2C30502     BIC.B   #0x2, &0x205
     65          
     66            // CPU_TXD Initialization
     67            P2SEL0 &= ~CPU_TXD;                   // P2SEL0 ->    0
   \   00004A   F2C020000B02 BIC.B   #0x20, &0x20b
     68            P2SEL1 |= CPU_TXD;                    // P2SEL1 ->    1
   \   000050   F2D020000D02 BIS.B   #0x20, &0x20d
     69            P2OUT |= CPU_TXD;                     // P2OUT ->      1
   \   000056   F2D020000302 BIS.B   #0x20, &0x203
     70            P2DIR |= CPU_TXD;                     // P2DIR ->     1
   \   00005C   F2D020000502 BIS.B   #0x20, &0x205
     71            
     72            // CPU_RXD Initialization
     73            P2SEL0 &= ~CPU_RXD;                   // P2SEL0 ->    0
   \   000062   F2C040000B02 BIC.B   #0x40, &0x20b
     74            P2SEL1 |= CPU_RXD;                    // P2SEL1 ->    1
   \   000068   F2D040000D02 BIS.B   #0x40, &0x20d
     75            P2OUT &= ~CPU_RXD;                    // P2OUT ->     0
   \   00006E   F2C040000302 BIC.B   #0x40, &0x203
     76            P2DIR  &= ~CPU_RXD;                   // P2DIR ->     0
   \   000074   F2C040000502 BIC.B   #0x40, &0x205
     77           
     78          UCA0CTLW0 &= ~UCSWRST;			// Release from reset
   \   00007A   92C3C005     BIC.W   #0x1, &0x5c0
     79          
     80          UCA0IE |= UCTXIE;                       // Enable TX interrupt
   \   00007E   A2D3DA05     BIS.W   #0x2, &0x5da
     81          UCA0IE |= UCRXIE;	                // Enable RX interrupt
   \   000082   92D3DA05     BIS.W   #0x1, &0x5da
     82          }
   \   000086   1001         RETA
   \   000088                REQUIRE _A_UCA0CTLW0_L
   \   000088                REQUIRE _A_UCA0BRW_L
   \   000088                REQUIRE _A_UCA0MCTLW_L
   \   000088                REQUIRE _A_PASEL0_L
   \   000088                REQUIRE _A_PASEL1_L
   \   000088                REQUIRE _A_PAOUT_L
   \   000088                REQUIRE _A_PADIR_L
   \   000088                REQUIRE _A_UCA0IE_L
     83          

   \                                 In  segment CODE, align 2
     84          void Init_Serial_UCA1(_Bool lowBaud) {
   \                     Init_Serial_UCA1:
     85          //******************************************************************************
     86          //
     87          //  Description: Initializes serialized communications
     88          //
     89          //
     90          //  Steffon Brigman
     91          //  Sept 2015
     92          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     93          //
     94          // Globals: rxRead, rxWrite, txRead, txWrite, RX_Char[WORD_LENGTH],
     95          // TX_Char[WORD_LENGTH],
     96          //
     97          // Passed: lowBaud
     98          //
     99          // Local: i
    100          //
    101          // Return: VOID
    102          //
    103          //****************************************************************************** 
    104            
    105          // Count
    106          int i;
    107          
    108          // Initial RX
    109          for (i=INITIAL; i<SMALL_RING_SIZE; i++) {
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_0:
   \   000002   3F902800     CMP.W   #0x28, R15
   \   000006   0434         JGE     ??Init_Serial_UCA1_1
    110          	RX_Char[i] = INITIALIZE_CHAR;
   \   000008   CF43....     MOV.B   #0x0, RX_Char(R15)
    111          }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??Init_Serial_UCA1_0
    112          rxRead = INITIAL;
   \                     ??Init_Serial_UCA1_1:
   \   000010   8243....     MOV.W   #0x0, &rxRead
    113          
    114          
    115          // Configure UART 0
    116          UCA1CTLW0 = INITIAL;			// Use Word register
   \   000014   8243E005     MOV.W   #0x0, &0x5e0
    117          UCA1CTLW0 |= UCSSEL__SMCLK;
   \   000018   B2D08000E005 BIS.W   #0x80, &0x5e0
    118          UCA1CTL1 |= UCSWRST;			// Set Software reset enable
   \   00001E   D2D3E005     BIS.B   #0x1, &0x5e0
    119          
    120          // Optional Initialization Controls
    121          //UCA1CTLW0 |= UCPEN;
    122          //UCA1CTLW0 &= ~UCPAR;
    123          //UCA1CTLW0 &= ~UCMSB;
    124          //UCA1CTLW0 &= ~UC7BIT;
    125          //UCA1CTLW0 &= ~UCSPB;
    126          //UCA1CTLW0 &= ~UCMODE0;
    127          //UCA1CTLW0 &= ~UCMODE1;
    128          //UCA1CTLW0 &= ~UCSYNC;
    129          //UCA1CTLW0 |= UCSSEL0;
    130          //UCA1CTLW0 |= UCSSEL1;
    131          //UCA1CTLW0 &= ~UCRXEIE;
    132          //UCA1CTLW0 &= ~UCBRKIE;
    133          //UCA1CTLW0 &= ~UCDORM;
    134          //UCA1CTLW0 &= ~UCTXADDR;
    135          //UCA1CTLW0 &= ~UCTXBRK;
    136          //UCA1CTLW1 &= ~UCGLIT0;
    137          //UCA1CTLW1 &= ~UCGLIT1;
    138          
    139          // Set Baudrate
    140          if (lowBaud)
   \   000022   4C93         CMP.B   #0x0, R12
   \   000024   0724         JEQ     ??Init_Serial_UCA1_2
    141            {
    142              UCA1BRW = BRW9600;
   \   000026   B2403400E605 MOV.W   #0x34, &0x5e6
    143              UCA1MCTLW = BAUD_9600;     // Set Baud Rate to 9600
   \   00002C   B2401149E805 MOV.W   #0x4911, &0x5e8
   \   000032   053C         JMP     ??Init_Serial_UCA1_3
    144            }
    145          else 
    146            { 
    147              UCA1BRW = BRW115200;
   \                     ??Init_Serial_UCA1_2:
   \   000034   A242E605     MOV.W   #0x4, &0x5e6
    148              UCA1MCTLW = BAUD_115200;   // Set Baud Rate to 115200
   \   000038   B2405155E805 MOV.W   #0x5551, &0x5e8
    149            }
    150          
    151            // USB_TXD Initialization
    152            P2SEL0 &= ~USB_TXD;                   // P2SEL0 ->    0
   \                     ??Init_Serial_UCA1_3:
   \   00003E   D2C30B02     BIC.B   #0x1, &0x20b
    153            P2SEL1 |= USB_TXD;                    // P2SEL1 ->    1
   \   000042   D2D30D02     BIS.B   #0x1, &0x20d
    154            P2OUT|= USB_TXD;                      // P2OUT ->     1
   \   000046   D2D30302     BIS.B   #0x1, &0x203
    155            P2DIR |= USB_TXD;                     // P2DIR ->     1
   \   00004A   D2D30502     BIS.B   #0x1, &0x205
    156          
    157            // USB_RXD Initialization
    158            P2SEL0 &= ~USB_RXD;                   // P2SEL0 ->    0
   \   00004E   E2C30B02     BIC.B   #0x2, &0x20b
    159            P2SEL1 |= USB_RXD;                    // P2SEL1 ->    1
   \   000052   E2D30D02     BIS.B   #0x2, &0x20d
    160            P2OUT &= ~USB_RXD;                    // P2OUT ->     0
   \   000056   E2C30302     BIC.B   #0x2, &0x203
    161            P2DIR  &= ~USB_RXD;                   // P2DIR ->     0
   \   00005A   E2C30502     BIC.B   #0x2, &0x205
    162          
    163            // CPU_TXD Initialization
    164            P2SEL0 &= ~CPU_TXD;                   // P2SEL0 ->    0
   \   00005E   F2C020000B02 BIC.B   #0x20, &0x20b
    165            P2SEL1 |= CPU_TXD;                    // P2SEL1 ->    1
   \   000064   F2D020000D02 BIS.B   #0x20, &0x20d
    166            P2OUT |= CPU_TXD;                     // P2OUT ->      1
   \   00006A   F2D020000302 BIS.B   #0x20, &0x203
    167            P2DIR |= CPU_TXD;                     // P2DIR ->     1
   \   000070   F2D020000502 BIS.B   #0x20, &0x205
    168            
    169            // CPU_RXD Initialization
    170            P2SEL0 &= ~CPU_RXD;                   // P2SEL0 ->    0
   \   000076   F2C040000B02 BIC.B   #0x40, &0x20b
    171            P2SEL1 |= CPU_RXD;                    // P2SEL1 ->    1
   \   00007C   F2D040000D02 BIS.B   #0x40, &0x20d
    172            P2OUT &= ~CPU_RXD;                    // P2OUT ->     0
   \   000082   F2C040000302 BIC.B   #0x40, &0x203
    173            P2DIR  &= ~CPU_RXD;                   // P2DIR ->     0
   \   000088   F2C040000502 BIC.B   #0x40, &0x205
    174            
    175          UCA1CTLW0 &= ~UCSWRST;			// Release from reset
   \   00008E   92C3E005     BIC.W   #0x1, &0x5e0
    176          
    177          UCA1IE &= ~UCTXIE;                       // Disable TX interrupt
   \   000092   A2C3FA05     BIC.W   #0x2, &0x5fa
    178          UCA1IE &= ~UCRXIE;	                // Disable RX interrupt
   \   000096   92C3FA05     BIC.W   #0x1, &0x5fa
    179          }
   \   00009A   1001         RETA
   \   00009C                REQUIRE _A_UCA1CTLW0_L
   \   00009C                REQUIRE _A_UCA1BRW_L
   \   00009C                REQUIRE _A_UCA1MCTLW_L
   \   00009C                REQUIRE _A_PASEL0_L
   \   00009C                REQUIRE _A_PASEL1_L
   \   00009C                REQUIRE _A_PAOUT_L
   \   00009C                REQUIRE _A_PADIR_L
   \   00009C                REQUIRE _A_UCA1IE_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Serial_UCA0
      4   Init_Serial_UCA1


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     136  Init_Serial_UCA0
     156  Init_Serial_UCA1
       2  _A_PADIR_L
       2  _A_PAOUT_L
       2  _A_PASEL0_L
       2  _A_PASEL1_L
       2  _A_UCA0BRW_L
       2  _A_UCA0CTLW0_L
       2  _A_UCA0IE_L
       2  _A_UCA0MCTLW_L
       2  _A_UCA1BRW_L
       2  _A_UCA1CTLW0_L
       2  _A_UCA1IE_L
       2  _A_UCA1MCTLW_L

 
 292 bytes in segment CODE
  24 bytes in segment DATA16_AN
 
 292 bytes of CODE memory
   0 bytes of DATA memory (+ 24 bytes shared)

Errors: none
Warnings: none
