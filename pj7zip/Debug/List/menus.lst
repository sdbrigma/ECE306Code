###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           11/Nov/2015  20:21:12
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Christopher\Documents\ECE 306\Project_07\menus.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_07\menus.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_07\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_07\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config
#        D:\IAR\430\lib\dlib\dl430xlsfn.h --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE 306\Project_07\Debug\List\menus.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_07\Debug\Obj\menus.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_07\menus.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the different submenus of the system
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          

   \                                 In  segment CODE, align 2
     18          void Resistors_Menu(void){
   \                     Resistors_Menu:
   \   000000   0A12         PUSH.W  R10
     19          //******************************************************************************
     20          //
     21          //  Description: This file implements the Resistors submenu
     22          //
     23          //
     24          //  Christopher Woedy
     25          //  Sept 2015
     26          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     27          //
     28          // Globals: ADC_Thumb
     29          //
     30          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
     31          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
     32          //
     33          // Local: i 
     34          //
     35          // Return: VOID
     36          //
     37          //******************************************************************************  
     38            int i = INITIAL;
   \   000002   0A43         MOV.W   #0x0, R10
     39            display_1 = "Color:    ";
   \   000004   B240........ MOV.W   #`?<Constant "Color:    ">`, &display_1
     40            display_3 = "Value:    ";
   \   00000A   B240........ MOV.W   #`?<Constant "Value:    ">`, &display_3
     41            posL1 = LINE_POS_L0;
   \   000010   C243....     MOV.B   #0x0, &posL1
     42            posL2 = LINE_POS_L0;
   \   000014   C243....     MOV.B   #0x0, &posL2
     43            posL3 = LINE_POS_L0;
   \   000018   C243....     MOV.B   #0x0, &posL3
     44            posL4 = LINE_POS_L0;
   \   00001C   C243....     MOV.B   #0x0, &posL4
     45            lcd_4line();
   \   000020   ........     CALLA   #lcd_4line
     46            while(ALWAYS) {
     47          		// Update all ADC channels
     48          		  for(i = SW_SEL_5; i > INITIAL; i--) {
   \                     ??Resistors_Menu_1:
   \   000024   3A400500     MOV.W   #0x5, R10
   \                     ??Resistors_Menu_0:
   \   000028   1A93         CMP.W   #0x1, R10
   \   00002A   0438         JL      ??Resistors_Menu_2
     49          		  ADC10_Process();
   \   00002C   ........     CALLA   #ADC10_Process
     50          		  }
   \   000030   3A53         ADD.W   #0xffff, R10
   \   000032   FA3F         JMP     ??Resistors_Menu_0
     51          		  
     52          		  // ITEM ONE
     53          		  if ((ADC_Thumb > ITEM_ONE) && (ADC_Thumb <= ITEM_TWO)) {
   \                     ??Resistors_Menu_2:
   \   000034   8293....     CMP.W   #0x0, &ADC_Thumb
   \   000038   0724         JEQ     ??Resistors_Menu_3
   \   00003A   B2906700.... CMP.W   #0x67, &ADC_Thumb
   \   000040   032C         JC      ??Resistors_Menu_3
     54                              Display_Black();
   \   000042   ........     CALLA   #Display_Black
   \   000046   623C         JMP     ??Resistors_Menu_4
     55          		  }
     56          		  // ITEM TWO
     57          		  else if ((ADC_Thumb > ITEM_TWO) && (ADC_Thumb <= ITEM_THREE)) {
   \                     ??Resistors_Menu_3:
   \   000048   B2906700.... CMP.W   #0x67, &ADC_Thumb
   \   00004E   0728         JNC     ??Resistors_Menu_5
   \   000050   B290CE00.... CMP.W   #0xce, &ADC_Thumb
   \   000056   032C         JC      ??Resistors_Menu_5
     58                              Display_Brown();
   \   000058   ........     CALLA   #Display_Brown
   \   00005C   573C         JMP     ??Resistors_Menu_4
     59          		  }
     60          		  // ITEM THREE
     61          		  else if ((ADC_Thumb > ITEM_THREE) && (ADC_Thumb <= ITEM_FOUR)) {
   \                     ??Resistors_Menu_5:
   \   00005E   B290CE00.... CMP.W   #0xce, &ADC_Thumb
   \   000064   0728         JNC     ??Resistors_Menu_6
   \   000066   B2903401.... CMP.W   #0x134, &ADC_Thumb
   \   00006C   032C         JC      ??Resistors_Menu_6
     62                              Display_Red();
   \   00006E   ........     CALLA   #Display_Red
   \   000072   4C3C         JMP     ??Resistors_Menu_4
     63          		  }
     64          		  // ITEM FOUR
     65          		  else if ((ADC_Thumb > ITEM_FOUR) && (ADC_Thumb <= ITEM_FIVE)) {
   \                     ??Resistors_Menu_6:
   \   000074   B2903401.... CMP.W   #0x134, &ADC_Thumb
   \   00007A   0728         JNC     ??Resistors_Menu_7
   \   00007C   B2909A01.... CMP.W   #0x19a, &ADC_Thumb
   \   000082   032C         JC      ??Resistors_Menu_7
     66                              Display_Orange();
   \   000084   ........     CALLA   #Display_Orange
   \   000088   413C         JMP     ??Resistors_Menu_4
     67          		  }
     68          		  // ITEM FIVE
     69          		  else if ((ADC_Thumb > ITEM_FIVE) && (ADC_Thumb <= ITEM_SIX)) {
   \                     ??Resistors_Menu_7:
   \   00008A   B2909A01.... CMP.W   #0x19a, &ADC_Thumb
   \   000090   0728         JNC     ??Resistors_Menu_8
   \   000092   B2900102.... CMP.W   #0x201, &ADC_Thumb
   \   000098   032C         JC      ??Resistors_Menu_8
     70                              Display_Yellow();
   \   00009A   ........     CALLA   #Display_Yellow
   \   00009E   363C         JMP     ??Resistors_Menu_4
     71          		  }
     72          		  // ITEM SIX
     73          		  else if ((ADC_Thumb > ITEM_SIX) && (ADC_Thumb <= ITEM_SEVEN)) {
   \                     ??Resistors_Menu_8:
   \   0000A0   B2900102.... CMP.W   #0x201, &ADC_Thumb
   \   0000A6   0728         JNC     ??Resistors_Menu_9
   \   0000A8   B2906702.... CMP.W   #0x267, &ADC_Thumb
   \   0000AE   032C         JC      ??Resistors_Menu_9
     74                              Display_Green();
   \   0000B0   ........     CALLA   #Display_Green
   \   0000B4   2B3C         JMP     ??Resistors_Menu_4
     75          		  }
     76          		  // ITEM SEVEN
     77          		  else if ((ADC_Thumb > ITEM_SEVEN) && (ADC_Thumb <= ITEM_EIGHT)) {
   \                     ??Resistors_Menu_9:
   \   0000B6   B2906702.... CMP.W   #0x267, &ADC_Thumb
   \   0000BC   0728         JNC     ??Resistors_Menu_10
   \   0000BE   B290CD02.... CMP.W   #0x2cd, &ADC_Thumb
   \   0000C4   032C         JC      ??Resistors_Menu_10
     78                              Display_Blue();
   \   0000C6   ........     CALLA   #Display_Blue
   \   0000CA   203C         JMP     ??Resistors_Menu_4
     79          		  }
     80          		  // ITEM EIGHT
     81          		  else if ((ADC_Thumb > ITEM_EIGHT) && (ADC_Thumb <= ITEM_NINE)) {
   \                     ??Resistors_Menu_10:
   \   0000CC   B290CD02.... CMP.W   #0x2cd, &ADC_Thumb
   \   0000D2   0728         JNC     ??Resistors_Menu_11
   \   0000D4   B2903303.... CMP.W   #0x333, &ADC_Thumb
   \   0000DA   032C         JC      ??Resistors_Menu_11
     82                              Display_Violet();
   \   0000DC   ........     CALLA   #Display_Violet
   \   0000E0   153C         JMP     ??Resistors_Menu_4
     83          		  }
     84          		  // ITEM NINE
     85          		  else if ((ADC_Thumb > ITEM_NINE) && (ADC_Thumb <= ITEM_TEN)) {
   \                     ??Resistors_Menu_11:
   \   0000E2   B2903303.... CMP.W   #0x333, &ADC_Thumb
   \   0000E8   0728         JNC     ??Resistors_Menu_12
   \   0000EA   B2909A03.... CMP.W   #0x39a, &ADC_Thumb
   \   0000F0   032C         JC      ??Resistors_Menu_12
     86                              Display_Gray();
   \   0000F2   ........     CALLA   #Display_Gray
   \   0000F6   0A3C         JMP     ??Resistors_Menu_4
     87          		  }
     88          		  // ITEM TEN
     89          		  else if ((ADC_Thumb > ITEM_TEN) && (ADC_Thumb <= ITEM_END)) {
   \                     ??Resistors_Menu_12:
   \   0000F8   B2909A03.... CMP.W   #0x39a, &ADC_Thumb
   \   0000FE   0628         JNC     ??Resistors_Menu_4
   \   000100   B2900004.... CMP.W   #0x400, &ADC_Thumb
   \   000106   022C         JC      ??Resistors_Menu_4
     90                              Display_White();
   \   000108   ........     CALLA   #Display_White
     91          		  }
     92          
     93          		  Display_Process();        		        // Update LCD Display
   \                     ??Resistors_Menu_4:
   \   00010C   ........     CALLA   #Display_Process
     94          		  Five_msec_Delay(LIL_DELAY);
   \   000110   3C401900     MOV.W   #0x19, R12
   \   000114   ........     CALLA   #Five_msec_Delay
     95          		  
     96                            if (!(P4IN & SW2)) {
   \   000118   E2B32102     BIT.B   #0x2, &0x221
   \   00011C   832F         JC      ??Resistors_Menu_1
     97                              Five_msec_Delay(LIL_SW_DELAY);
   \   00011E   3C401F00     MOV.W   #0x1f, R12
   \   000122   ........     CALLA   #Five_msec_Delay
     98                              break;
     99                            }
    100          	}
    101          }
   \   000126   3A41         POP.W   R10
   \   000128   1001         RETA
   \   00012A                REQUIRE _A_PBIN_L
    102          

   \                                 In  segment CODE, align 2
    103          void Shapes_Menu(void){
   \                     Shapes_Menu:
   \   000000   0A12         PUSH.W  R10
    104          //******************************************************************************
    105          //
    106          //  Description: This file implements the Shapes submenu
    107          //
    108          //
    109          //  Christopher Woedy
    110          //  Sept 2015
    111          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    112          //
    113          // Globals: ADC_Thumb
    114          //
    115          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
    116          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
    117          //
    118          // Local: i
    119          //
    120          // Return: VOID
    121          //
    122          //******************************************************************************  
    123            
    124            int i = INITIAL;
   \   000002   0A43         MOV.W   #0x0, R10
    125            display_4 = "          ";
   \   000004   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    126            posL1 = LINE_POS_L0;
   \   00000A   C243....     MOV.B   #0x0, &posL1
    127            posL2 = LINE_POS_L0;
   \   00000E   C243....     MOV.B   #0x0, &posL2
    128            posL3 = LINE_POS_L0;
   \   000012   C243....     MOV.B   #0x0, &posL3
    129            posL4 = LINE_POS_L0;
   \   000016   C243....     MOV.B   #0x0, &posL4
    130            lcd_BIG_mid();
   \   00001A   ........     CALLA   #lcd_BIG_mid
    131            
    132            while(ALWAYS) {
    133          		// Update all ADC channels
    134          		  for(i = SW_SEL_5; i > INITIAL; i--) {
   \                     ??Shapes_Menu_1:
   \   00001E   3A400500     MOV.W   #0x5, R10
   \                     ??Shapes_Menu_0:
   \   000022   1A93         CMP.W   #0x1, R10
   \   000024   0438         JL      ??Shapes_Menu_2
    135          		  ADC10_Process();
   \   000026   ........     CALLA   #ADC10_Process
    136          		  }
   \   00002A   3A53         ADD.W   #0xffff, R10
   \   00002C   FA3F         JMP     ??Shapes_Menu_0
    137          		  
    138          		  // ITEM ONE
    139          		  if ((ADC_Thumb > ITEM_ONE) && (ADC_Thumb <= ITEM_TWO)) {
   \                     ??Shapes_Menu_2:
   \   00002E   8293....     CMP.W   #0x0, &ADC_Thumb
   \   000032   0724         JEQ     ??Shapes_Menu_3
   \   000034   B2906700.... CMP.W   #0x67, &ADC_Thumb
   \   00003A   032C         JC      ??Shapes_Menu_3
    140                              Display_Circle();
   \   00003C   ........     CALLA   #Display_Circle
   \   000040   623C         JMP     ??Shapes_Menu_4
    141          		  }
    142          		  // ITEM TWO
    143          		  else if ((ADC_Thumb > ITEM_TWO) && (ADC_Thumb <= ITEM_THREE)) {
   \                     ??Shapes_Menu_3:
   \   000042   B2906700.... CMP.W   #0x67, &ADC_Thumb
   \   000048   0728         JNC     ??Shapes_Menu_5
   \   00004A   B290CE00.... CMP.W   #0xce, &ADC_Thumb
   \   000050   032C         JC      ??Shapes_Menu_5
    144                              Display_Square();
   \   000052   ........     CALLA   #Display_Square
   \   000056   573C         JMP     ??Shapes_Menu_4
    145          		  }
    146          		  // ITEM THREE
    147          		  else if ((ADC_Thumb > ITEM_THREE) && (ADC_Thumb <= ITEM_FOUR)) {
   \                     ??Shapes_Menu_5:
   \   000058   B290CE00.... CMP.W   #0xce, &ADC_Thumb
   \   00005E   0728         JNC     ??Shapes_Menu_6
   \   000060   B2903401.... CMP.W   #0x134, &ADC_Thumb
   \   000066   032C         JC      ??Shapes_Menu_6
    148                              Display_Triangle();
   \   000068   ........     CALLA   #Display_Triangle
   \   00006C   4C3C         JMP     ??Shapes_Menu_4
    149          		  }
    150          		  // ITEM FOUR
    151          		  else if ((ADC_Thumb > ITEM_FOUR) && (ADC_Thumb <= ITEM_FIVE)) {
   \                     ??Shapes_Menu_6:
   \   00006E   B2903401.... CMP.W   #0x134, &ADC_Thumb
   \   000074   0728         JNC     ??Shapes_Menu_7
   \   000076   B2909A01.... CMP.W   #0x19a, &ADC_Thumb
   \   00007C   032C         JC      ??Shapes_Menu_7
    152                              Display_Octagon();
   \   00007E   ........     CALLA   #Display_Octagon
   \   000082   413C         JMP     ??Shapes_Menu_4
    153          		  }
    154          		  // ITEM FIVE
    155          		  else if ((ADC_Thumb > ITEM_FIVE) && (ADC_Thumb <= ITEM_SIX)) {
   \                     ??Shapes_Menu_7:
   \   000084   B2909A01.... CMP.W   #0x19a, &ADC_Thumb
   \   00008A   0728         JNC     ??Shapes_Menu_8
   \   00008C   B2900102.... CMP.W   #0x201, &ADC_Thumb
   \   000092   032C         JC      ??Shapes_Menu_8
    156                              Display_Pentagon();
   \   000094   ........     CALLA   #Display_Pentagon
   \   000098   363C         JMP     ??Shapes_Menu_4
    157          		  }
    158          		  // ITEM SIX
    159          		  else if ((ADC_Thumb > ITEM_SIX) && (ADC_Thumb <= ITEM_SEVEN)) {
   \                     ??Shapes_Menu_8:
   \   00009A   B2900102.... CMP.W   #0x201, &ADC_Thumb
   \   0000A0   0728         JNC     ??Shapes_Menu_9
   \   0000A2   B2906702.... CMP.W   #0x267, &ADC_Thumb
   \   0000A8   032C         JC      ??Shapes_Menu_9
    160                              Display_Hexagon();
   \   0000AA   ........     CALLA   #Display_Hexagon
   \   0000AE   2B3C         JMP     ??Shapes_Menu_4
    161          		  }
    162          		  // ITEM SEVEN
    163          		  else if ((ADC_Thumb > ITEM_SEVEN) && (ADC_Thumb <= ITEM_EIGHT)) {
   \                     ??Shapes_Menu_9:
   \   0000B0   B2906702.... CMP.W   #0x267, &ADC_Thumb
   \   0000B6   0728         JNC     ??Shapes_Menu_10
   \   0000B8   B290CD02.... CMP.W   #0x2cd, &ADC_Thumb
   \   0000BE   032C         JC      ??Shapes_Menu_10
    164                              Display_Cube();
   \   0000C0   ........     CALLA   #Display_Cube
   \   0000C4   203C         JMP     ??Shapes_Menu_4
    165          		  }
    166          		  // ITEM EIGHT
    167          		  else if ((ADC_Thumb > ITEM_EIGHT) && (ADC_Thumb <= ITEM_NINE)) {
   \                     ??Shapes_Menu_10:
   \   0000C6   B290CD02.... CMP.W   #0x2cd, &ADC_Thumb
   \   0000CC   0728         JNC     ??Shapes_Menu_11
   \   0000CE   B2903303.... CMP.W   #0x333, &ADC_Thumb
   \   0000D4   032C         JC      ??Shapes_Menu_11
    168                              Display_Oval();
   \   0000D6   ........     CALLA   #Display_Oval
   \   0000DA   153C         JMP     ??Shapes_Menu_4
    169          		  }
    170          		  // ITEM NINE
    171          		  else if ((ADC_Thumb > ITEM_NINE) && (ADC_Thumb <= ITEM_TEN)) {
   \                     ??Shapes_Menu_11:
   \   0000DC   B2903303.... CMP.W   #0x333, &ADC_Thumb
   \   0000E2   0728         JNC     ??Shapes_Menu_12
   \   0000E4   B2909A03.... CMP.W   #0x39a, &ADC_Thumb
   \   0000EA   032C         JC      ??Shapes_Menu_12
    172                              Display_Sphere();
   \   0000EC   ........     CALLA   #Display_Sphere
   \   0000F0   0A3C         JMP     ??Shapes_Menu_4
    173          		  }
    174          		  // ITEM TEN
    175          		  else if ((ADC_Thumb > ITEM_TEN) && (ADC_Thumb <= ITEM_END)) {
   \                     ??Shapes_Menu_12:
   \   0000F2   B2909A03.... CMP.W   #0x39a, &ADC_Thumb
   \   0000F8   0628         JNC     ??Shapes_Menu_4
   \   0000FA   B2900004.... CMP.W   #0x400, &ADC_Thumb
   \   000100   022C         JC      ??Shapes_Menu_4
    176                              Display_Cylinder();
   \   000102   ........     CALLA   #Display_Cylinder
    177          		  }
    178          
    179          		  
    180          		  Display_Process();        		        // Update LCD Display
   \                     ??Shapes_Menu_4:
   \   000106   ........     CALLA   #Display_Process
    181          		  Five_msec_Delay(LIL_DELAY);
   \   00010A   3C401900     MOV.W   #0x19, R12
   \   00010E   ........     CALLA   #Five_msec_Delay
    182          		  
    183                            if (!(P4IN & SW2)) {
   \   000112   E2B32102     BIT.B   #0x2, &0x221
   \   000116   832F         JC      ??Shapes_Menu_1
    184                              Five_msec_Delay(LIL_SW_DELAY);
   \   000118   3C401F00     MOV.W   #0x1f, R12
   \   00011C   ........     CALLA   #Five_msec_Delay
    185                              break;
    186                            }
    187          	}
    188          }
   \   000120   3A41         POP.W   R10
   \   000122   1001         RETA
   \   000124                REQUIRE _A_PBIN_L
    189          

   \                                 In  segment CODE, align 2
    190          void Song_Menu(void){
   \                     Song_Menu:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   3180E800     SUB.W   #0xe8, SP
    191          //******************************************************************************
    192          //
    193          //  Description: This file implements the Song submenu
    194          //
    195          //
    196          //  Christopher Woedy
    197          //  Sept 2015
    198          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    199          //
    200          // Globals: ADC_Thumb
    201          //
    202          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
    203          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
    204          //
    205          // Local: i, song_index, song[], OLD_ADC_Thumb, swap
    206          //
    207          // Return: VOID
    208          //
    209          //******************************************************************************  
    210            
    211            unsigned volatile int i = INITIAL;
   \   000006   81430200     MOV.W   #0x0, 0x2(SP)
    212            unsigned volatile int song_index = SW_SEL_0;
   \   00000A   81430000     MOV.W   #0x0, 0(SP)
    213            unsigned volatile int song_index2 = song_index + SW_SEL_8;
   \   00000E   2F41         MOV.W   @SP, R15
   \   000010   3F52         ADD.W   #0x8, R15
   \   000012   814F0400     MOV.W   R15, 0x4(SP)
    214            int OLD_ADC_Thumb;
    215            int swap = INITIAL;
   \   000016   0B43         MOV.W   #0x0, R11
    216            char song[SONG_LENGTH] = "  We're the Red and White from State And we know we are the best. A hand behind our back, We can take on all the rest. Come over the hill, Carolina. Devils and Deacs stand in line. The Red and White from N.C. State. Go State!";
   \   000018   0C41         MOV.W   SP, R12
   \   00001A   3C500600     ADD.W   #0x6, R12
   \   00001E   3E40....     MOV.W   #`?<Constant "  We\\'re the Red and W...">`, R14
   \   000022   3D40E200     MOV.W   #0xe2, R13
   \   000026   ........     CALLA   #?CopyMemoryBytes
    217            display_1 = "   RED!   ";
   \   00002A   B240........ MOV.W   #`?<Constant "   RED!   ">`, &display_1
    218            display_2 = "          ";
   \   000030   B240........ MOV.W   #`?<Constant "          ">`, &display_2
    219            display_3 = "  WHITE!  ";
   \   000036   B240........ MOV.W   #`?<Constant "  WHITE!  ">`, &display_3
    220            display_4 = "          ";
   \   00003C   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    221            posL1 = LINE_POS_L0;
   \   000042   C243....     MOV.B   #0x0, &posL1
    222            posL2 = LINE_POS_L0;
   \   000046   C243....     MOV.B   #0x0, &posL2
    223            posL3 = LINE_POS_L0;
   \   00004A   C243....     MOV.B   #0x0, &posL3
    224            posL4 = LINE_POS_L0;
   \   00004E   C243....     MOV.B   #0x0, &posL4
    225            big = TRUE;
   \   000052   D243....     MOV.B   #0x1, &big
    226            lcd_BIG_mid();
   \   000056   ........     CALLA   #lcd_BIG_mid
    227            
    228            Five_msec_Delay(LIL_DELAY);
   \   00005A   3C401900     MOV.W   #0x19, R12
   \   00005E   ........     CALLA   #Five_msec_Delay
    229            
    230            while(ALWAYS) {
    231          	// Update all ADC channels
    232          	  for(i = SW_SEL_5; i > INITIAL; i--) {
   \                     ??Song_Menu_1:
   \   000062   B14005000200 MOV.W   #0x5, 0x2(SP)
   \                     ??Song_Menu_0:
   \   000068   81930200     CMP.W   #0x0, 0x2(SP)
   \   00006C   0524         JEQ     ??Song_Menu_2
    233          	  ADC10_Process();
   \   00006E   ........     CALLA   #ADC10_Process
    234          	  }
   \   000072   B1530200     ADD.W   #0xffff, 0x2(SP)
   \   000076   F83F         JMP     ??Song_Menu_0
    235          	  
    236                    // Only update when moving in the positive direction
    237                    if (OLD_ADC_Thumb < INITIAL) OLD_ADC_Thumb = SW_SEL_1;
   \                     ??Song_Menu_2:
   \   000078   0A93         CMP.W   #0x0, R10
   \   00007A   0134         JGE     ??Song_Menu_3
   \   00007C   1A43         MOV.W   #0x1, R10
    238                    if ((ADC_Thumb < OLD_ADC_Thumb - SW_SEL_1) && (ADC_Thumb > SW_SEL_1)) {
   \                     ??Song_Menu_3:
   \   00007E   0F4A         MOV.W   R10, R15
   \   000080   3F53         ADD.W   #0xffff, R15
   \   000082   829F....     CMP.W   R15, &ADC_Thumb
   \   000086   0E2C         JC      ??Song_Menu_4
   \   000088   A293....     CMP.W   #0x2, &ADC_Thumb
   \   00008C   0B28         JNC     ??Song_Menu_4
    239                      if (song_index < SONG_LENGTH - SW_SEL_10) {
   \   00008E   B190D8000000 CMP.W   #0xd8, 0(SP)
   \   000094   072C         JC      ??Song_Menu_4
    240                        song_index+=SW_SEL_2; 
   \   000096   A1530000     ADD.W   #0x2, 0(SP)
    241                        song_index2 = song_index + SW_SEL_8;
   \   00009A   2F41         MOV.W   @SP, R15
   \   00009C   3F52         ADD.W   #0x8, R15
   \   00009E   814F0400     MOV.W   R15, 0x4(SP)
    242                        swap++;
   \   0000A2   1B53         ADD.W   #0x1, R11
    243                      }
    244                    }
    245                    
    246                    // Don't allow indexing errors
    247                    
    248                    if (song_index >= SONG_LENGTH - SW_SEL_10) song_index = SONG_LENGTH - SW_SEL_10;
   \                     ??Song_Menu_4:
   \   0000A4   B190D8000000 CMP.W   #0xd8, 0(SP)
   \   0000AA   0328         JNC     ??Song_Menu_5
   \   0000AC   B140D8000000 MOV.W   #0xd8, 0(SP)
    249                    
    250                    // Sets previous thumbwheel value
    251                    OLD_ADC_Thumb = ADC_Thumb - SW_SEL_6;
   \                     ??Song_Menu_5:
   \   0000B2   1F42....     MOV.W   &ADC_Thumb, R15
   \   0000B6   3F50FAFF     ADD.W   #0xfffa, R15
   \   0000BA   0A4F         MOV.W   R15, R10
    252                    
    253                    // Alternate RED and WHITE
    254                    if (swap > SW_SEL_14) {
   \   0000BC   3B900F00     CMP.W   #0xf, R11
   \   0000C0   0138         JL      ??Song_Menu_6
    255                      swap = INITIAL;
   \   0000C2   0B43         MOV.W   #0x0, R11
    256                    }
    257                    
    258                    if (swap > SW_SEL_7) {
   \                     ??Song_Menu_6:
   \   0000C4   3B92         CMP.W   #0x8, R11
   \   0000C6   0738         JL      ??Song_Menu_7
    259                      display_1 = "  WHITE!  ";
   \   0000C8   B240........ MOV.W   #`?<Constant "  WHITE!  ">`, &display_1
    260                      display_3 = "   RED!   ";
   \   0000CE   B240........ MOV.W   #`?<Constant "   RED!   ">`, &display_3
   \   0000D4   063C         JMP     ??Song_Menu_8
    261                    }
    262                    else {
    263                      display_1 = "   RED!   ";
   \                     ??Song_Menu_7:
   \   0000D6   B240........ MOV.W   #`?<Constant "   RED!   ">`, &display_1
    264                      display_3 = "  WHITE!  ";
   \   0000DC   B240........ MOV.W   #`?<Constant "  WHITE!  ">`, &display_3
    265                    }
    266                        
    267                    // Scroll Fight Song
    268                    display_2[SW_SEL_0] = song[song_index];
   \                     ??Song_Menu_8:
   \   0000E2   2F41         MOV.W   @SP, R15
   \   0000E4   0F51         ADD.W   SP, R15
   \   0000E6   1E42....     MOV.W   &display_2, R14
   \   0000EA   DE4F06000000 MOV.B   0x6(R15), 0(R14)
    269                    display_2[SW_SEL_1] = song[song_index + SW_SEL_1];
   \   0000F0   0F41         MOV.W   SP, R15
   \   0000F2   3F500600     ADD.W   #0x6, R15
   \   0000F6   2F51         ADD.W   @SP, R15
   \   0000F8   1E42....     MOV.W   &display_2, R14
   \   0000FC   DE4F01000100 MOV.B   0x1(R15), 0x1(R14)
    270                    display_2[SW_SEL_2] = song[song_index + SW_SEL_2];
   \   000102   0F41         MOV.W   SP, R15
   \   000104   3F500600     ADD.W   #0x6, R15
   \   000108   2F51         ADD.W   @SP, R15
   \   00010A   1E42....     MOV.W   &display_2, R14
   \   00010E   DE4F02000200 MOV.B   0x2(R15), 0x2(R14)
    271                    display_2[SW_SEL_3] = song[song_index + SW_SEL_3];
   \   000114   0F41         MOV.W   SP, R15
   \   000116   3F500600     ADD.W   #0x6, R15
   \   00011A   2F51         ADD.W   @SP, R15
   \   00011C   1E42....     MOV.W   &display_2, R14
   \   000120   DE4F03000300 MOV.B   0x3(R15), 0x3(R14)
    272                    display_2[SW_SEL_4] = song[song_index + SW_SEL_4];
   \   000126   0F41         MOV.W   SP, R15
   \   000128   3F500600     ADD.W   #0x6, R15
   \   00012C   2F51         ADD.W   @SP, R15
   \   00012E   1E42....     MOV.W   &display_2, R14
   \   000132   DE4F04000400 MOV.B   0x4(R15), 0x4(R14)
    273                    display_2[SW_SEL_5] = song[song_index + SW_SEL_5];
   \   000138   0F41         MOV.W   SP, R15
   \   00013A   3F500600     ADD.W   #0x6, R15
   \   00013E   2F51         ADD.W   @SP, R15
   \   000140   1E42....     MOV.W   &display_2, R14
   \   000144   DE4F05000500 MOV.B   0x5(R15), 0x5(R14)
    274                    display_2[SW_SEL_6] = song[song_index + SW_SEL_6];
   \   00014A   0F41         MOV.W   SP, R15
   \   00014C   3F500600     ADD.W   #0x6, R15
   \   000150   2F51         ADD.W   @SP, R15
   \   000152   1E42....     MOV.W   &display_2, R14
   \   000156   DE4F06000600 MOV.B   0x6(R15), 0x6(R14)
    275                    display_2[SW_SEL_7] = song[song_index + SW_SEL_7];
   \   00015C   0F41         MOV.W   SP, R15
   \   00015E   3F500600     ADD.W   #0x6, R15
   \   000162   2F51         ADD.W   @SP, R15
   \   000164   1E42....     MOV.W   &display_2, R14
   \   000168   DE4F07000700 MOV.B   0x7(R15), 0x7(R14)
    276                    display_2[SW_SEL_8] = song[song_index + SW_SEL_8];
   \   00016E   0F41         MOV.W   SP, R15
   \   000170   3F500600     ADD.W   #0x6, R15
   \   000174   2F51         ADD.W   @SP, R15
   \   000176   1E42....     MOV.W   &display_2, R14
   \   00017A   DE4F08000800 MOV.B   0x8(R15), 0x8(R14)
    277                    display_2[SW_SEL_9] = song[song_index + SW_SEL_9];
   \   000180   0F41         MOV.W   SP, R15
   \   000182   3F500600     ADD.W   #0x6, R15
   \   000186   2F51         ADD.W   @SP, R15
   \   000188   1E42....     MOV.W   &display_2, R14
   \   00018C   DE4F09000900 MOV.B   0x9(R15), 0x9(R14)
    278           
    279                    // Update LCD Display
    280          	  Display_Process();
   \   000192   ........     CALLA   #Display_Process
    281          	  Five_msec_Delay(LIL_DELAY);
   \   000196   3C401900     MOV.W   #0x19, R12
   \   00019A   ........     CALLA   #Five_msec_Delay
    282          		
    283                    // Clean before return
    284                    if (!(P4IN & SW2)) {
   \   00019E   E2B32102     BIT.B   #0x2, &0x221
   \   0001A2   5F2F         JC      ??Song_Menu_1
    285                      Five_msec_Delay(LIL_SW_DELAY);
   \   0001A4   3C401F00     MOV.W   #0x1f, R12
   \   0001A8   ........     CALLA   #Five_msec_Delay
    286                      display_1 = "          ";
   \   0001AC   B240........ MOV.W   #`?<Constant "          ">`, &display_1
    287                      display_2 = "          ";
   \   0001B2   B240........ MOV.W   #`?<Constant "          ">`, &display_2
    288                      display_3 = "          ";
   \   0001B8   B240........ MOV.W   #`?<Constant "          ">`, &display_3
    289                      display_4 = "          ";
   \   0001BE   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    290                      break;
    291                    }
    292            }
    293          }
   \   0001C4   3150E800     ADD.W   #0xe8, SP
   \   0001C8   1A17         POPM.W  #0x2, R11
   \   0001CA   1001         RETA
   \   0001CC                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Color:    ">`:
   \   000000   436F6C6F723A DC8 "Color:    "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Value:    ">`:
   \   000000   56616C75653A DC8 "Value:    "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  We\\'re the Red and W...">`:
   \   000000   202057652772 DC8 20H, 20H, 57H, 65H, 27H, 72H, 65H, 20H
   \            6520        
   \   000008   746865205265 DC8 74H, 68H, 65H, 20H, 52H, 65H, 64H, 20H
   \            6420        
   \   000010   616E64205768 DC8 61H, 6EH, 64H, 20H, 57H, 68H, 69H, 74H
   \            6974        
   \   000018   652066726F6D DC8 65H, 20H, 66H, 72H, 6FH, 6DH, 20H, 53H
   \            2053        
   \   000020   746174652041 DC8 74H, 61H, 74H, 65H, 20H, 41H, 6EH, 64H
   \            6E64        
   \   000028   207765206B6E DC8 20H, 77H, 65H, 20H, 6BH, 6EH, 6FH, 77H
   \            6F77        
   \   000030   207765206172 DC8 20H, 77H, 65H, 20H, 61H, 72H, 65H, 20H
   \            6520        
   \   000038   746865206265 DC8 74H, 68H, 65H, 20H, 62H, 65H, 73H, 74H
   \            7374        
   \   000040   2E2041206861 DC8 2EH, 20H, 41H, 20H, 68H, 61H, 6EH, 64H
   \            6E64        
   \   000048   20626568696E DC8 20H, 62H, 65H, 68H, 69H, 6EH, 64H, 20H
   \            6420        
   \   000050   6F7572206261 DC8 6FH, 75H, 72H, 20H, 62H, 61H, 63H, 6BH
   \            636B        
   \   000058   2C2057652063 DC8 2CH, 20H, 57H, 65H, 20H, 63H, 61H, 6EH
   \            616E        
   \   000060   2074616B6520 DC8 20H, 74H, 61H, 6BH, 65H, 20H, 6FH, 6EH
   \            6F6E        
   \   000068   20616C6C2074 DC8 20H, 61H, 6CH, 6CH, 20H, 74H, 68H, 65H
   \            6865        
   \   000070   20726573742E DC8 20H, 72H, 65H, 73H, 74H, 2EH, 20H, 43H
   \            2043        
   \   000078   6F6D65206F76 DC8 6FH, 6DH, 65H, 20H, 6FH, 76H, 65H, 72H
   \            6572        
   \   000080   207468652068 DC8 20H, 74H, 68H, 65H, 20H, 68H, 69H, 6CH
   \            696C        
   \   000088   6C2C20436172 DC8 6CH, 2CH, 20H, 43H, 61H, 72H, 6FH, 6CH
   \            6F6C        
   \   000090   696E612E2044 DC8 69H, 6EH, 61H, 2EH, 20H, 44H, 65H, 76H
   \            6576        
   \   000098   696C7320616E DC8 69H, 6CH, 73H, 20H, 61H, 6EH, 64H, 20H
   \            6420        
   \   0000A0   446561637320 DC8 44H, 65H, 61H, 63H, 73H, 20H, 73H, 74H
   \            7374        
   \   0000A8   616E6420696E DC8 61H, 6EH, 64H, 20H, 69H, 6EH, 20H, 6CH
   \            206C        
   \   0000B0   696E652E2054 DC8 69H, 6EH, 65H, 2EH, 20H, 54H, 68H, 65H
   \            6865        
   \   0000B8   205265642061 DC8 20H, 52H, 65H, 64H, 20H, 61H, 6EH, 64H
   \            6E64        
   \   0000C0   205768697465 DC8 20H, 57H, 68H, 69H, 74H, 65H, 20H, 66H
   \            2066        
   \   0000C8   726F6D204E2E DC8 72H, 6FH, 6DH, 20H, 4EH, 2EH, 43H, 2EH
   \            432E        
   \   0000D0   205374617465 DC8 20H, 53H, 74H, 61H, 74H, 65H, 2EH, 20H
   \            2E20        
   \   0000D8   476F20537461 DC8 47H, 6FH, 20H, 53H, 74H, 61H, 74H, 65H
   \            7465        
   \   0000E0   2100         DC8 21H, 0

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   RED!   ">`:
   \   000000   202020524544 DC8 "   RED!   "
   \            2120202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  WHITE!  ">`:
   \   000000   202057484954 DC8 "  WHITE!  "
   \            4521202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Resistors_Menu
        6   -> ADC10_Process
        6   -> Display_Black
        6   -> Display_Blue
        6   -> Display_Brown
        6   -> Display_Gray
        6   -> Display_Green
        6   -> Display_Orange
        6   -> Display_Process
        6   -> Display_Red
        6   -> Display_Violet
        6   -> Display_White
        6   -> Display_Yellow
        6   -> Five_msec_Delay
        6   -> lcd_4line
      6   Shapes_Menu
        6   -> ADC10_Process
        6   -> Display_Circle
        6   -> Display_Cube
        6   -> Display_Cylinder
        6   -> Display_Hexagon
        6   -> Display_Octagon
        6   -> Display_Oval
        6   -> Display_Pentagon
        6   -> Display_Process
        6   -> Display_Sphere
        6   -> Display_Square
        6   -> Display_Triangle
        6   -> Five_msec_Delay
        6   -> lcd_BIG_mid
    240   Song_Menu
      240   -> ADC10_Process
      240   -> Display_Process
      240   -> Five_msec_Delay
      240   -> lcd_BIG_mid
      240 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "   RED!   ">
      11  ?<Constant "  WHITE!  ">
     226  ?<Constant "  We\'re the Red and W...">
      11  ?<Constant "Color:    ">
      11  ?<Constant "Value:    ">
     298  Resistors_Menu
     292  Shapes_Menu
     460  Song_Menu
       2  _A_PBIN_L

 
 1 050 bytes in segment CODE
     2 bytes in segment DATA16_AN
   281 bytes in segment DATA16_C
 
 1 050 bytes of CODE  memory
   281 bytes of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
