###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           17/Nov/2015  02:50:20
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\commandIOT.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\commandIOT.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\List\" -o
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\List\commandIOT.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\Obj\commandIOT.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\commandIOT.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file turns on the right forward port
      4          //
      5          //  Steffon Brigman
      6          //  Sept 2015
      7          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      8          //******************************************************************************
      9          
     10          //------------------------------------------------------------------------------
     11          
     12          //Points to Header files for Preprocessing
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          #include  "macros.h"
     16          

   \                                 In  segment CODE, align 2
     17          void Command_IOT(void){
   \                     Command_IOT:
   \   000000   3B15         PUSHM.W #0x4, R11
     18          //******************************************************************************
     19          //
     20          //  Description: This function implements the IOT operating system after
     21          //  configuration
     22          //
     23          //  Steffon Brigman
     24          //  Sept 2015
     25          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     26          //
     27          // Globals: Time_Sequence
     28          //
     29          // Passed: runRight
     30          //
     31          // Local: tmp
     32          //
     33          // Return: VOID
     34          //
     35          //****************************************************************************** 
     36            int L,R,T = TRUE;
   \   000002   1843         MOV.W   #0x1, R8
     37            int i = INITIAL;
   \   000004   0943         MOV.W   #0x0, R9
     38            Display_Format();
   \   000006   ........     CALLA   #Display_Format
     39            display_2 = "SYS. READY";
   \   00000A   B240........ MOV.W   #`?<Constant "SYS. READY">`, &display_2
     40            Display_Process();
   \   000010   ........     CALLA   #Display_Process
     41            Five_msec_Delay(BIGGER_DELAY);
   \   000014   3C404B00     MOV.W   #0x4b, R12
   \   000018   ........     CALLA   #Five_msec_Delay
     42            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   00001C   0943         MOV.W   #0x0, R9
   \                     ??Command_IOT_0:
   \   00001E   39902800     CMP.W   #0x28, R9
   \   000022   0434         JGE     ??Command_IOT_3
   \   000024   C943....     MOV.B   #0x0, IOT_RX(R9)
   \   000028   1953         ADD.W   #0x1, R9
   \   00002A   F93F         JMP     ??Command_IOT_0
     43            Time_Sequence = INITIAL;
   \                     ??Command_IOT_3:
   \   00002C   8243....     MOV.W   #0x0, &Time_Sequence
     44            
     45            while(ALWAYS) {
     46             // Command has been issued
     47              if (IOT_RX[Pos0] == '*') {
   \                     ??Command_IOT_2:
   \   000030   F2902A00.... CMP.B   #0x2a, &IOT_RX
   \   000036   7620         JNE     ??Command_IOT_4
     48                Five_msec_Delay(TRUE);
   \   000038   1C43         MOV.W   #0x1, R12
   \   00003A   ........     CALLA   #Five_msec_Delay
     49                // HARD CODED SECURITY PIN
     50                if ((IOT_RX[Pos1] == '2') && (IOT_RX[Pos2] == '5') && (IOT_RX[Pos3] == '4') && (IOT_RX[Pos4] == '0')) {
   \   00003E   F2903200.... CMP.B   #0x32, &IOT_RX + 1
   \   000044   6F20         JNE     ??Command_IOT_4
   \   000046   F2903500.... CMP.B   #0x35, &IOT_RX + 2
   \   00004C   6B20         JNE     ??Command_IOT_4
   \   00004E   F2903400.... CMP.B   #0x34, &IOT_RX + 3
   \   000054   6720         JNE     ??Command_IOT_4
   \   000056   F2903000.... CMP.B   #0x30, &IOT_RX + 4
   \   00005C   6320         JNE     ??Command_IOT_4
     51                  Five_msec_Delay(LIL_DELAY); 
   \   00005E   3C401900     MOV.W   #0x19, R12
   \   000062   ........     CALLA   #Five_msec_Delay
     52                  UCA1IE &= ~UCRXIE;
   \   000066   92C3FA05     BIC.W   #0x1, &0x5fa
     53                  // FORWARD COMMAND
     54                  if(IOT_RX[Pos5] == 'F') {
   \   00006A   F2904600.... CMP.B   #0x46, &IOT_RX + 5
   \   000070   1820         JNE     ??Command_IOT_5
     55                    L = IOT_RX[Pos6] - NUMBER_OP;
   \   000072   5F42....     MOV.B   &IOT_RX + 6, R15
   \   000076   4F4F         MOV.B   R15, R15
   \   000078   3F50D0FF     ADD.W   #0xffd0, R15
   \   00007C   0A4F         MOV.W   R15, R10
     56                    R = IOT_RX[Pos7] - NUMBER_OP;
   \   00007E   5F42....     MOV.B   &IOT_RX + 7, R15
   \   000082   4F4F         MOV.B   R15, R15
   \   000084   3F50D0FF     ADD.W   #0xffd0, R15
   \   000088   0B4F         MOV.W   R15, R11
     57                    T = IOT_RX[Pos8] - NUMBER_OP;
   \   00008A   5F42....     MOV.B   &IOT_RX + 8, R15
   \   00008E   4F4F         MOV.B   R15, R15
   \   000090   3F50D0FF     ADD.W   #0xffd0, R15
   \   000094   084F         MOV.W   R15, R8
     58                    IOT_driveForward(L, R, T);
   \   000096   0E48         MOV.W   R8, R14
   \   000098   0D4B         MOV.W   R11, R13
   \   00009A   0C4A         MOV.W   R10, R12
   \   00009C   ........     CALLA   #IOT_driveForward
   \   0000A0   373C         JMP     ??Command_IOT_6
     59                  }
     60                  else if(IOT_RX[Pos5] == 'B') {
   \                     ??Command_IOT_5:
   \   0000A2   F2904200.... CMP.B   #0x42, &IOT_RX + 5
   \   0000A8   1820         JNE     ??Command_IOT_7
     61                    L = IOT_RX[Pos6] - NUMBER_OP;
   \   0000AA   5F42....     MOV.B   &IOT_RX + 6, R15
   \   0000AE   4F4F         MOV.B   R15, R15
   \   0000B0   3F50D0FF     ADD.W   #0xffd0, R15
   \   0000B4   0A4F         MOV.W   R15, R10
     62                    R = IOT_RX[Pos7] - NUMBER_OP;
   \   0000B6   5F42....     MOV.B   &IOT_RX + 7, R15
   \   0000BA   4F4F         MOV.B   R15, R15
   \   0000BC   3F50D0FF     ADD.W   #0xffd0, R15
   \   0000C0   0B4F         MOV.W   R15, R11
     63                    T = IOT_RX[Pos8] - NUMBER_OP;
   \   0000C2   5F42....     MOV.B   &IOT_RX + 8, R15
   \   0000C6   4F4F         MOV.B   R15, R15
   \   0000C8   3F50D0FF     ADD.W   #0xffd0, R15
   \   0000CC   084F         MOV.W   R15, R8
     64                    IOT_driveReverse(L, R, T);
   \   0000CE   0E48         MOV.W   R8, R14
   \   0000D0   0D4B         MOV.W   R11, R13
   \   0000D2   0C4A         MOV.W   R10, R12
   \   0000D4   ........     CALLA   #IOT_driveReverse
   \   0000D8   1B3C         JMP     ??Command_IOT_6
     65                  }
     66                  else if(IOT_RX[Pos5] == 'L') {
   \                     ??Command_IOT_7:
   \   0000DA   F2904C00.... CMP.B   #0x4c, &IOT_RX + 5
   \   0000E0   0A20         JNE     ??Command_IOT_8
     67                    T = IOT_RX[Pos8] - NUMBER_OP;
   \   0000E2   5F42....     MOV.B   &IOT_RX + 8, R15
   \   0000E6   4F4F         MOV.B   R15, R15
   \   0000E8   3F50D0FF     ADD.W   #0xffd0, R15
   \   0000EC   084F         MOV.W   R15, R8
     68                    IOT_Clockwise(T);
   \   0000EE   0C48         MOV.W   R8, R12
   \   0000F0   ........     CALLA   #IOT_Clockwise
   \   0000F4   0D3C         JMP     ??Command_IOT_6
     69                  }
     70                  else if(IOT_RX[Pos5] == 'R') {
   \                     ??Command_IOT_8:
   \   0000F6   F2905200.... CMP.B   #0x52, &IOT_RX + 5
   \   0000FC   0920         JNE     ??Command_IOT_6
     71                    T = IOT_RX[Pos8] - NUMBER_OP;
   \   0000FE   5F42....     MOV.B   &IOT_RX + 8, R15
   \   000102   4F4F         MOV.B   R15, R15
   \   000104   3F50D0FF     ADD.W   #0xffd0, R15
   \   000108   084F         MOV.W   R15, R8
     72                    IOT_Counterclockwise(T);
   \   00010A   0C48         MOV.W   R8, R12
   \   00010C   ........     CALLA   #IOT_Counterclockwise
     73                  }
     74                  UCA1IE |= UCRXIE;
   \                     ??Command_IOT_6:
   \   000110   92D3FA05     BIS.W   #0x1, &0x5fa
     75                  for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   000114   0943         MOV.W   #0x0, R9
   \                     ??Command_IOT_1:
   \   000116   39902800     CMP.W   #0x28, R9
   \   00011A   0434         JGE     ??Command_IOT_4
   \   00011C   C943....     MOV.B   #0x0, IOT_RX(R9)
   \   000120   1953         ADD.W   #0x1, R9
   \   000122   F93F         JMP     ??Command_IOT_1
     76                }
     77              }
     78              
     79              if (!(P4IN & SW2)) {
   \                     ??Command_IOT_4:
   \   000124   E2B32102     BIT.B   #0x2, &0x221
   \   000128   052C         JC      ??Command_IOT_9
     80                Five_msec_Delay(LIL_SW_DELAY); 
   \   00012A   3C401F00     MOV.W   #0x1f, R12
   \   00012E   ........     CALLA   #Five_msec_Delay
     81                break;
     82              }
     83              if(Time_Sequence > CASE250){                  // Fail-safe for clock
     84                PING();
     85                Time_Sequence = INITIAL;
     86              }
     87            }
     88          }
   \   000132   093C         JMP     ??Command_IOT_10
   \                     ??Command_IOT_9:
   \   000134   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   00013A   7A2B         JNC     ??Command_IOT_2
   \   00013C   ........     CALLA   #PING
   \   000140   8243....     MOV.W   #0x0, &Time_Sequence
   \   000144   753F         JMP     ??Command_IOT_2
   \                     ??Command_IOT_10:
   \   000146   3817         POPM.W  #0x4, R11
   \   000148   1001         RETA
   \   00014A                REQUIRE _A_UCA1IE_L
   \   00014A                REQUIRE _A_PBIN_L
     89          

   \                                 In  segment CODE, align 2
     90          void IOT_driveForward(unsigned int leftDrive, unsigned int rightDrive, unsigned int runTime){
   \                     IOT_driveForward:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
     91          //******************************************************************************
     92          //
     93          //  Description: This function implements the IOT forward drive
     94          //
     95          //  Steffon Brigman
     96          //  Sept 2015
     97          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     98          //
     99          // Globals: Time_Sequence
    100          //
    101          // Passed: runRight
    102          //
    103          // Local: tmp
    104          //
    105          // Return: VOID
    106          //
    107          //******************************************************************************
    108            
    109            display_1 = "----------";
   \   000008   B240........ MOV.W   #`?<Constant "----------">`, &display_1
    110            posL1 = LINE_POS_L0;
   \   00000E   C243....     MOV.B   #0x0, &posL1
    111            display_2 = " Forward  ";
   \   000012   B240........ MOV.W   #`?<Constant " Forward  ">`, &display_2
    112            posL2 = LINE_POS_L0;
   \   000018   C243....     MOV.B   #0x0, &posL2
    113            display_3 = "----------";
   \   00001C   B240........ MOV.W   #`?<Constant "----------">`, &display_3
    114            posL3 = LINE_POS_L0;
   \   000022   C243....     MOV.B   #0x0, &posL3
    115            display_4 = "          ";
   \   000026   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    116            posL4 = LINE_POS_L0;
   \   00002C   C243....     MOV.B   #0x0, &posL4
    117            big = TRUE;
   \   000030   D243....     MOV.B   #0x1, &big
    118            lcd_BIG_mid();
   \   000034   ........     CALLA   #lcd_BIG_mid
    119            Display_Process();
   \   000038   ........     CALLA   #Display_Process
    120            Five_msec_Delay(BIG_DELAY);
   \   00003C   3C403200     MOV.W   #0x32, R12
   \   000040   ........     CALLA   #Five_msec_Delay
    121            
    122            runTime *= ONE_SEC_COUNT;
   \   000044   580A         RLAM.W  #0x3, R8
   \   000046   0F48         MOV.W   R8, R15
   \   000048   5806         RLAM.W  #0x2, R8
   \   00004A   0F58         ADD.W   R8, R15
   \   00004C   0858         RLA.W   R8
   \   00004E   0F58         ADD.W   R8, R15
   \   000050   0858         RLA.W   R8
   \   000052   0F58         ADD.W   R8, R15
   \   000054   0858         RLA.W   R8
   \   000056   0F58         ADD.W   R8, R15
   \   000058   0858         RLA.W   R8
   \   00005A   085F         ADD.W   R15, R8
    123            Right_Forward_Off();
   \   00005C   ........     CALLA   #Right_Forward_Off
    124            Left_Forward_Off();
   \   000060   ........     CALLA   #Left_Forward_Off
    125            Right_Reverse_Off();
   \   000064   ........     CALLA   #Right_Reverse_Off
    126            Left_Reverse_Off();
   \   000068   ........     CALLA   #Left_Reverse_Off
    127            Time_Sequence = INITIAL;
   \   00006C   8243....     MOV.W   #0x0, &Time_Sequence
    128            A0_time_count = INITIAL;
   \   000070   8243....     MOV.W   #0x0, &A0_time_count
    129            while(A0_time_count <= runTime) {
   \                     ??IOT_driveForward_0:
   \   000074   1892....     CMP.W   &A0_time_count, R8
   \   000078   0B28         JNC     ??IOT_driveForward_1
    130              Left_Forward_On(leftDrive);
   \   00007A   0C4A         MOV.W   R10, R12
   \   00007C   ........     CALLA   #Left_Forward_On
    131              Left_Forward_Off();
   \   000080   ........     CALLA   #Left_Forward_Off
    132              Right_Forward_On(rightDrive);
   \   000084   0C4B         MOV.W   R11, R12
   \   000086   ........     CALLA   #Right_Forward_On
    133              Right_Forward_Off();
   \   00008A   ........     CALLA   #Right_Forward_Off
   \   00008E   F23F         JMP     ??IOT_driveForward_0
    134            }
    135            Right_Forward_Off();
   \                     ??IOT_driveForward_1:
   \   000090   ........     CALLA   #Right_Forward_Off
    136            Left_Forward_Off();
   \   000094   ........     CALLA   #Left_Forward_Off
    137            Right_Reverse_Off();
   \   000098   ........     CALLA   #Right_Reverse_Off
    138            Left_Reverse_Off();
   \   00009C   ........     CALLA   #Left_Reverse_Off
    139            Time_Sequence = INITIAL;
   \   0000A0   8243....     MOV.W   #0x0, &Time_Sequence
    140            A0_time_count = INITIAL;
   \   0000A4   8243....     MOV.W   #0x0, &A0_time_count
    141            
    142            display_2 = "SYS. READY";
   \   0000A8   B240........ MOV.W   #`?<Constant "SYS. READY">`, &display_2
    143            Display_Process();
   \   0000AE   ........     CALLA   #Display_Process
    144            Five_msec_Delay(BIG_DELAY);
   \   0000B2   3C403200     MOV.W   #0x32, R12
   \   0000B6   ........     CALLA   #Five_msec_Delay
    145          }
   \   0000BA   3817         POPM.W  #0x4, R11
   \   0000BC   1001         RETA
    146          

   \                                 In  segment CODE, align 2
    147          void IOT_driveReverse(unsigned int leftDrive, unsigned int rightDrive, unsigned int runTime){
   \                     IOT_driveReverse:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
    148          //******************************************************************************
    149          //
    150          //  Description: This function implements the IOT forward drive
    151          //
    152          //  Steffon Brigman
    153          //  Sept 2015
    154          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    155          //
    156          // Globals: Time_Sequence
    157          //
    158          // Passed: runRight
    159          //
    160          // Local: tmp
    161          //
    162          // Return: VOID
    163          //
    164          //******************************************************************************
    165            
    166            display_1 = "----------";
   \   000008   B240........ MOV.W   #`?<Constant "----------">`, &display_1
    167            posL1 = LINE_POS_L0;
   \   00000E   C243....     MOV.B   #0x0, &posL1
    168            display_2 = " Reverse  ";
   \   000012   B240........ MOV.W   #`?<Constant " Reverse  ">`, &display_2
    169            posL2 = LINE_POS_L0;
   \   000018   C243....     MOV.B   #0x0, &posL2
    170            display_3 = "----------";
   \   00001C   B240........ MOV.W   #`?<Constant "----------">`, &display_3
    171            posL3 = LINE_POS_L0;
   \   000022   C243....     MOV.B   #0x0, &posL3
    172            display_4 = "          ";
   \   000026   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    173            posL4 = LINE_POS_L0;
   \   00002C   C243....     MOV.B   #0x0, &posL4
    174            big = TRUE;
   \   000030   D243....     MOV.B   #0x1, &big
    175            lcd_BIG_mid();
   \   000034   ........     CALLA   #lcd_BIG_mid
    176            Display_Process();
   \   000038   ........     CALLA   #Display_Process
    177            Five_msec_Delay(BIG_DELAY);
   \   00003C   3C403200     MOV.W   #0x32, R12
   \   000040   ........     CALLA   #Five_msec_Delay
    178            
    179            runTime *= ONE_SEC_COUNT;
   \   000044   580A         RLAM.W  #0x3, R8
   \   000046   0F48         MOV.W   R8, R15
   \   000048   5806         RLAM.W  #0x2, R8
   \   00004A   0F58         ADD.W   R8, R15
   \   00004C   0858         RLA.W   R8
   \   00004E   0F58         ADD.W   R8, R15
   \   000050   0858         RLA.W   R8
   \   000052   0F58         ADD.W   R8, R15
   \   000054   0858         RLA.W   R8
   \   000056   0F58         ADD.W   R8, R15
   \   000058   0858         RLA.W   R8
   \   00005A   085F         ADD.W   R15, R8
    180            Right_Forward_Off();
   \   00005C   ........     CALLA   #Right_Forward_Off
    181            Left_Forward_Off();
   \   000060   ........     CALLA   #Left_Forward_Off
    182            Right_Reverse_Off();
   \   000064   ........     CALLA   #Right_Reverse_Off
    183            Left_Reverse_Off();
   \   000068   ........     CALLA   #Left_Reverse_Off
    184            Time_Sequence = INITIAL;
   \   00006C   8243....     MOV.W   #0x0, &Time_Sequence
    185            A0_time_count = INITIAL;
   \   000070   8243....     MOV.W   #0x0, &A0_time_count
    186            while(A0_time_count <= runTime) {
   \                     ??IOT_driveReverse_0:
   \   000074   1892....     CMP.W   &A0_time_count, R8
   \   000078   0B28         JNC     ??IOT_driveReverse_1
    187              Left_Reverse_On(leftDrive);
   \   00007A   0C4A         MOV.W   R10, R12
   \   00007C   ........     CALLA   #Left_Reverse_On
    188              Left_Reverse_Off();
   \   000080   ........     CALLA   #Left_Reverse_Off
    189              Right_Reverse_On(rightDrive);
   \   000084   0C4B         MOV.W   R11, R12
   \   000086   ........     CALLA   #Right_Reverse_On
    190              Right_Reverse_Off();
   \   00008A   ........     CALLA   #Right_Reverse_Off
   \   00008E   F23F         JMP     ??IOT_driveReverse_0
    191            }
    192            Right_Forward_Off();
   \                     ??IOT_driveReverse_1:
   \   000090   ........     CALLA   #Right_Forward_Off
    193            Left_Forward_Off();
   \   000094   ........     CALLA   #Left_Forward_Off
    194            Right_Reverse_Off();
   \   000098   ........     CALLA   #Right_Reverse_Off
    195            Left_Reverse_Off();
   \   00009C   ........     CALLA   #Left_Reverse_Off
    196            Time_Sequence = INITIAL;
   \   0000A0   8243....     MOV.W   #0x0, &Time_Sequence
    197            A0_time_count = INITIAL;
   \   0000A4   8243....     MOV.W   #0x0, &A0_time_count
    198            
    199            display_2 = "SYS. READY";
   \   0000A8   B240........ MOV.W   #`?<Constant "SYS. READY">`, &display_2
    200            Display_Process();
   \   0000AE   ........     CALLA   #Display_Process
    201            Five_msec_Delay(BIG_DELAY);
   \   0000B2   3C403200     MOV.W   #0x32, R12
   \   0000B6   ........     CALLA   #Five_msec_Delay
    202          }
   \   0000BA   3817         POPM.W  #0x4, R11
   \   0000BC   1001         RETA
    203          

   \                                 In  segment CODE, align 2
    204          void IOT_Clockwise(unsigned int runTime){
   \                     IOT_Clockwise:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
    205          //******************************************************************************
    206          //
    207          //  Description: This function implements the IOT forward drive
    208          //
    209          //  Steffon Brigman
    210          //  Sept 2015
    211          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    212          //
    213          // Globals: Time_Sequence
    214          //
    215          // Passed: runRight
    216          //
    217          // Local: tmp
    218          //
    219          // Return: VOID
    220          //
    221          //******************************************************************************
    222            
    223            display_1 = "----------";
   \   000004   B240........ MOV.W   #`?<Constant "----------">`, &display_1
    224            posL1 = LINE_POS_L0;
   \   00000A   C243....     MOV.B   #0x0, &posL1
    225            display_2 = "Clockwise ";
   \   00000E   B240........ MOV.W   #`?<Constant "Clockwise ">`, &display_2
    226            posL2 = LINE_POS_L0;
   \   000014   C243....     MOV.B   #0x0, &posL2
    227            display_3 = "----------";
   \   000018   B240........ MOV.W   #`?<Constant "----------">`, &display_3
    228            posL3 = LINE_POS_L0;
   \   00001E   C243....     MOV.B   #0x0, &posL3
    229            display_4 = "          ";
   \   000022   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    230            posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
    231            big = TRUE;
   \   00002C   D243....     MOV.B   #0x1, &big
    232            lcd_BIG_mid();
   \   000030   ........     CALLA   #lcd_BIG_mid
    233            Display_Process();
   \   000034   ........     CALLA   #Display_Process
    234            Five_msec_Delay(BIG_DELAY);
   \   000038   3C403200     MOV.W   #0x32, R12
   \   00003C   ........     CALLA   #Five_msec_Delay
    235            
    236            runTime *= ONE_SEC_COUNT;
   \   000040   5A0A         RLAM.W  #0x3, R10
   \   000042   0F4A         MOV.W   R10, R15
   \   000044   5A06         RLAM.W  #0x2, R10
   \   000046   0F5A         ADD.W   R10, R15
   \   000048   0A5A         RLA.W   R10
   \   00004A   0F5A         ADD.W   R10, R15
   \   00004C   0A5A         RLA.W   R10
   \   00004E   0F5A         ADD.W   R10, R15
   \   000050   0A5A         RLA.W   R10
   \   000052   0F5A         ADD.W   R10, R15
   \   000054   0A5A         RLA.W   R10
   \   000056   0A5F         ADD.W   R15, R10
    237            Right_Forward_Off();
   \   000058   ........     CALLA   #Right_Forward_Off
    238            Left_Forward_Off();
   \   00005C   ........     CALLA   #Left_Forward_Off
    239            Right_Reverse_Off();
   \   000060   ........     CALLA   #Right_Reverse_Off
    240            Left_Reverse_Off();
   \   000064   ........     CALLA   #Left_Reverse_Off
    241            Time_Sequence = INITIAL;
   \   000068   8243....     MOV.W   #0x0, &Time_Sequence
    242            A0_time_count = INITIAL;
   \   00006C   8243....     MOV.W   #0x0, &A0_time_count
    243            while(A0_time_count <= runTime) {
   \                     ??IOT_Clockwise_0:
   \   000070   1A92....     CMP.W   &A0_time_count, R10
   \   000074   0B28         JNC     ??IOT_Clockwise_1
    244              Left_Forward_On(TRUE);
   \   000076   1C43         MOV.W   #0x1, R12
   \   000078   ........     CALLA   #Left_Forward_On
    245              Left_Forward_Off();
   \   00007C   ........     CALLA   #Left_Forward_Off
    246              Right_Reverse_On(TRUE);
   \   000080   1C43         MOV.W   #0x1, R12
   \   000082   ........     CALLA   #Right_Reverse_On
    247              Right_Reverse_Off();
   \   000086   ........     CALLA   #Right_Reverse_Off
   \   00008A   F23F         JMP     ??IOT_Clockwise_0
    248            }
    249            Right_Forward_Off();
   \                     ??IOT_Clockwise_1:
   \   00008C   ........     CALLA   #Right_Forward_Off
    250            Left_Forward_Off();
   \   000090   ........     CALLA   #Left_Forward_Off
    251            Right_Reverse_Off();
   \   000094   ........     CALLA   #Right_Reverse_Off
    252            Left_Reverse_Off();
   \   000098   ........     CALLA   #Left_Reverse_Off
    253            Time_Sequence = INITIAL;
   \   00009C   8243....     MOV.W   #0x0, &Time_Sequence
    254            A0_time_count = INITIAL;
   \   0000A0   8243....     MOV.W   #0x0, &A0_time_count
    255            
    256            display_2 = "SYS. READY";
   \   0000A4   B240........ MOV.W   #`?<Constant "SYS. READY">`, &display_2
    257            Display_Process();
   \   0000AA   ........     CALLA   #Display_Process
    258            Five_msec_Delay(BIG_DELAY);
   \   0000AE   3C403200     MOV.W   #0x32, R12
   \   0000B2   ........     CALLA   #Five_msec_Delay
    259          }
   \   0000B6   3A41         POP.W   R10
   \   0000B8   1001         RETA
    260          

   \                                 In  segment CODE, align 2
    261          void IOT_Counterclockwise(unsigned int runTime){
   \                     IOT_Counterclockwise:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
    262          //******************************************************************************
    263          //
    264          //  Description: This function implements the IOT forward drive
    265          //
    266          //  Steffon Brigman
    267          //  Sept 2015
    268          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    269          //
    270          // Globals: Time_Sequence
    271          //
    272          // Passed: runRight
    273          //
    274          // Local: tmp
    275          //
    276          // Return: VOID
    277          //
    278          //******************************************************************************
    279            
    280            display_1 = " Counter  ";
   \   000004   B240........ MOV.W   #`?<Constant " Counter  ">`, &display_1
    281            posL1 = LINE_POS_L0;
   \   00000A   C243....     MOV.B   #0x0, &posL1
    282            display_2 = "Clockwise ";
   \   00000E   B240........ MOV.W   #`?<Constant "Clockwise ">`, &display_2
    283            posL2 = LINE_POS_L0;
   \   000014   C243....     MOV.B   #0x0, &posL2
    284            display_3 = "----------";
   \   000018   B240........ MOV.W   #`?<Constant "----------">`, &display_3
    285            posL3 = LINE_POS_L0;
   \   00001E   C243....     MOV.B   #0x0, &posL3
    286            display_4 = "          ";
   \   000022   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    287            posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
    288            big = TRUE;
   \   00002C   D243....     MOV.B   #0x1, &big
    289            lcd_BIG_mid();
   \   000030   ........     CALLA   #lcd_BIG_mid
    290            Display_Process();
   \   000034   ........     CALLA   #Display_Process
    291            Five_msec_Delay(BIG_DELAY);
   \   000038   3C403200     MOV.W   #0x32, R12
   \   00003C   ........     CALLA   #Five_msec_Delay
    292            
    293            runTime *= ONE_SEC_COUNT;
   \   000040   5A0A         RLAM.W  #0x3, R10
   \   000042   0F4A         MOV.W   R10, R15
   \   000044   5A06         RLAM.W  #0x2, R10
   \   000046   0F5A         ADD.W   R10, R15
   \   000048   0A5A         RLA.W   R10
   \   00004A   0F5A         ADD.W   R10, R15
   \   00004C   0A5A         RLA.W   R10
   \   00004E   0F5A         ADD.W   R10, R15
   \   000050   0A5A         RLA.W   R10
   \   000052   0F5A         ADD.W   R10, R15
   \   000054   0A5A         RLA.W   R10
   \   000056   0A5F         ADD.W   R15, R10
    294            Right_Forward_Off();
   \   000058   ........     CALLA   #Right_Forward_Off
    295            Left_Forward_Off();
   \   00005C   ........     CALLA   #Left_Forward_Off
    296            Right_Reverse_Off();
   \   000060   ........     CALLA   #Right_Reverse_Off
    297            Left_Reverse_Off();
   \   000064   ........     CALLA   #Left_Reverse_Off
    298            Time_Sequence = INITIAL;
   \   000068   8243....     MOV.W   #0x0, &Time_Sequence
    299            A0_time_count = INITIAL;
   \   00006C   8243....     MOV.W   #0x0, &A0_time_count
    300            while(A0_time_count <= runTime) {
   \                     ??IOT_Counterclockwise_0:
   \   000070   1A92....     CMP.W   &A0_time_count, R10
   \   000074   0B28         JNC     ??IOT_Counterclockwise_1
    301              Left_Reverse_On(TRUE);
   \   000076   1C43         MOV.W   #0x1, R12
   \   000078   ........     CALLA   #Left_Reverse_On
    302              Left_Reverse_Off();
   \   00007C   ........     CALLA   #Left_Reverse_Off
    303              Right_Forward_On(TRUE);
   \   000080   1C43         MOV.W   #0x1, R12
   \   000082   ........     CALLA   #Right_Forward_On
    304              Right_Forward_Off();
   \   000086   ........     CALLA   #Right_Forward_Off
   \   00008A   F23F         JMP     ??IOT_Counterclockwise_0
    305            }
    306            Right_Forward_Off();
   \                     ??IOT_Counterclockwise_1:
   \   00008C   ........     CALLA   #Right_Forward_Off
    307            Left_Forward_Off();
   \   000090   ........     CALLA   #Left_Forward_Off
    308            Right_Reverse_Off();
   \   000094   ........     CALLA   #Right_Reverse_Off
    309            Left_Reverse_Off();
   \   000098   ........     CALLA   #Left_Reverse_Off
    310            Time_Sequence = INITIAL;
   \   00009C   8243....     MOV.W   #0x0, &Time_Sequence
    311            A0_time_count = INITIAL;
   \   0000A0   8243....     MOV.W   #0x0, &A0_time_count
    312            
    313            display_1 = "----------";
   \   0000A4   B240........ MOV.W   #`?<Constant "----------">`, &display_1
    314            display_2 = "SYS. READY";
   \   0000AA   B240........ MOV.W   #`?<Constant "SYS. READY">`, &display_2
    315            Display_Process();
   \   0000B0   ........     CALLA   #Display_Process
    316            Five_msec_Delay(BIG_DELAY);
   \   0000B4   3C403200     MOV.W   #0x32, R12
   \   0000B8   ........     CALLA   #Five_msec_Delay
    317          }
   \   0000BC   3A41         POP.W   R10
   \   0000BE   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "SYS. READY">`:
   \   000000   5359532E2052 DC8 "SYS. READY"
   \            4541445900  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Forward  ">`:
   \   000000   20466F727761 DC8 " Forward  "
   \            7264202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Reverse  ">`:
   \   000000   205265766572 DC8 " Reverse  "
   \            7365202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Clockwise ">`:
   \   000000   436C6F636B77 DC8 "Clockwise "
   \            6973652000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Counter  ">`:
   \   000000   20436F756E74 DC8 " Counter  "
   \            6572202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Command_IOT
       12   -> Display_Format
       12   -> Display_Process
       12   -> Five_msec_Delay
       12   -> IOT_Clockwise
       12   -> IOT_Counterclockwise
       12   -> IOT_driveForward
       12   -> IOT_driveReverse
       12   -> PING
      6   IOT_Clockwise
        6   -> Display_Process
        6   -> Five_msec_Delay
        6   -> Left_Forward_Off
        6   -> Left_Forward_On
        6   -> Left_Reverse_Off
        6   -> Right_Forward_Off
        6   -> Right_Reverse_Off
        6   -> Right_Reverse_On
        6   -> lcd_BIG_mid
      6   IOT_Counterclockwise
        6   -> Display_Process
        6   -> Five_msec_Delay
        6   -> Left_Forward_Off
        6   -> Left_Reverse_Off
        6   -> Left_Reverse_On
        6   -> Right_Forward_Off
        6   -> Right_Forward_On
        6   -> Right_Reverse_Off
        6   -> lcd_BIG_mid
     12   IOT_driveForward
       12   -> Display_Process
       12   -> Five_msec_Delay
       12   -> Left_Forward_Off
       12   -> Left_Forward_On
       12   -> Left_Reverse_Off
       12   -> Right_Forward_Off
       12   -> Right_Forward_On
       12   -> Right_Reverse_Off
       12   -> lcd_BIG_mid
     12   IOT_driveReverse
       12   -> Display_Process
       12   -> Five_msec_Delay
       12   -> Left_Forward_Off
       12   -> Left_Reverse_Off
       12   -> Left_Reverse_On
       12   -> Right_Forward_Off
       12   -> Right_Reverse_Off
       12   -> Right_Reverse_On
       12   -> lcd_BIG_mid


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant " Counter  ">
      11  ?<Constant " Forward  ">
      11  ?<Constant " Reverse  ">
      11  ?<Constant "----------">
      11  ?<Constant "Clockwise ">
      11  ?<Constant "SYS. READY">
     330  Command_IOT
     186  IOT_Clockwise
     192  IOT_Counterclockwise
     190  IOT_driveForward
     190  IOT_driveReverse
       2  _A_PBIN_L
       2  _A_UCA1IE_L

 
 1 088 bytes in segment CODE
     4 bytes in segment DATA16_AN
    77 bytes in segment DATA16_C
 
 1 088 bytes of CODE  memory
    77 bytes of CONST memory
     0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
