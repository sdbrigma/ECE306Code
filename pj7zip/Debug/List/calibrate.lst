###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           17/Nov/2015  02:50:14
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\calibrate.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\calibrate.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\List\" -o
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\List\calibrate.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\Obj\calibrate.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\calibrate.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the calibration routine module
      4          //
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //Points to Header files for Preprocessing
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          

   \                                 In  segment CODE, align 2
     16          void Calibrate(void){
   \                     Calibrate:
   \   000000   0A12         PUSH.W  R10
     17          //******************************************************************************
     18          //
     19          //  Description: This file contains the calibration routine module
     20          //
     21          //
     22          //  Steffon Brigman
     23          //  Sept 2015
     24          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     25          //
     26          // Globals: blackLineLeft, blackLineRight
     27          //
     28          // Passed:
     29          //
     30          // Local: i
     31          //
     32          // Return: VOID
     33          //
     34          //****************************************************************************** 
     35          
     36            display_1 = "  Detect  ";
   \   000002   B240........ MOV.W   #`?<Constant "  Detect  ">`, &display_1
     37            posL1 = LINE_POS_L0;
   \   000008   C243....     MOV.B   #0x0, &posL1
     38            display_2 = "LEFT:     ";
   \   00000C   B240........ MOV.W   #`?<Constant "LEFT:     ">`, &display_2
     39            posL2 = LINE_POS_L0;
   \   000012   C243....     MOV.B   #0x0, &posL2
     40            display_3 = "RIGHT:    ";
   \   000016   B240........ MOV.W   #`?<Constant "RIGHT:    ">`, &display_3
     41            posL3 = LINE_POS_L0;
   \   00001C   C243....     MOV.B   #0x0, &posL3
     42            display_4 = "          ";
   \   000020   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     43            big = INITIAL;
   \   000026   C243....     MOV.B   #0x0, &big
     44            lcd_4line();
   \   00002A   ........     CALLA   #lcd_4line
     45            Display_Process();
   \   00002E   ........     CALLA   #Display_Process
     46            
     47            // Enable Infrared Emitter
     48            P1OUT |= IR_LED;                    // P1OUT ->    1
   \   000032   E2D20202     BIS.B   #0x4, &0x202
     49            
     50          int i= TEN_ITERATIONS;
   \   000036   3A400A00     MOV.W   #0xa, R10
     51          while(i) {
   \                     ??Calibrate_0:
   \   00003A   0A93         CMP.W   #0x0, R10
   \   00003C   0424         JEQ     ??Calibrate_2
     52          ADC10_Process();
   \   00003E   ........     CALLA   #ADC10_Process
     53            i--;
   \   000042   3A53         ADD.W   #0xffff, R10
   \   000044   FA3F         JMP     ??Calibrate_0
     54          }
     55            
     56          blackLineLeft = ADC_Left_Detector;
   \                     ??Calibrate_2:
   \   000046   9242........ MOV.W   &ADC_Left_Detector, &blackLineLeft
     57          blackLineRight = ADC_Right_Detector;
   \   00004C   9242........ MOV.W   &ADC_Right_Detector, &blackLineRight
     58           
     59                display_1 = "Detectors";
   \   000052   B240........ MOV.W   #`?<Constant "Detectors">`, &display_1
     60                posL1 = LINE_POS_L0;
   \   000058   C243....     MOV.B   #0x0, &posL1
     61                display_2 = "Calibrated";
   \   00005C   B240........ MOV.W   #`?<Constant "Calibrated">`, &display_2
     62                posL2 = LINE_POS_L0;
   \   000062   C243....     MOV.B   #0x0, &posL2
     63                display_3 = "Push";
   \   000066   B240........ MOV.W   #`?<Constant "Push">`, &display_3
     64                posL3 = LINE_POS_L3;
   \   00006C   F2400300.... MOV.B   #0x3, &posL3
     65                display_4 =  "Select";
   \   000072   B240........ MOV.W   #`?<Constant "Select">`, &display_4
     66                posL4 = LINE_POS_L2;
   \   000078   E243....     MOV.B   #0x2, &posL4
     67                Display_Process();
   \   00007C   ........     CALLA   #Display_Process
     68                
     69                while(ALWAYS) {
     70                  if (!(P4IN & SW2)) {
   \                     ??Calibrate_1:
   \   000080   E2B32102     BIT.B   #0x2, &0x221
   \   000084   FD2F         JC      ??Calibrate_1
     71                    Five_msec_Delay(LIL_SW_DELAY); 
   \   000086   3C401F00     MOV.W   #0x1f, R12
   \   00008A   ........     CALLA   #Five_msec_Delay
     72                    break;
     73                  }
     74                }
     75            
     76          }
   \   00008E   3A41         POP.W   R10
   \   000090   1001         RETA
   \   000092                REQUIRE _A_PAOUT_L
   \   000092                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Detect  ">`:
   \   000000   202044657465 DC8 "  Detect  "
   \            6374202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "LEFT:     ">`:
   \   000000   4C4546543A20 DC8 "LEFT:     "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "RIGHT:    ">`:
   \   000000   52494748543A DC8 "RIGHT:    "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Detectors">`:
   \   000000   446574656374 DC8 "Detectors"
   \            6F727300    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Calibrated">`:
   \   000000   43616C696272 DC8 "Calibrated"
   \            6174656400  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Push">`:
   \   000000   5075736800   DC8 "Push"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Select">`:
   \   000000   53656C656374 DC8 "Select"
   \            00          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Calibrate
        6   -> ADC10_Process
        6   -> Display_Process
        6   -> Five_msec_Delay
        6   -> lcd_4line


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "  Detect  ">
      11  ?<Constant "Calibrated">
      10  ?<Constant "Detectors">
      11  ?<Constant "LEFT:     ">
       5  ?<Constant "Push">
      11  ?<Constant "RIGHT:    ">
       7  ?<Constant "Select">
     146  Calibrate
       2  _A_PAOUT_L
       2  _A_PBIN_L

 
 146 bytes in segment CODE
   4 bytes in segment DATA16_AN
  77 bytes in segment DATA16_C
 
 146 bytes of CODE  memory
  77 bytes of CONST memory
   0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
