###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           17/Nov/2015  02:50:29
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\IOT_cmd.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\IOT_cmd.c" -lC
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\Debug\List\"
#        -o "\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\List\IOT_cmd.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\pj7zip\Debug\Obj\IOT_cmd.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\pj7zip\IOT_cmd.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file is used to implement the IOT functions
      4          //
      5          //
      6          //  Steffon Brigman
      7          //  Oct 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x5ce
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          

   \                                 In  segment CODE, align 2
     18          void SSID(void){
   \                     SSID:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801200     SUB.W   #0x12, SP
     19          //******************************************************************************
     20          //
     21          //  Description: This function is used to configure the IOT device on NCSU
     22          //  wireless network
     23          //
     24          //
     25          //  Steffon Brigman
     26          //  Sept 2015
     27          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     28          //
     29          // Globals: IOT_RX[SMALL_RING_SIZE], display_1, display_2, display_3,
     30          // display_4
     31          //
     32          // Passed: 
     33          //
     34          // Local: i, SSIDcmd
     35          //
     36          // Return: VOID
     37          //
     38          //****************************************************************************** 
     39            
     40            int i = INITIAL;
   \   000006   0A43         MOV.W   #0x0, R10
     41            
     42           //// SET SSID ////
     43            display_2 = " SET SSID ";
   \   000008   B240........ MOV.W   #`?<Constant " SET SSID ">`, &display_2
     44            Display_Process();
   \   00000E   ........     CALLA   #Display_Process
     45            Five_msec_Delay(BIG_DELAY);
   \   000012   3C403200     MOV.W   #0x32, R12
   \   000016   ........     CALLA   #Five_msec_Delay
     46            char SSIDcmd[Pos17] = "AT+S.SSIDTXT=ncsu";
   \   00001A   0C41         MOV.W   SP, R12
   \   00001C   3E40....     MOV.W   #`?<Constant "AT+S.SSIDTXT=ncsu">`, R14
   \   000020   3D401100     MOV.W   #0x11, R13
   \   000024   ........     CALLA   #?CopyMemoryBytes
     47            
     48            // Initialize IOT_RX ring
     49            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   000028   0A43         MOV.W   #0x0, R10
   \                     ??SSID_0:
   \   00002A   3A902800     CMP.W   #0x28, R10
   \   00002E   0434         JGE     ??SSID_3
   \   000030   CA43....     MOV.B   #0x0, IOT_RX(R10)
   \   000034   1A53         ADD.W   #0x1, R10
   \   000036   F93F         JMP     ??SSID_0
     50            
     51            IOTRead = INITIAL;
   \                     ??SSID_3:
   \   000038   8243....     MOV.W   #0x0, &IOTRead
     52            for(i=INITIAL; i < Pos17; i++) {
   \   00003C   0A43         MOV.W   #0x0, R10
   \                     ??SSID_1:
   \   00003E   3A901100     CMP.W   #0x11, R10
   \   000042   0C34         JGE     ??SSID_4
     53              UCA1TXBUF = UCA0TXBUF = SSIDcmd[i];
   \   000044   0F4A         MOV.W   R10, R15
   \   000046   0F51         ADD.W   SP, R15
   \   000048   6E4F         MOV.B   @R15, R14
   \   00004A   4E4E         MOV.B   R14, R14
   \   00004C   824ECE05     MOV.W   R14, &0x5ce
   \   000050   824EEE05     MOV.W   R14, &0x5ee
     54              One_msec_Delay();
   \   000054   ........     CALLA   #One_msec_Delay
     55            }
   \   000058   1A53         ADD.W   #0x1, R10
   \   00005A   F13F         JMP     ??SSID_1
     56            UCA1TXBUF = UCA0TXBUF = TX_FINISH;
   \                     ??SSID_4:
   \   00005C   3F400D00     MOV.W   #0xd, R15
   \   000060   824FCE05     MOV.W   R15, &0x5ce
   \   000064   824FEE05     MOV.W   R15, &0x5ee
     57            One_msec_Delay();
   \   000068   ........     CALLA   #One_msec_Delay
     58            
     59            // Wait for IOT confirmation
     60            while (IOT_RX[Pos2] != 'O');
   \                     ??SSID_2:
   \   00006C   F2904F00.... CMP.B   #0x4f, &IOT_RX + 2
   \   000072   FC23         JNE     ??SSID_2
     61          
     62          ////// GET SSID ////
     63          //  display_2 = " GET SSID ";
     64          //  Display_Process();
     65          //  Five_msec_Delay(BIG_DELAY);
     66          //  
     67          //  // Initialize IOT_RX ring
     68          //  for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
     69          //  
     70          //  IOTRead = INITIAL;
     71          //  for(i=INITIAL; i < Pos12; i++) {
     72          //    UCA1TXBUF = UCA0TXBUF = SSIDcmd[i];
     73          //    One_msec_Delay();
     74          //  }
     75          //  UCA1TXBUF = UCA0TXBUF = TX_FINISH;
     76          //  One_msec_Delay();
     77          //  
     78          //  Five_msec_Delay(BIGGER_DELAY);
     79          }
   \   000074   31501200     ADD.W   #0x12, SP
   \   000078   3A41         POP.W   R10
   \   00007A   1001         RETA
   \   00007C                REQUIRE _A_UCA1TXBUF_L
   \   00007C                REQUIRE _A_UCA0TXBUF_L
     80          

   \                                 In  segment CODE, align 2
     81          void HOST(void){
   \                     HOST:
   \   000000   0A12         PUSH.W  R10
   \   000002   31802200     SUB.W   #0x22, SP
     82          //******************************************************************************
     83          //
     84          //  Description: This function is used to configure the IOT device on NCSU
     85          //  wireless network
     86          //
     87          //
     88          //  Steffon Brigman
     89          //  Sept 2015
     90          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     91          //
     92          // Globals: IOT_RX[SMALL_RING_SIZE], display_1, display_2, display_3,
     93          // display_4
     94          //
     95          // Passed: 
     96          //
     97          // Local: i, HOSTcmd
     98          //
     99          // Return: VOID
    100          //
    101          //****************************************************************************** 
    102            
    103            int i = INITIAL;
   \   000006   0A43         MOV.W   #0x0, R10
    104            
    105          //// SET HOSTNAME ////
    106            display_2 = " SET HOST ";
   \   000008   B240........ MOV.W   #`?<Constant " SET HOST ">`, &display_2
    107            Display_Process();
   \   00000E   ........     CALLA   #Display_Process
    108            Five_msec_Delay(BIG_DELAY);
   \   000012   3C403200     MOV.W   #0x32, R12
   \   000016   ........     CALLA   #Five_msec_Delay
    109           char HOSTcmd[Pos34] = "AT+S.SCFG=ip_hostname,ECE-306_02_C";
   \   00001A   0C41         MOV.W   SP, R12
   \   00001C   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=ip_hostname...">`, R14
   \   000020   3D402200     MOV.W   #0x22, R13
   \   000024   ........     CALLA   #?CopyMemoryBytes
    110            
    111            // Initialize IOT_RX ring
    112            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   000028   0A43         MOV.W   #0x0, R10
   \                     ??HOST_0:
   \   00002A   3A902800     CMP.W   #0x28, R10
   \   00002E   0434         JGE     ??HOST_3
   \   000030   CA43....     MOV.B   #0x0, IOT_RX(R10)
   \   000034   1A53         ADD.W   #0x1, R10
   \   000036   F93F         JMP     ??HOST_0
    113            
    114            IOTRead = INITIAL;
   \                     ??HOST_3:
   \   000038   8243....     MOV.W   #0x0, &IOTRead
    115            for(i=INITIAL; i < Pos34; i++) {
   \   00003C   0A43         MOV.W   #0x0, R10
   \                     ??HOST_1:
   \   00003E   3A902200     CMP.W   #0x22, R10
   \   000042   0C34         JGE     ??HOST_4
    116              UCA1TXBUF = UCA0TXBUF = HOSTcmd[i];
   \   000044   0F4A         MOV.W   R10, R15
   \   000046   0F51         ADD.W   SP, R15
   \   000048   6E4F         MOV.B   @R15, R14
   \   00004A   4E4E         MOV.B   R14, R14
   \   00004C   824ECE05     MOV.W   R14, &0x5ce
   \   000050   824EEE05     MOV.W   R14, &0x5ee
    117              One_msec_Delay();
   \   000054   ........     CALLA   #One_msec_Delay
    118            }
   \   000058   1A53         ADD.W   #0x1, R10
   \   00005A   F13F         JMP     ??HOST_1
    119            UCA1TXBUF = UCA0TXBUF = TX_FINISH;
   \                     ??HOST_4:
   \   00005C   3F400D00     MOV.W   #0xd, R15
   \   000060   824FCE05     MOV.W   R15, &0x5ce
   \   000064   824FEE05     MOV.W   R15, &0x5ee
    120            One_msec_Delay();
   \   000068   ........     CALLA   #One_msec_Delay
    121            
    122            // Wait for IOT confirmation
    123            while (IOT_RX[Pos2] != 'O');
   \                     ??HOST_2:
   \   00006C   F2904F00.... CMP.B   #0x4f, &IOT_RX + 2
   \   000072   FC23         JNE     ??HOST_2
    124            
    125          ////// GET HOSTNAME ////
    126          //  display_2 = " GET HOST ";
    127          //  Display_Process();
    128          //  Five_msec_Delay(BIG_DELAY);
    129          //  
    130          // // Initialize IOT_RX ring
    131          //  for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
    132          //  
    133          //  IOTRead = INITIAL;
    134          //  for(i=INITIAL; i < Pos21; i++) {
    135          //    UCA1TXBUF = UCA0TXBUF = HOSTcmd[i];
    136          //    One_msec_Delay();
    137          //  }
    138          //  UCA1TXBUF = UCA0TXBUF = TX_FINISH;
    139          //  One_msec_Delay();
    140          //  
    141          //  Five_msec_Delay(BIGGER_DELAY);
    142          }
   \   000074   31502200     ADD.W   #0x22, SP
   \   000078   3A41         POP.W   R10
   \   00007A   1001         RETA
   \   00007C                REQUIRE _A_UCA1TXBUF_L
   \   00007C                REQUIRE _A_UCA0TXBUF_L
    143          

   \                                 In  segment CODE, align 2
    144          void NPM(void){
   \                     NPM:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801A00     SUB.W   #0x1a, SP
    145          //******************************************************************************
    146          //
    147          //  Description: This function is used to configure the IOT device on NCSU
    148          //  wireless network
    149          //
    150          //
    151          //  Steffon Brigman
    152          //  Sept 2015
    153          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    154          //
    155          // Globals: IOT_RX[SMALL_RING_SIZE], display_1, display_2, display_3,
    156          // display_4
    157          //
    158          // Passed: 
    159          //
    160          // Local: i, NPMcmd
    161          //
    162          // Return: VOID
    163          //
    164          //****************************************************************************** 
    165            
    166            int i = INITIAL;
   \   000006   0A43         MOV.W   #0x0, R10
    167            
    168          //// SET NETWORK PRIVACY MODE////
    169            display_2 = " SET NPM  ";
   \   000008   B240........ MOV.W   #`?<Constant " SET NPM  ">`, &display_2
    170            Display_Process();
   \   00000E   ........     CALLA   #Display_Process
    171            Five_msec_Delay(BIG_DELAY);
   \   000012   3C403200     MOV.W   #0x32, R12
   \   000016   ........     CALLA   #Five_msec_Delay
    172           char NPMcmd[Pos26] = "AT+S.SCFG=wifi_priv_mode,0";
   \   00001A   0C41         MOV.W   SP, R12
   \   00001C   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=wifi_priv_m...">`, R14
   \   000020   3D401A00     MOV.W   #0x1a, R13
   \   000024   ........     CALLA   #?CopyMemoryBytes
    173            
    174            // Initialize IOT_RX ring
    175            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   000028   0A43         MOV.W   #0x0, R10
   \                     ??NPM_0:
   \   00002A   3A902800     CMP.W   #0x28, R10
   \   00002E   0434         JGE     ??NPM_3
   \   000030   CA43....     MOV.B   #0x0, IOT_RX(R10)
   \   000034   1A53         ADD.W   #0x1, R10
   \   000036   F93F         JMP     ??NPM_0
    176            
    177            IOTRead = INITIAL;
   \                     ??NPM_3:
   \   000038   8243....     MOV.W   #0x0, &IOTRead
    178            for(i=INITIAL; i < Pos26; i++) {
   \   00003C   0A43         MOV.W   #0x0, R10
   \                     ??NPM_1:
   \   00003E   3A901A00     CMP.W   #0x1a, R10
   \   000042   0C34         JGE     ??NPM_4
    179              UCA1TXBUF = UCA0TXBUF = NPMcmd[i];
   \   000044   0F4A         MOV.W   R10, R15
   \   000046   0F51         ADD.W   SP, R15
   \   000048   6E4F         MOV.B   @R15, R14
   \   00004A   4E4E         MOV.B   R14, R14
   \   00004C   824ECE05     MOV.W   R14, &0x5ce
   \   000050   824EEE05     MOV.W   R14, &0x5ee
    180              One_msec_Delay();
   \   000054   ........     CALLA   #One_msec_Delay
    181            }
   \   000058   1A53         ADD.W   #0x1, R10
   \   00005A   F13F         JMP     ??NPM_1
    182            UCA1TXBUF = UCA0TXBUF = TX_FINISH;
   \                     ??NPM_4:
   \   00005C   3F400D00     MOV.W   #0xd, R15
   \   000060   824FCE05     MOV.W   R15, &0x5ce
   \   000064   824FEE05     MOV.W   R15, &0x5ee
    183            One_msec_Delay();
   \   000068   ........     CALLA   #One_msec_Delay
    184            
    185            // Wait for IOT confirmation
    186            while (IOT_RX[Pos2] != 'O');
   \                     ??NPM_2:
   \   00006C   F2904F00.... CMP.B   #0x4f, &IOT_RX + 2
   \   000072   FC23         JNE     ??NPM_2
    187            
    188          ////// GET NETWORK PRIVACY MODE ////
    189          //  display_2 = " GET NPM  ";
    190          //  Display_Process();
    191          //  Five_msec_Delay(BIG_DELAY);
    192          //  
    193          // // Initialize IOT_RX ring
    194          //  for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
    195          //  
    196          //  IOTRead = INITIAL;
    197          //  for(i=INITIAL; i < Pos24; i++) {
    198          //    UCA1TXBUF = UCA0TXBUF = NPMcmd[i];
    199          //    One_msec_Delay();
    200          //  }
    201          //  UCA1TXBUF = UCA0TXBUF = TX_FINISH;
    202          //  One_msec_Delay();
    203          //  
    204          //  Five_msec_Delay(BIGGER_DELAY);
    205          }
   \   000074   31501A00     ADD.W   #0x1a, SP
   \   000078   3A41         POP.W   R10
   \   00007A   1001         RETA
   \   00007C                REQUIRE _A_UCA1TXBUF_L
   \   00007C                REQUIRE _A_UCA0TXBUF_L
    206          

   \                                 In  segment CODE, align 2
    207          void NET_MODE(void){
   \                     NET_MODE:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801600     SUB.W   #0x16, SP
    208          //******************************************************************************
    209          //
    210          //  Description: This function is used to configure the IOT device on NCSU
    211          //  wireless network
    212          //
    213          //
    214          //  Steffon Brigman
    215          //  Sept 2015
    216          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    217          //
    218          // Globals: IOT_RX[SMALL_RING_SIZE], display_1, display_2, display_3,
    219          // display_4
    220          //
    221          // Passed: 
    222          //
    223          // Local: i, NPMcmd
    224          //
    225          // Return: VOID
    226          //
    227          //****************************************************************************** 
    228            
    229            int i = INITIAL;
   \   000006   0A43         MOV.W   #0x0, R10
    230            
    231          //// SET NETWORK MODE ////
    232            display_2 = " SET MODE ";
   \   000008   B240........ MOV.W   #`?<Constant " SET MODE ">`, &display_2
    233            Display_Process();
   \   00000E   ........     CALLA   #Display_Process
    234            Five_msec_Delay(BIG_DELAY);
   \   000012   3C403200     MOV.W   #0x32, R12
   \   000016   ........     CALLA   #Five_msec_Delay
    235           char NETcmd[Pos21] = "AT+S.SCFG=wifi_mode,1";
   \   00001A   0C41         MOV.W   SP, R12
   \   00001C   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=wifi_mode,1">`, R14
   \   000020   3D401500     MOV.W   #0x15, R13
   \   000024   ........     CALLA   #?CopyMemoryBytes
    236            
    237            // Initialize IOT_RX ring
    238            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   000028   0A43         MOV.W   #0x0, R10
   \                     ??NET_MODE_0:
   \   00002A   3A902800     CMP.W   #0x28, R10
   \   00002E   0434         JGE     ??NET_MODE_3
   \   000030   CA43....     MOV.B   #0x0, IOT_RX(R10)
   \   000034   1A53         ADD.W   #0x1, R10
   \   000036   F93F         JMP     ??NET_MODE_0
    239            
    240            IOTRead = INITIAL;
   \                     ??NET_MODE_3:
   \   000038   8243....     MOV.W   #0x0, &IOTRead
    241            for(i=INITIAL; i < Pos21; i++) {
   \   00003C   0A43         MOV.W   #0x0, R10
   \                     ??NET_MODE_1:
   \   00003E   3A901500     CMP.W   #0x15, R10
   \   000042   0C34         JGE     ??NET_MODE_4
    242              UCA1TXBUF = UCA0TXBUF = NETcmd[i];
   \   000044   0F4A         MOV.W   R10, R15
   \   000046   0F51         ADD.W   SP, R15
   \   000048   6E4F         MOV.B   @R15, R14
   \   00004A   4E4E         MOV.B   R14, R14
   \   00004C   824ECE05     MOV.W   R14, &0x5ce
   \   000050   824EEE05     MOV.W   R14, &0x5ee
    243              One_msec_Delay();
   \   000054   ........     CALLA   #One_msec_Delay
    244            }
   \   000058   1A53         ADD.W   #0x1, R10
   \   00005A   F13F         JMP     ??NET_MODE_1
    245            UCA1TXBUF = UCA0TXBUF = TX_FINISH;
   \                     ??NET_MODE_4:
   \   00005C   3F400D00     MOV.W   #0xd, R15
   \   000060   824FCE05     MOV.W   R15, &0x5ce
   \   000064   824FEE05     MOV.W   R15, &0x5ee
    246            One_msec_Delay();
   \   000068   ........     CALLA   #One_msec_Delay
    247            
    248            // Wait for IOT confirmation
    249            while (IOT_RX[Pos2] != 'O');
   \                     ??NET_MODE_2:
   \   00006C   F2904F00.... CMP.B   #0x4f, &IOT_RX + 2
   \   000072   FC23         JNE     ??NET_MODE_2
    250            
    251          ////// GET NETWORK MODE ////
    252          //  display_2 = " GET MODE ";
    253          //  Display_Process();
    254          //  Five_msec_Delay(BIG_DELAY);
    255          //  
    256          // // Initialize IOT_RX ring
    257          //  for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
    258          //  
    259          //  IOTRead = INITIAL;
    260          //  for(i=INITIAL; i < Pos19; i++) {
    261          //    UCA1TXBUF = UCA0TXBUF = NETcmd[i];
    262          //    One_msec_Delay();
    263          //  }
    264          //  UCA1TXBUF = UCA0TXBUF = TX_FINISH;
    265          //  One_msec_Delay();
    266          //  
    267          //  Five_msec_Delay(BIGGER_DELAY);
    268          }
   \   000074   31501600     ADD.W   #0x16, SP
   \   000078   3A41         POP.W   R10
   \   00007A   1001         RETA
   \   00007C                REQUIRE _A_UCA1TXBUF_L
   \   00007C                REQUIRE _A_UCA0TXBUF_L
    269          

   \                                 In  segment CODE, align 2
    270          void FLASH(void){
   \                     FLASH:
   \   000000   0A12         PUSH.W  R10
   \   000002   31800E00     SUB.W   #0xe, SP
    271          //******************************************************************************
    272          //
    273          //  Description: This function is used to configure the IOT device on NCSU
    274          //  wireless network
    275          //
    276          //
    277          //  Steffon Brigman
    278          //  Sept 2015
    279          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    280          //
    281          // Globals: IOT_RX[SMALL_RING_SIZE], display_1, display_2, display_3,
    282          // display_4
    283          //
    284          // Passed: 
    285          //
    286          // Local: i, NPMcmd
    287          //
    288          // Return: VOID
    289          //
    290          //****************************************************************************** 
    291            
    292            int i = INITIAL;
   \   000006   0A43         MOV.W   #0x0, R10
    293            
    294          //// Begin Flash ////
    295            display_2 = " SET MODE ";
   \   000008   B240........ MOV.W   #`?<Constant " SET MODE ">`, &display_2
    296            Display_Process();
   \   00000E   ........     CALLA   #Display_Process
    297            Five_msec_Delay(BIG_DELAY);
   \   000012   3C403200     MOV.W   #0x32, R12
   \   000016   ........     CALLA   #Five_msec_Delay
    298            char F1cmd[Pos4] = "AT&W";
   \   00001A   3F40....     MOV.W   #`?<Constant "AT&W">`, R15
   \   00001E   F14F0000     MOV.B   @R15+, 0(SP)
   \   000022   F14F0100     MOV.B   @R15+, 0x1(SP)
   \   000026   F14F0200     MOV.B   @R15+, 0x2(SP)
   \   00002A   F14F0300     MOV.B   @R15+, 0x3(SP)
    299            char F2cmd[Pos9] = "AT+CFUN=0";
   \   00002E   0C41         MOV.W   SP, R12
   \   000030   2C52         ADD.W   #0x4, R12
   \   000032   3E40....     MOV.W   #`?<Constant "AT+CFUN=0">`, R14
   \   000036   3D400900     MOV.W   #0x9, R13
   \   00003A   ........     CALLA   #?CopyMemoryBytes
    300            
    301            // Initialize IOT_RX ring
    302            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   00003E   0A43         MOV.W   #0x0, R10
   \                     ??FLASH_0:
   \   000040   3A902800     CMP.W   #0x28, R10
   \   000044   0434         JGE     ??FLASH_5
   \   000046   CA43....     MOV.B   #0x0, IOT_RX(R10)
   \   00004A   1A53         ADD.W   #0x1, R10
   \   00004C   F93F         JMP     ??FLASH_0
    303            
    304            IOTRead = INITIAL;
   \                     ??FLASH_5:
   \   00004E   8243....     MOV.W   #0x0, &IOTRead
    305            for(i=INITIAL; i < Pos4; i++) {
   \   000052   0A43         MOV.W   #0x0, R10
   \                     ??FLASH_1:
   \   000054   2A92         CMP.W   #0x4, R10
   \   000056   0C34         JGE     ??FLASH_6
    306              UCA1TXBUF = UCA0TXBUF = F1cmd[i];
   \   000058   0F4A         MOV.W   R10, R15
   \   00005A   0F51         ADD.W   SP, R15
   \   00005C   6E4F         MOV.B   @R15, R14
   \   00005E   4E4E         MOV.B   R14, R14
   \   000060   824ECE05     MOV.W   R14, &0x5ce
   \   000064   824EEE05     MOV.W   R14, &0x5ee
    307              One_msec_Delay();
   \   000068   ........     CALLA   #One_msec_Delay
    308            }
   \   00006C   1A53         ADD.W   #0x1, R10
   \   00006E   F23F         JMP     ??FLASH_1
    309            UCA1TXBUF = UCA0TXBUF = TX_FINISH;
   \                     ??FLASH_6:
   \   000070   3F400D00     MOV.W   #0xd, R15
   \   000074   824FCE05     MOV.W   R15, &0x5ce
   \   000078   824FEE05     MOV.W   R15, &0x5ee
    310            One_msec_Delay();
   \   00007C   ........     CALLA   #One_msec_Delay
    311            
    312            // Wait for IOT confirmation
    313            while (IOT_RX[Pos2] != 'O');
   \                     ??FLASH_2:
   \   000080   F2904F00.... CMP.B   #0x4f, &IOT_RX + 2
   \   000086   FC23         JNE     ??FLASH_2
    314            
    315          //// Finalize Flash ////
    316            display_2 = " GET MODE ";
   \   000088   B240........ MOV.W   #`?<Constant " GET MODE ">`, &display_2
    317            Display_Process();
   \   00008E   ........     CALLA   #Display_Process
    318            Five_msec_Delay(BIG_DELAY);
   \   000092   3C403200     MOV.W   #0x32, R12
   \   000096   ........     CALLA   #Five_msec_Delay
    319            
    320           // Initialize IOT_RX ring
    321            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   00009A   0A43         MOV.W   #0x0, R10
   \                     ??FLASH_3:
   \   00009C   3A902800     CMP.W   #0x28, R10
   \   0000A0   0434         JGE     ??FLASH_7
   \   0000A2   CA43....     MOV.B   #0x0, IOT_RX(R10)
   \   0000A6   1A53         ADD.W   #0x1, R10
   \   0000A8   F93F         JMP     ??FLASH_3
    322            
    323            IOTRead = INITIAL;
   \                     ??FLASH_7:
   \   0000AA   8243....     MOV.W   #0x0, &IOTRead
    324            for(i=INITIAL; i < Pos9; i++) {
   \   0000AE   0A43         MOV.W   #0x0, R10
   \                     ??FLASH_4:
   \   0000B0   3A900900     CMP.W   #0x9, R10
   \   0000B4   0D34         JGE     ??FLASH_8
    325              UCA1TXBUF = UCA0TXBUF = F2cmd[i];
   \   0000B6   0F4A         MOV.W   R10, R15
   \   0000B8   0F51         ADD.W   SP, R15
   \   0000BA   5E4F0400     MOV.B   0x4(R15), R14
   \   0000BE   4E4E         MOV.B   R14, R14
   \   0000C0   824ECE05     MOV.W   R14, &0x5ce
   \   0000C4   824EEE05     MOV.W   R14, &0x5ee
    326              One_msec_Delay();
   \   0000C8   ........     CALLA   #One_msec_Delay
    327            }
   \   0000CC   1A53         ADD.W   #0x1, R10
   \   0000CE   F03F         JMP     ??FLASH_4
    328            UCA1TXBUF = UCA0TXBUF = TX_FINISH;
   \                     ??FLASH_8:
   \   0000D0   3F400D00     MOV.W   #0xd, R15
   \   0000D4   824FCE05     MOV.W   R15, &0x5ce
   \   0000D8   824FEE05     MOV.W   R15, &0x5ee
    329            One_msec_Delay();
   \   0000DC   ........     CALLA   #One_msec_Delay
    330            
    331            Five_msec_Delay(BIGGER_DELAY);
   \   0000E0   3C404B00     MOV.W   #0x4b, R12
   \   0000E4   ........     CALLA   #Five_msec_Delay
    332          }
   \   0000E8   31500E00     ADD.W   #0xe, SP
   \   0000EC   3A41         POP.W   R10
   \   0000EE   1001         RETA
   \   0000F0                REQUIRE _A_UCA1TXBUF_L
   \   0000F0                REQUIRE _A_UCA0TXBUF_L
    333          

   \                                 In  segment CODE, align 2
    334          void PING(void){
   \                     PING:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801800     SUB.W   #0x18, SP
    335          //******************************************************************************
    336          //
    337          //  Description: This function is used to configure the IOT device on NCSU
    338          //  wireless network
    339          //
    340          //
    341          //  Steffon Brigman
    342          //  Sept 2015
    343          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    344          //
    345          // Globals: IOT_RX[SMALL_RING_SIZE], display_1, display_2, display_3,
    346          // display_4
    347          //
    348          // Passed: 
    349          //
    350          // Local: i, NPMcmd
    351          //
    352          // Return: VOID
    353          //
    354          //****************************************************************************** 
    355            
    356            int i = INITIAL;
   \   000006   0A43         MOV.W   #0x0, R10
    357            
    358            // Initialize IOT_RX ring
    359            char PINGcmd[Pos23] = "AT+S.PING=152.14.99.126";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.PING=152.14.99.126">`, R14
   \   00000E   3D401700     MOV.W   #0x17, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    360            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   000016   0A43         MOV.W   #0x0, R10
   \                     ??PING_0:
   \   000018   3A902800     CMP.W   #0x28, R10
   \   00001C   0434         JGE     ??PING_2
   \   00001E   CA43....     MOV.B   #0x0, IOT_RX(R10)
   \   000022   1A53         ADD.W   #0x1, R10
   \   000024   F93F         JMP     ??PING_0
    361            
    362            IOTRead = INITIAL;
   \                     ??PING_2:
   \   000026   8243....     MOV.W   #0x0, &IOTRead
    363            for(i=INITIAL; i < Pos23; i++) {
   \   00002A   0A43         MOV.W   #0x0, R10
   \                     ??PING_1:
   \   00002C   3A901700     CMP.W   #0x17, R10
   \   000030   0C34         JGE     ??PING_3
    364              UCA1TXBUF = UCA0TXBUF = PINGcmd[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6E4F         MOV.B   @R15, R14
   \   000038   4E4E         MOV.B   R14, R14
   \   00003A   824ECE05     MOV.W   R14, &0x5ce
   \   00003E   824EEE05     MOV.W   R14, &0x5ee
    365              One_msec_Delay();
   \   000042   ........     CALLA   #One_msec_Delay
    366            }
   \   000046   1A53         ADD.W   #0x1, R10
   \   000048   F13F         JMP     ??PING_1
    367            UCA1TXBUF = UCA0TXBUF = TX_FINISH;
   \                     ??PING_3:
   \   00004A   3F400D00     MOV.W   #0xd, R15
   \   00004E   824FCE05     MOV.W   R15, &0x5ce
   \   000052   824FEE05     MOV.W   R15, &0x5ee
    368            One_msec_Delay(); 
   \   000056   ........     CALLA   #One_msec_Delay
    369          }
   \   00005A   31501800     ADD.W   #0x18, SP
   \   00005E   3A41         POP.W   R10
   \   000060   1001         RETA
   \   000062                REQUIRE _A_UCA1TXBUF_L
   \   000062                REQUIRE _A_UCA0TXBUF_L
    370          

   \                                 In  segment CODE, align 2
    371          void ROAM(void){
   \                     ROAM:
   \   000000   0A12         PUSH.W  R10
   \   000002   31800A00     SUB.W   #0xa, SP
    372          //******************************************************************************
    373          //
    374          //  Description: This function is used to configure the IOT device on NCSU
    375          //  wireless network
    376          //
    377          //
    378          //  Steffon Brigman
    379          //  Sept 2015
    380          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    381          //
    382          // Globals: IOT_RX[SMALL_RING_SIZE], display_1, display_2, display_3,
    383          // display_4
    384          //
    385          // Passed: 
    386          //
    387          // Local: i, NPMcmd
    388          //
    389          // Return: VOID
    390          //
    391          //****************************************************************************** 
    392            
    393            int i = INITIAL;
   \   000006   0A43         MOV.W   #0x0, R10
    394            
    395            // Initialize IOT_RX ring
    396            char ROAMcmd[Pos9] = "AT+S.ROAM";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+S.ROAM">`, R14
   \   00000E   3D400900     MOV.W   #0x9, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    397            for(i=INITIAL; i < SMALL_RING_SIZE; i++) IOT_RX[i] = INITIAL;
   \   000016   0A43         MOV.W   #0x0, R10
   \                     ??ROAM_0:
   \   000018   3A902800     CMP.W   #0x28, R10
   \   00001C   0434         JGE     ??ROAM_2
   \   00001E   CA43....     MOV.B   #0x0, IOT_RX(R10)
   \   000022   1A53         ADD.W   #0x1, R10
   \   000024   F93F         JMP     ??ROAM_0
    398            
    399            IOTRead = INITIAL;
   \                     ??ROAM_2:
   \   000026   8243....     MOV.W   #0x0, &IOTRead
    400            for(i=INITIAL; i < Pos9; i++) {
   \   00002A   0A43         MOV.W   #0x0, R10
   \                     ??ROAM_1:
   \   00002C   3A900900     CMP.W   #0x9, R10
   \   000030   0C34         JGE     ??ROAM_3
    401              UCA1TXBUF = UCA0TXBUF = ROAMcmd[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6E4F         MOV.B   @R15, R14
   \   000038   4E4E         MOV.B   R14, R14
   \   00003A   824ECE05     MOV.W   R14, &0x5ce
   \   00003E   824EEE05     MOV.W   R14, &0x5ee
    402              One_msec_Delay();
   \   000042   ........     CALLA   #One_msec_Delay
    403            }
   \   000046   1A53         ADD.W   #0x1, R10
   \   000048   F13F         JMP     ??ROAM_1
    404            UCA1TXBUF = UCA0TXBUF = TX_FINISH;
   \                     ??ROAM_3:
   \   00004A   3F400D00     MOV.W   #0xd, R15
   \   00004E   824FCE05     MOV.W   R15, &0x5ce
   \   000052   824FEE05     MOV.W   R15, &0x5ee
    405            One_msec_Delay();
   \   000056   ........     CALLA   #One_msec_Delay
    406            
    407            Five_msec_Delay(BIGGER_DELAY);
   \   00005A   3C404B00     MOV.W   #0x4b, R12
   \   00005E   ........     CALLA   #Five_msec_Delay
    408          }
   \   000062   31500A00     ADD.W   #0xa, SP
   \   000066   3A41         POP.W   R10
   \   000068   1001         RETA
   \   00006A                REQUIRE _A_UCA1TXBUF_L
   \   00006A                REQUIRE _A_UCA0TXBUF_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " SET SSID ">`:
   \   000000   205345542053 DC8 " SET SSID "
   \            5349442000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SSIDTXT=ncsu">`:
   \   000000   41542B532E53 DC8 41H, 54H, 2BH, 53H, 2EH, 53H, 53H, 49H
   \            5349        
   \   000008   445458543D6E DC8 44H, 54H, 58H, 54H, 3DH, 6EH, 63H, 73H
   \            6373        
   \   000010   75           DC8 75H

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " SET HOST ">`:
   \   000000   205345542048 DC8 " SET HOST "
   \            4F53542000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=ip_hostname...">`:
   \   000000   41542B532E53 DC8 41H, 54H, 2BH, 53H, 2EH, 53H, 43H, 46H
   \            4346        
   \   000008   473D69705F68 DC8 47H, 3DH, 69H, 70H, 5FH, 68H, 6FH, 73H
   \            6F73        
   \   000010   746E616D652C DC8 74H, 6EH, 61H, 6DH, 65H, 2CH, 45H, 43H
   \            4543        
   \   000018   452D3330365F DC8 45H, 2DH, 33H, 30H, 36H, 5FH, 30H, 32H
   \            3032        
   \   000020   5F43         DC8 5FH, 43H

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " SET NPM  ">`:
   \   000000   20534554204E DC8 " SET NPM  "
   \            504D202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=wifi_priv_m...">`:
   \   000000   41542B532E53 DC8 41H, 54H, 2BH, 53H, 2EH, 53H, 43H, 46H
   \            4346        
   \   000008   473D77696669 DC8 47H, 3DH, 77H, 69H, 66H, 69H, 5FH, 70H
   \            5F70        
   \   000010   7269765F6D6F DC8 72H, 69H, 76H, 5FH, 6DH, 6FH, 64H, 65H
   \            6465        
   \   000018   2C30         DC8 2CH, 30H

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " SET MODE ">`:
   \   000000   20534554204D DC8 " SET MODE "
   \            4F44452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=wifi_mode,1">`:
   \   000000   41542B532E53 DC8 41H, 54H, 2BH, 53H, 2EH, 53H, 43H, 46H
   \            4346        
   \   000008   473D77696669 DC8 47H, 3DH, 77H, 69H, 66H, 69H, 5FH, 6DH
   \            5F6D        
   \   000010   6F64652C31   DC8 6FH, 64H, 65H, 2CH, 31H

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT&W">`:
   \   000000   41542657     DC8 41H, 54H, 26H, 57H

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CFUN=0">`:
   \   000000   41542B434655 DC8 41H, 54H, 2BH, 43H, 46H, 55H, 4EH, 3DH
   \            4E3D        
   \   000008   30           DC8 30H

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " GET MODE ">`:
   \   000000   20474554204D DC8 " GET MODE "
   \            4F44452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.PING=152.14.99.126">`:
   \   000000   41542B532E50 DC8 41H, 54H, 2BH, 53H, 2EH, 50H, 49H, 4EH
   \            494E        
   \   000008   473D3135322E DC8 47H, 3DH, 31H, 35H, 32H, 2EH, 31H, 34H
   \            3134        
   \   000010   2E39392E3132 DC8 2EH, 39H, 39H, 2EH, 31H, 32H, 36H
   \            36          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.ROAM">`:
   \   000000   41542B532E52 DC8 41H, 54H, 2BH, 53H, 2EH, 52H, 4FH, 41H
   \            4F41        
   \   000008   4D           DC8 4DH

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     20   FLASH
       20   -> Display_Process
       20   -> Five_msec_Delay
       20   -> One_msec_Delay
       20 ?CopyMemoryBytes
     40   HOST
       40   -> Display_Process
       40   -> Five_msec_Delay
       40   -> One_msec_Delay
       40 ?CopyMemoryBytes
     28   NET_MODE
       28   -> Display_Process
       28   -> Five_msec_Delay
       28   -> One_msec_Delay
       28 ?CopyMemoryBytes
     32   NPM
       32   -> Display_Process
       32   -> Five_msec_Delay
       32   -> One_msec_Delay
       32 ?CopyMemoryBytes
     30   PING
       30   -> One_msec_Delay
       30 ?CopyMemoryBytes
     16   ROAM
       16   -> Five_msec_Delay
       16   -> One_msec_Delay
       16 ?CopyMemoryBytes
     24   SSID
       24   -> Display_Process
       24   -> Five_msec_Delay
       24   -> One_msec_Delay
       24 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant " GET MODE ">
      11  ?<Constant " SET HOST ">
      11  ?<Constant " SET MODE ">
      11  ?<Constant " SET NPM  ">
      11  ?<Constant " SET SSID ">
       4  ?<Constant "AT&W">
       9  ?<Constant "AT+CFUN=0">
      23  ?<Constant "AT+S.PING=152.14.99.126">
       9  ?<Constant "AT+S.ROAM">
      34  ?<Constant "AT+S.SCFG=ip_hostname...">
      21  ?<Constant "AT+S.SCFG=wifi_mode,1">
      26  ?<Constant "AT+S.SCFG=wifi_priv_m...">
      17  ?<Constant "AT+S.SSIDTXT=ncsu">
     240  FLASH
     124  HOST
     124  NET_MODE
     124  NPM
      98  PING
     106  ROAM
     124  SSID
       2  _A_UCA0TXBUF_L
       2  _A_UCA1TXBUF_L

 
 940 bytes in segment CODE
   4 bytes in segment DATA16_AN
 198 bytes in segment DATA16_C
 
 940 bytes of CODE  memory
 198 bytes of CONST memory
   0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
