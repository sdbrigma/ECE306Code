###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           11/Nov/2015  23:03:37
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_07\testIOT.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_07\testIOT.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_07\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_07\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\Programs\IAR
#        Embedded Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_07\Debug\List\testIOT.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_07\Debug\Obj\testIOT.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_07\testIOT.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file is used to implement the test code for serial
      4          //  communications.
      5          //
      6          //
      7          //  Christopher Woedy
      8          //  Oct 2015
      9          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     10          //******************************************************************************
     11          
     12          //------------------------------------------------------------------------------
     13          
     14          //Points to Header files for Preprocessing
     15          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ce
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2
     16          #include  "functions.h"
     17          #include  "macros.h"
     18          

   \                                 In  segment CODE, align 2
     19          void Back_Door(void){
   \                     Back_Door:
     20          //******************************************************************************
     21          //
     22          //  Description: This file is used to implement the test code for serial
     23          //  communications.
     24          //
     25          //
     26          //  Christopher Woedy
     27          //  Sept 2015
     28          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     29          //
     30          // Globals: RX_Char
     31          //
     32          // Passed: 
     33          //
     34          // Local: packet1, packet2, RX_Char[LINE_POS_L0], RX_Char[LINE_POS_L1],
     35          // tmpPacket, count
     36          //
     37          // Return: VOID
     38          //
     39          //****************************************************************************** 
     40                // Configure UART with 9600 Baud
     41                Init_Serial_UCA1(TRUE);
   \   000000   5C43         MOV.B   #0x1, R12
   \   000002   ........     CALLA   #Init_Serial_UCA1
     42                
     43                // Begin sending/receiving packets
     44                while (ALWAYS) {
     45                  
     46                  display_3[SW_SEL_0] = RX_Char[SW_SEL_9];
   \                     ??Back_Door_0:
   \   000006   1F42....     MOV.W   &display_3, R15
   \   00000A   DF42....0000 MOV.B   &RX_Char + 9, 0(R15)
     47                  display_3[SW_SEL_1] = RX_Char[SW_SEL_8];
   \   000010   1F42....     MOV.W   &display_3, R15
   \   000014   DF42....0100 MOV.B   &RX_Char + 8, 0x1(R15)
     48                  display_3[SW_SEL_2] = RX_Char[SW_SEL_7];
   \   00001A   1F42....     MOV.W   &display_3, R15
   \   00001E   DF42....0200 MOV.B   &RX_Char + 7, 0x2(R15)
     49                  display_3[SW_SEL_3] = RX_Char[SW_SEL_6];
   \   000024   1F42....     MOV.W   &display_3, R15
   \   000028   DF42....0300 MOV.B   &RX_Char + 6, 0x3(R15)
     50                  display_3[SW_SEL_4] = RX_Char[SW_SEL_5];
   \   00002E   1F42....     MOV.W   &display_3, R15
   \   000032   DF42....0400 MOV.B   &RX_Char + 5, 0x4(R15)
     51                  display_3[SW_SEL_5] = RX_Char[SW_SEL_4];
   \   000038   1F42....     MOV.W   &display_3, R15
   \   00003C   DF42....0500 MOV.B   &RX_Char + 4, 0x5(R15)
     52                  display_3[SW_SEL_6] = RX_Char[SW_SEL_3];
   \   000042   1F42....     MOV.W   &display_3, R15
   \   000046   DF42....0600 MOV.B   &RX_Char + 3, 0x6(R15)
     53                  display_3[SW_SEL_7] = RX_Char[SW_SEL_2];
   \   00004C   1F42....     MOV.W   &display_3, R15
   \   000050   DF42....0700 MOV.B   &RX_Char + 2, 0x7(R15)
     54                  display_3[SW_SEL_8] = RX_Char[SW_SEL_1];
   \   000056   1F42....     MOV.W   &display_3, R15
   \   00005A   DF42....0800 MOV.B   &RX_Char + 1, 0x8(R15)
     55                  display_3[SW_SEL_9] = RX_Char[SW_SEL_0];
   \   000060   1F42....     MOV.W   &display_3, R15
   \   000064   DF42....0900 MOV.B   &RX_Char, 0x9(R15)
     56                  
     57                  UCA0TXBUF = 1337;
   \   00006A   B2403905CE05 MOV.W   #0x539, &0x5ce
     58                  Five_msec_Delay(SW_SEL_1);
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Five_msec_Delay
     59                    	  
     60               // Reinitialize counter
     61               if (!(P4IN & SW1)){
   \   000076   D2B32102     BIT.B   #0x1, &0x221
   \   00007A   052C         JC      ??Back_Door_1
     62                  Five_msec_Delay(LIL_SW_DELAY);
   \   00007C   3C401F00     MOV.W   #0x1f, R12
   \   000080   ........     CALLA   #Five_msec_Delay
     63                  break;
   \   000084   0F3C         JMP     ??Back_Door_2
     64                }	  
     65               
     66               // Break out of communcation loop
     67               if (!(P4IN & SW2)){
   \                     ??Back_Door_1:
   \   000086   E2B32102     BIT.B   #0x2, &0x221
   \   00008A   052C         JC      ??Back_Door_3
     68                  Five_msec_Delay(LIL_SW_DELAY);
   \   00008C   3C401F00     MOV.W   #0x1f, R12
   \   000090   ........     CALLA   #Five_msec_Delay
     69                  break;
   \   000094   073C         JMP     ??Back_Door_2
     70                }
     71               
     72               // Update the display
     73               Display_Process();
   \                     ??Back_Door_3:
   \   000096   ........     CALLA   #Display_Process
     74               // Wait before repeating
     75               Five_msec_Delay(100);
   \   00009A   3C406400     MOV.W   #0x64, R12
   \   00009E   ........     CALLA   #Five_msec_Delay
   \   0000A2   B13F         JMP     ??Back_Door_0
     76           }
     77                          
     78                display_1 = "P. Six";
   \                     ??Back_Door_2:
   \   0000A4   B240........ MOV.W   #`?<Constant "P. Six">`, &display_1
     79                posL1 = LINE_POS_L2;
   \   0000AA   E243....     MOV.B   #0x2, &posL1
     80                display_2 = "Complete!";
   \   0000AE   B240........ MOV.W   #`?<Constant "Complete!">`, &display_2
     81                posL2 = LINE_POS_L1;
   \   0000B4   D243....     MOV.B   #0x1, &posL2
     82                display_3 = "          ";
   \   0000B8   B240........ MOV.W   #`?<Constant "          ">`, &display_3
     83                posL3 = LINE_POS_L0;
   \   0000BE   C243....     MOV.B   #0x0, &posL3
     84                display_4 =  "          ";
   \   0000C2   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     85                posL4 = LINE_POS_L0;
   \   0000C8   C243....     MOV.B   #0x0, &posL4
     86                Display_Process();
   \   0000CC   ........     BRA     #Display_Process
   \   0000D0                REQUIRE _A_UCA0TXBUF_L
   \   0000D0                REQUIRE _A_PBIN_L
     87                
     88          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "P. Six">`:
   \   000000   502E20536978 DC8 "P. Six"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Complete!">`:
   \   000000   436F6D706C65 DC8 "Complete!"
   \            74652100    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Back_Door
        0   -> Display_Process
        4   -> Display_Process
        4   -> Five_msec_Delay
        4   -> Init_Serial_UCA1


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      10  ?<Constant "Complete!">
       7  ?<Constant "P. Six">
     208  Back_Door
       2  _A_PBIN_L
       2  _A_UCA0TXBUF_L

 
 208 bytes in segment CODE
   4 bytes in segment DATA16_AN
  28 bytes in segment DATA16_C
 
 208 bytes of CODE  memory
  28 bytes of CONST memory
   0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
