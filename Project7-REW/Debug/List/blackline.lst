###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           06/Nov/2015  15:37:21
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Rachel\Documents\ECE306\HW\HW9\blackline.c
#    Command line  =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\blackline.c -lC
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\List\ -o
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2_2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\List\blackline.lst
#    Object file   =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\Obj\blackline.r43
#
###############################################################################

C:\Users\Rachel\Documents\ECE306\HW\HW9\blackline.c
      1          //***********************************************************************
      2          //      Title: blackline.c 
      3          //      Description: This file handles black line detection and detector
      4          //                   sensor calibration
      5          //      Rachel Williams
      6          //      October 2015
      7          //      Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      8          //***********************************************************************
      9          
     10          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     11          #include  "functions.h"
     12          #include "macros.h"
     13          
     14          //***********************************************************************
     15          //      Function name: Calibration
     16          //      Description: Calibrates the system for detection 
     17          //      Global variables: calib_amtR, calib_amtL
     18          //      Local variables: NONE
     19          //      Return: VOID
     20          //***********************************************************************

   \                                 In  segment CODE, align 2
     21          void Calibration(void){
   \                     Calibration:
   \   000000   0A12         PUSH.W  R10
     22            display_1 = "";
   \   000002   B240........ MOV.W   #`?<Constant "">`, &display_1
     23            display_2 = ".....";
   \   000008   B240........ MOV.W   #`?<Constant ".....">`, &display_2
     24            posL2 = POSIT_4;
   \   00000E   E242....     MOV.B   #0x4, &posL2
     25            display_3 = ".....";
   \   000012   B240........ MOV.W   #`?<Constant ".....">`, &display_3
     26            posL3 = POSIT_0;
   \   000018   C243....     MOV.B   #0x0, &posL3
     27            display_4 =  "";
   \   00001C   B240........ MOV.W   #`?<Constant "">`, &display_4
     28            Display_Process();
   \   000022   ........     CALLA   #Display_Process
     29            
     30            for(int i=POSIT_5; i>=ORIGINAL; i--){
   \   000026   3A400500     MOV.W   #0x5, R10
   \                     ??Calibration_0:
   \   00002A   0A93         CMP.W   #0x0, R10
   \   00002C   0A38         JL      ??Calibration_1
     31              ADC_Process(); 
   \   00002E   ........     CALLA   #ADC_Process
     32              calib_amtR = ADC_Right_Detector;
   \   000032   9242........ MOV.W   &ADC_Right_Detector, &calib_amtR
     33              calib_amtL = ADC_Left_Detector;
   \   000038   9242........ MOV.W   &ADC_Left_Detector, &calib_amtL
     34            }
   \   00003E   3A53         ADD.W   #0xffff, R10
   \   000040   F43F         JMP     ??Calibration_0
     35             
     36            display_1 = "";
   \                     ??Calibration_1:
   \   000042   B240........ MOV.W   #`?<Constant "">`, &display_1
     37            display_2 = "Calibrated";
   \   000048   B240........ MOV.W   #`?<Constant "Calibrated">`, &display_2
     38            posL2 = POSIT_0;
   \   00004E   C243....     MOV.B   #0x0, &posL2
     39            display_3 = "";
   \   000052   B240........ MOV.W   #`?<Constant "">`, &display_3
     40            posL3 = POSIT_0;
   \   000058   C243....     MOV.B   #0x0, &posL3
     41            display_4 =  "";
   \   00005C   B240........ MOV.W   #`?<Constant "">`, &display_4
     42            Display_Process();
   \   000062   ........     CALLA   #Display_Process
     43          }
   \   000066   3A41         POP.W   R10
   \   000068   1001         RETA
     44          
     45          //***********************************************************************
     46          //      Function name: Detection
     47          //      Description: Line detection and conversion  
     48          //      Global variables: enabled_RD, enabled_LD,
     49          //      Local variables: NONE
     50          //      Return: VOID
     51          //***********************************************************************

   \                                 In  segment CODE, align 2
     52          void Detection(void){
   \                     Detection:
     53            /*
     54            Prior to detection, both detectors and the thumb wheel are disabled as a way
     55            to initialize the detectors before obtaining data. 
     56            */
     57            enabled_RD = ORIGINAL; 
   \   000000   C243....     MOV.B   #0x0, &enabled_RD
     58            enabled_LD = ORIGINAL;  
   \   000004   C243....     MOV.B   #0x0, &enabled_LD
     59            
     60            while(ALWAYS){
     61             if (!(P4IN & SW1)) break;     
   \                     ??Detection_0:
   \   000008   D2B32102     BIT.B   #0x1, &0x221
   \   00000C   1728         JNC     ??Detection_2
     62              // Enabling the right detector first, keeping left detector disabled  
     63              enabled_RD = ALWAYS; 
     64              enabled_LD = ORIGINAL; 
     65              ADC_Process(); 
     66              ADC_Convert(); 
     67              Five_Msec_Delay(CYCLE);
     68              
     69              // Enabling the left detector, disabling the right detector
     70              enabled_RD = ORIGINAL; 
     71              enabled_LD = ALWAYS; 
     72              ADC_Process();
     73              ADC_Convert();
     74              Five_Msec_Delay(CYCLE);
     75            }
     76          }
   \   00000E   D243....     MOV.B   #0x1, &enabled_RD
   \   000012   C243....     MOV.B   #0x0, &enabled_LD
   \   000016   ........     CALLA   #ADC_Process
   \   00001A   ........     CALLA   #ADC_Convert
   \   00001E   2C43         MOV.W   #0x2, R12
   \   000020   ........     CALLA   #Five_Msec_Delay
   \   000024   C243....     MOV.B   #0x0, &enabled_RD
   \   000028   D243....     MOV.B   #0x1, &enabled_LD
   \   00002C   ........     CALLA   #ADC_Process
   \   000030   ........     CALLA   #ADC_Convert
   \   000034   2C43         MOV.W   #0x2, R12
   \   000036   ........     CALLA   #Five_Msec_Delay
   \   00003A   E63F         JMP     ??Detection_0
   \                     ??Detection_2:
   \   00003C   1001         RETA
   \   00003E                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant ".....">`:
   \   000000   2E2E2E2E2E00 DC8 "....."

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Calibrated">`:
   \   000000   43616C696272 DC8 "Calibrated"
   \            6174656400  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Calibration
        6   -> ADC_Process
        6   -> Display_Process
      4   Detection
        4   -> ADC_Convert
        4   -> ADC_Process
        4   -> Five_Msec_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       6  ?<Constant ".....">
      11  ?<Constant "Calibrated">
     106  Calibration
      62  Detection
       2  _A_PBIN_L

 
 168 bytes in segment CODE
   2 bytes in segment DATA16_AN
  18 bytes in segment DATA16_C
 
 168 bytes of CODE  memory
  18 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
