###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           06/Nov/2015  13:20:07
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Rachel\Documents\ECE306\HW\HW9\init_coms.c
#    Command line  =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\init_coms.c -lC
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\List\ -o
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2_2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\List\init_coms.lst
#    Object file   =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\Obj\init_coms.r43
#
###############################################################################

C:\Users\Rachel\Documents\ECE306\HW\HW9\init_coms.c
      1          //*****************************************************************************
      2          //      Title: init_coms 
      3          //      Description: Initialization code for communication 
      4          //      Rachel Williams
      5          //      October 2015
      6          //      Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      7          //*****************************************************************************
      8          
      9          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x204
   \   union <unnamed> _A_PADIR_L
   \                     _A_PADIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20a
   \   union <unnamed> _A_PASEL0_L
   \                     _A_PASEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20c
   \   union <unnamed> _A_PASEL1_L
   \                     _A_PASEL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e0
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e6
   \   union <unnamed> _A_UCA1BRW_L
   \                     _A_UCA1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e8
   \   union <unnamed> _A_UCA1MCTLW_L
   \                     _A_UCA1MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     10          #include  "functions.h"
     11          #include  "macros.h"
     12          
     13          //*****************************************************************************
     14          //      Function name: Init_Serial_UCA1
     15          //      Description: Initializing serial port for CPU communication 
     16          //      Global variables: CPU_Char_Rx, CPU_Char_Tx, cpu_rx_ring_wr,
     17          //                        cpu_rx_ring_rd, cpu_tx_ring_wr, cpu_tx_ring_rd
     18          //      Local variables: i 
     19          //      Return: VOID
     20          //*****************************************************************************

   \                                 In  segment CODE, align 2
     21          void Init_Serial_UCA1(void){
   \                     Init_Serial_UCA1:
     22            int i;
     23            for(i=ORIGINAL; i<SMALL_RING_SIZE; i++){
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_0:
   \   000002   3F901000     CMP.W   #0x10, R15
   \   000006   0434         JGE     ??Init_Serial_UCA1_2
     24              CPU_Char_Rx[i] = CLEAR_REGISTER;      // CPU Rx Buffer
   \   000008   CF43....     MOV.B   #0x0, CPU_Char_Rx(R15)
     25            }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??Init_Serial_UCA1_0
     26            cpu_rx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA1_2:
   \   000010   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
     27            cpu_rx_ring_rd = BEGINNING;
   \   000014   8243....     MOV.W   #0x0, &cpu_rx_ring_rd
     28            
     29            for(i=ORIGINAL; i<SMALL_RING_SIZE; i++){ 
   \   000018   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_1:
   \   00001A   3F901000     CMP.W   #0x10, R15
   \   00001E   0434         JGE     ??Init_Serial_UCA1_3
     30              CPU_Char_Tx[i] = CLEAR_REGISTER;      // CPU Tx Buffer
   \   000020   CF43....     MOV.B   #0x0, CPU_Char_Tx(R15)
     31            }
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   F93F         JMP     ??Init_Serial_UCA1_1
     32            cpu_tx_ring_wr = BEGINNING;
   \                     ??Init_Serial_UCA1_3:
   \   000028   8243....     MOV.W   #0x0, &cpu_tx_ring_wr
     33            cpu_tx_ring_rd = BEGINNING;
   \   00002C   8243....     MOV.W   #0x0, &cpu_tx_ring_rd
     34            
     35            // Configure UART 1
     36            UCA1CTLW0 = ORIGINAL;         // Use word register
   \   000030   8243E005     MOV.W   #0x0, &0x5e0
     37            UCA1CTLW0 |= UCSSEL__SMCLK;   // Set SMCLK as fBRCLK
   \   000034   B2D08000E005 BIS.W   #0x80, &0x5e0
     38            UCA1CTLW0 |= UCSWRST;         // Set Software reset enable     
   \   00003A   92D3E005     BIS.W   #0x1, &0x5e0
     39            
     40          //  UCA1CTLW0 |= UCPEN;
     41          //  UCA1CTLW0 &= ~UCPAR;
     42          //  UCA1CTLW0 &= ~UCMSB;
     43          //  UCA1CTLW0 &= ~UC7BIT;
     44          //  UCA1CTLW0 |= UCSPB;
     45          //  UCA1CTLW0 &= ~UCMODE0;
     46          //  UCA1CTLW0 &= ~UCMODE1;
     47          //  UCA1CTLW0 &= ~UCSYNC;
     48          //  UCA1CTLW0 |= UCSSEL0;
     49          //  UCA1CTLW0 |= UCSSEL1;
     50          //  UCA1CTLW0 &= ~UCRXEIE;
     51          //  UCA1CTLW0 &= ~UCBRKIE;
     52          //  UCA1CTLW0 &= ~UCDORM;
     53          //  UCA1CTLW0 &= ~UCTXADDR;
     54          //  UCA1CTLW0 &= ~UCTXBRK;
     55          //  
     56          //  UCA1CTLW1 &= ~UCGLIT0;
     57          //  UCA1CTLW1 &= ~UCGLIT1;
     58            
     59            UCA1BRW = B_RATE_9600;          // setting baud rate 
   \   00003E   B2403400E605 MOV.W   #0x34, &0x5e6
     60            UCA1MCTLW = UCA1MCTLW_DFLT;
   \   000044   B2401149E805 MOV.W   #0x4911, &0x5e8
     61            
     62            // Re-configuring ports 
     63            P2SEL1 |= CPU_TXD;
   \   00004A   F2D020000D02 BIS.B   #0x20, &0x20d
     64            P2SEL0 &= ~CPU_TXD;
   \   000050   F2C020000B02 BIC.B   #0x20, &0x20b
     65            P2OUT  |= CPU_TXD;
   \   000056   F2D020000302 BIS.B   #0x20, &0x203
     66            P2DIR  |= CPU_TXD;
   \   00005C   F2D020000502 BIS.B   #0x20, &0x205
     67            
     68            P2SEL1 |= CPU_RXD;
   \   000062   F2D040000D02 BIS.B   #0x40, &0x20d
     69            P2SEL0 &= ~CPU_RXD;
   \   000068   F2C040000B02 BIC.B   #0x40, &0x20b
     70            P2OUT &= ~CPU_RXD;
   \   00006E   F2C040000302 BIC.B   #0x40, &0x203
     71            P2DIR &= ~CPU_RXD;
   \   000074   F2C040000502 BIC.B   #0x40, &0x205
     72            
     73            // Reset release and interrupt enabling 
     74            UCA1CTL1 &= ~UCSWRST;         // Release from reset
   \   00007A   D2C3E005     BIC.B   #0x1, &0x5e0
     75            UCA1IE |= UCRXIE;             // Enable RX interrupt
   \   00007E   92D3FA05     BIS.W   #0x1, &0x5fa
     76            UCA1IE |= UCTXIE;             // Enable TX interrupt 
   \   000082   A2D3FA05     BIS.W   #0x2, &0x5fa
     77          }
   \   000086   1001         RETA
   \   000088                REQUIRE _A_UCA1CTLW0_L
   \   000088                REQUIRE _A_UCA1BRW_L
   \   000088                REQUIRE _A_UCA1MCTLW_L
   \   000088                REQUIRE _A_PASEL1_L
   \   000088                REQUIRE _A_PASEL0_L
   \   000088                REQUIRE _A_PAOUT_L
   \   000088                REQUIRE _A_PADIR_L
   \   000088                REQUIRE _A_UCA1IE_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Serial_UCA1


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     136  Init_Serial_UCA1
       2  _A_PADIR_L
       2  _A_PAOUT_L
       2  _A_PASEL0_L
       2  _A_PASEL1_L
       2  _A_UCA1BRW_L
       2  _A_UCA1CTLW0_L
       2  _A_UCA1IE_L
       2  _A_UCA1MCTLW_L

 
 136 bytes in segment CODE
  16 bytes in segment DATA16_AN
 
 136 bytes of CODE memory
   0 bytes of DATA memory (+ 16 bytes shared)

Errors: none
Warnings: none
