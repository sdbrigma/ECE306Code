###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           16/Nov/2015  02:41:04
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Rachel\Documents\ECE306\Projects\Project7\switch.c
#    Command line  =  
#        C:\Users\Rachel\Documents\ECE306\Projects\Project7\switch.c -lC
#        C:\Users\Rachel\Documents\ECE306\Projects\Project7\Debug\List\ -o
#        C:\Users\Rachel\Documents\ECE306\Projects\Project7\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2_2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Rachel\Documents\ECE306\Projects\Project7\Debug\List\switch.lst
#    Object file   =  
#        C:\Users\Rachel\Documents\ECE306\Projects\Project7\Debug\Obj\switch.r43
#
###############################################################################

C:\Users\Rachel\Documents\ECE306\Projects\Project7\switch.c
      1          //***********************************************************************
      2          //      Title: switch.c 
      3          //      Description: This file contains code for handling switches 
      4          //      Rachel Williams
      5          //      September 2015
      6          //      Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      7          //***********************************************************************
      8          
      9          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     10          #include  "functions.h"
     11          #include "macros.h"
     12          
     13          //***********************************************************************
     14          //      Function name: Switches_Process
     15          //      Description: Handles cases for SW1 and SW2  
     16          //      Global variables: NONE
     17          //      Local variables: NONE
     18          //      Return: VOID
     19          //***********************************************************************

   \                                 In  segment CODE, align 2
     20          void Switches_Process(void){
   \                     Switches_Process:
     21            if (!(P4IN & SW1)){ 
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   162C         JC      ??Switches_Process_0
     22              Out_To_LCD(" ", POSIT_0, " ", POSIT_0, " ", POSIT_0, " ", POSIT_0);
   \   000006   0312         PUSH.W  #0x0
   \   000008   3012....     PUSH.W  #`?<Constant " ">`
   \   00000C   0312         PUSH.W  #0x0
   \   00000E   3012....     PUSH.W  #`?<Constant " ">`
   \   000012   0F43         MOV.W   #0x0, R15
   \   000014   3E40....     MOV.W   #`?<Constant " ">`, R14
   \   000018   0D43         MOV.W   #0x0, R13
   \   00001A   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   00001E   ........     CALLA   #Out_To_LCD
     23              Display_Process();
   \   000022   ........     CALLA   #Display_Process
     24              X_Seconds_Delay(POSIT_2);
   \   000026   2C43         MOV.W   #0x2, R12
   \   000028   ........     CALLA   #X_Seconds_Delay
     25              IOT_config();
   \   00002C   ........     CALLA   #IOT_config
   \   000030   3152         ADD.W   #0x8, SP
     26          
     27          
     28            }
     29            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_0:
   \   000032   E2B32102     BIT.B   #0x2, &0x221
   \   000036   182C         JC      ??Switches_Process_1
     30              enabled_RX = ORIGINAL;
   \   000038   C243....     MOV.B   #0x0, &enabled_RX
     31              Out_To_LCD(" ", POSIT_0, " ", POSIT_0, " ", POSIT_0, " ", POSIT_0);
   \   00003C   0312         PUSH.W  #0x0
   \   00003E   3012....     PUSH.W  #`?<Constant " ">`
   \   000042   0312         PUSH.W  #0x0
   \   000044   3012....     PUSH.W  #`?<Constant " ">`
   \   000048   0F43         MOV.W   #0x0, R15
   \   00004A   3E40....     MOV.W   #`?<Constant " ">`, R14
   \   00004E   0D43         MOV.W   #0x0, R13
   \   000050   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   000054   ........     CALLA   #Out_To_LCD
     32              Display_Process();
   \   000058   ........     CALLA   #Display_Process
     33              X_Seconds_Delay(POSIT_2);
   \   00005C   2C43         MOV.W   #0x2, R12
   \   00005E   ........     CALLA   #X_Seconds_Delay
     34              Listen();  
   \   000062   ........     CALLA   #Listen
   \   000066   3152         ADD.W   #0x8, SP
     35            }
     36          }     
   \                     ??Switches_Process_1:
   \   000068   1001         RETA
   \   00006A                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " ">`:
   \   000000   2000         DC8 " "

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Switches_Process
       12   -> Display_Process
       12   -> IOT_config
       12   -> Listen
       12   -> Out_To_LCD
       12   -> X_Seconds_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant " ">
     106  Switches_Process
       2  _A_PBIN_L

 
 106 bytes in segment CODE
   2 bytes in segment DATA16_AN
   2 bytes in segment DATA16_C
 
 106 bytes of CODE  memory
   2 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
