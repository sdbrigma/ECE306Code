###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           06/Nov/2015  13:36:43
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Rachel\Documents\ECE306\HW\HW9\HW8_Demo.c
#    Command line  =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\HW8_Demo.c -lC
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\List\ -o
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2_2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\List\HW8_Demo.lst
#    Object file   =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\Obj\HW8_Demo.r43
#
###############################################################################

C:\Users\Rachel\Documents\ECE306\HW\HW9\HW8_Demo.c
      1          //*****************************************************************************
      2          //      Title: HW8_Demo
      3          //      Description: Handles TX/RX demonstration for HW 8 
      4          //      Rachel Williams
      5          //      October 2015
      6          //      Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      7          //*****************************************************************************
      8          
      9          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ec
   \   union <unnamed> _A_UCA1RXBUF_L
   \                     _A_UCA1RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2
     10          #include  "functions.h"
     11          #include  "macros.h"
     12          
     13          //*****************************************************************************
     14          //      Function name: HW8Demo
     15          //      Description: Demonstrates TX/RX communication 
     16          //      Global variables: packet, posL1
     17          //      Local variables: i, temp, HW8_string[] 
     18          //      Return: VOID
     19          //*****************************************************************************
     20          

   \                                 In  segment CODE, align 2
     21          void HW8Demo(void){
   \                     HW8Demo:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   31800C00     SUB.W   #0xc, SP
     22            int i=ORIGINAL;
   \   000006   0A43         MOV.W   #0x0, R10
     23            int temp = ORIGINAL;
   \   000008   0B43         MOV.W   #0x0, R11
     24            posL1 = ORIGINAL;
   \   00000A   C243....     MOV.B   #0x0, &posL1
     25            
     26            // character array for demonstration, 10 characters 
     27            const char HW8_string[] = "NCSU  #1  ";
   \   00000E   0C41         MOV.W   SP, R12
   \   000010   3E40....     MOV.W   #`?<Constant "NCSU  #1  ">`, R14
   \   000014   3D400B00     MOV.W   #0xb, R13
   \   000018   ........     CALLA   #?CopyMemoryBytes
     28            
     29            while(ALWAYS){
     30              if (!(P4IN & SW1)){
   \                     ??HW8Demo_0:
   \   00001C   D2B32102     BIT.B   #0x1, &0x221
   \   000020   0C2C         JC      ??HW8Demo_1
     31                baud_rate = B_RATE_115200;
   \   000022   A242....     MOV.W   #0x4, &baud_rate
     32                Init_Serial_UCA1();
   \   000026   ........     CALLA   #Init_Serial_UCA1
     33                display_4 = "115200";
   \   00002A   B240........ MOV.W   #`?<Constant "115200">`, &display_4
     34                posL4 = POSIT_1;
   \   000030   D243....     MOV.B   #0x1, &posL4
     35                Display_Process(); 
   \   000034   ........     CALLA   #Display_Process
   \   000038   0F3C         JMP     ??HW8Demo_2
     36              }else if(!(P4IN & SW2)){
   \                     ??HW8Demo_1:
   \   00003A   E2B32102     BIT.B   #0x2, &0x221
   \   00003E   0C2C         JC      ??HW8Demo_2
     37                baud_rate = B_RATE_9600;
   \   000040   B2403400.... MOV.W   #0x34, &baud_rate
     38                Init_Serial_UCA1();
   \   000046   ........     CALLA   #Init_Serial_UCA1
     39                display_4 = "9600";
   \   00004A   B240........ MOV.W   #`?<Constant "9600">`, &display_4
     40                posL4 = POSIT_1;
   \   000050   D243....     MOV.B   #0x1, &posL4
     41                Display_Process(); 
   \   000054   ........     CALLA   #Display_Process
     42              }
     43           
     44              // Transmitting 
     45              UCA1TXBUF = HW8_string[i];
   \                     ??HW8Demo_2:
   \   000058   0F4A         MOV.W   R10, R15
   \   00005A   0F51         ADD.W   SP, R15
   \   00005C   6F4F         MOV.B   @R15, R15
   \   00005E   4F4F         MOV.B   R15, R15
   \   000060   824FEE05     MOV.W   R15, &0x5ee
     46              
     47              // Receiving
     48              packet = UCA1RXBUF; 
   \   000064   1E42EC05     MOV.W   &0x5ec, R14
   \   000068   C24E....     MOV.B   R14, &packet
     49              display_1[temp] = packet;
   \   00006C   1F42....     MOV.W   &display_1, R15
   \   000070   0F5B         ADD.W   R11, R15
   \   000072   DF42....0000 MOV.B   &packet, 0(R15)
     50              if(temp > POSIT_8){
   \   000078   3B900900     CMP.W   #0x9, R11
   \   00007C   3538         JL      ??HW8Demo_3
     51                temp = ORIGINAL;
   \   00007E   0B43         MOV.W   #0x0, R11
     52                i = ORIGINAL;
   \   000080   0A43         MOV.W   #0x0, R10
     53                display_1[POSIT_0] = ' ';
   \   000082   1F42....     MOV.W   &display_1, R15
   \   000086   FF4020000000 MOV.B   #0x20, 0(R15)
     54                display_1[POSIT_1] = ' ';
   \   00008C   1F42....     MOV.W   &display_1, R15
   \   000090   FF4020000100 MOV.B   #0x20, 0x1(R15)
     55                display_1[POSIT_2] = ' ';
   \   000096   1F42....     MOV.W   &display_1, R15
   \   00009A   FF4020000200 MOV.B   #0x20, 0x2(R15)
     56                display_1[POSIT_3] = ' ';
   \   0000A0   1F42....     MOV.W   &display_1, R15
   \   0000A4   FF4020000300 MOV.B   #0x20, 0x3(R15)
     57                display_1[POSIT_4] = ' ';
   \   0000AA   1F42....     MOV.W   &display_1, R15
   \   0000AE   FF4020000400 MOV.B   #0x20, 0x4(R15)
     58                display_1[POSIT_5] = ' ';
   \   0000B4   1F42....     MOV.W   &display_1, R15
   \   0000B8   FF4020000500 MOV.B   #0x20, 0x5(R15)
     59                display_1[POSIT_6] = ' ';
   \   0000BE   1F42....     MOV.W   &display_1, R15
   \   0000C2   FF4020000600 MOV.B   #0x20, 0x6(R15)
     60                display_1[POSIT_7] = ' ';
   \   0000C8   1F42....     MOV.W   &display_1, R15
   \   0000CC   FF4020000700 MOV.B   #0x20, 0x7(R15)
     61                display_1[POSIT_8] = ' ';
   \   0000D2   1F42....     MOV.W   &display_1, R15
   \   0000D6   FF4020000800 MOV.B   #0x20, 0x8(R15)
     62                display_1[POSIT_9] = ' ';
   \   0000DC   1F42....     MOV.W   &display_1, R15
   \   0000E0   FF4020000900 MOV.B   #0x20, 0x9(R15)
   \   0000E6   023C         JMP     ??HW8Demo_4
     63              }else{
     64                temp++;
   \                     ??HW8Demo_3:
   \   0000E8   1B53         ADD.W   #0x1, R11
     65                i++;
   \   0000EA   1A53         ADD.W   #0x1, R10
     66              }
     67              display_2 = "          ";
   \                     ??HW8Demo_4:
   \   0000EC   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     68              Display_Process();
   \   0000F2   ........     CALLA   #Display_Process
     69              Five_Msec_Delay(HALF_SECOND);
   \   0000F6   3C400C00     MOV.W   #0xc, R12
   \   0000FA   ........     CALLA   #Five_Msec_Delay
   \   0000FE   8E3F         JMP     ??HW8Demo_0
   \   000100   0343         NOP
   \   000102                REQUIRE _A_PBIN_L
   \   000102                REQUIRE _A_UCA1TXBUF_L
   \   000102                REQUIRE _A_UCA1RXBUF_L
     70            }
     71          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU  #1  ">`:
   \   000000   4E4353552020 DC8 "NCSU  #1  "
   \            2331202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "115200">`:
   \   000000   313135323030 DC8 "115200"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "9600">`:
   \   000000   3936303000   DC8 "9600"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     20   HW8Demo
       20   -> Display_Process
       20   -> Five_Msec_Delay
       20   -> Init_Serial_UCA1
       20 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       7  ?<Constant "115200">
       5  ?<Constant "9600">
      11  ?<Constant "NCSU  #1  ">
     258  HW8Demo
       2  _A_PBIN_L
       2  _A_UCA1RXBUF_L
       2  _A_UCA1TXBUF_L

 
 258 bytes in segment CODE
   6 bytes in segment DATA16_AN
  34 bytes in segment DATA16_C
 
 258 bytes of CODE  memory
  34 bytes of CONST memory
   0 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
