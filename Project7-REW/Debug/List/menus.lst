###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           13/Nov/2015  11:36:45
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Rachel\Documents\ECE306\HW\HW9\menus.c
#    Command line  =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\menus.c -lC
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\List\ -o
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2_2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\List\menus.lst
#    Object file   =  
#        C:\Users\Rachel\Documents\ECE306\HW\HW9\Debug\Obj\menus.r43
#
###############################################################################

C:\Users\Rachel\Documents\ECE306\HW\HW9\menus.c
      1          //***********************************************************************
      2          //      Title: menus.c 
      3          //      Description: This file contains code for different menus  
      4          //      Rachel Williams
      5          //      November 2015
      6          //      Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      7          //***********************************************************************
      8          
      9          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     10          #include  "functions.h"
     11          #include "macros.h"
     12          
     13          //***********************************************************************
     14          //      Function name: Resistors
     15          //      Description: Menu for resistors  
     16          //      Global variables: NONE
     17          //      Local variables: NONE
     18          //      Return: VOID
     19          //***********************************************************************

   \                                 In  segment CODE, align 2
     20          void Resistors(void){  
   \                     Resistors:
   \   000000   0A12         PUSH.W  R10
     21            // 10 items in menu so 1023/10 = resolution to use
     22            // divisions of 102 
     23           int resolution = TEN23/POSIT_10; 
   \   000002   3A406600     MOV.W   #0x66, R10
     24           lcd_4line();
   \   000006   ........     CALLA   #lcd_4line
     25           
     26           // resetting LCD to prevent glitching 
     27            Out_To_LCD("",POSIT_0,"",POSIT_0,"",POSIT_0," ",POSIT_0);
   \   00000A   0312         PUSH.W  #0x0
   \   00000C   3012....     PUSH.W  #`?<Constant " ">`
   \   000010   0312         PUSH.W  #0x0
   \   000012   3012....     PUSH.W  #`?<Constant "">`
   \   000016   0F43         MOV.W   #0x0, R15
   \   000018   3E40....     MOV.W   #`?<Constant "">`, R14
   \   00001C   0D43         MOV.W   #0x0, R13
   \   00001E   3C40....     MOV.W   #`?<Constant "">`, R12
   \   000022   ........     CALLA   #Out_To_LCD
     28            Display_Process();
   \   000026   ........     CALLA   #Display_Process
   \   00002A   3152         ADD.W   #0x8, SP
     29           
     30           while((P4IN & SW2)){
   \                     ??Resistors_0:
   \   00002C   E2B32102     BIT.B   #0x2, &0x221
   \   000030   F428         JNC     ??Resistors_1
     31              ADC_Process();ADC_Process();ADC_Process();
   \   000032   ........     CALLA   #ADC_Process
   \   000036   ........     CALLA   #ADC_Process
   \   00003A   ........     CALLA   #ADC_Process
     32              if(ADC_Thumb <= resolution){
   \   00003E   1A92....     CMP.W   &ADC_Thumb, R10
   \   000042   1228         JNC     ??Resistors_2
     33                Out_To_LCD("Color",POSIT_2,"BLACK",POSIT_2,"Value",POSIT_2,"0",POSIT_4); 
   \   000044   2212         PUSH.W  #0x4
   \   000046   3012....     PUSH.W  #`?<Constant "0">`
   \   00004A   2312         PUSH.W  #0x2
   \   00004C   3012....     PUSH.W  #`?<Constant "Value">`
   \   000050   2F43         MOV.W   #0x2, R15
   \   000052   3E40....     MOV.W   #`?<Constant "BLACK">`, R14
   \   000056   2D43         MOV.W   #0x2, R13
   \   000058   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   00005C   ........     CALLA   #Out_To_LCD
     34                Display_Process();
   \   000060   ........     CALLA   #Display_Process
   \   000064   3152         ADD.W   #0x8, SP
   \   000066   E23F         JMP     ??Resistors_0
     35              }else if(ADC_Thumb <= (resolution*POSIT_2)){
   \                     ??Resistors_2:
   \   000068   0F4A         MOV.W   R10, R15
   \   00006A   0F5F         RLA.W   R15
   \   00006C   1F92....     CMP.W   &ADC_Thumb, R15
   \   000070   1228         JNC     ??Resistors_3
     36                Out_To_LCD("Color",POSIT_2,"BROWN",POSIT_2,"Value",POSIT_2,"1",POSIT_4);
   \   000072   2212         PUSH.W  #0x4
   \   000074   3012....     PUSH.W  #`?<Constant "1">`
   \   000078   2312         PUSH.W  #0x2
   \   00007A   3012....     PUSH.W  #`?<Constant "Value">`
   \   00007E   2F43         MOV.W   #0x2, R15
   \   000080   3E40....     MOV.W   #`?<Constant "BROWN">`, R14
   \   000084   2D43         MOV.W   #0x2, R13
   \   000086   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   00008A   ........     CALLA   #Out_To_LCD
     37                Display_Process();
   \   00008E   ........     CALLA   #Display_Process
   \   000092   3152         ADD.W   #0x8, SP
   \   000094   CB3F         JMP     ??Resistors_0
     38              }else if(ADC_Thumb <= (resolution*POSIT_3)){
   \                     ??Resistors_3:
   \   000096   0F4A         MOV.W   R10, R15
   \   000098                RPT     #0x2
   \   000098   41180F5A     ADDX.W  R10, R15
   \   00009C   1F92....     CMP.W   &ADC_Thumb, R15
   \   0000A0   1228         JNC     ??Resistors_4
     39                Out_To_LCD("Color",POSIT_2,"RED",POSIT_2,"Value",POSIT_2,"2",POSIT_4);
   \   0000A2   2212         PUSH.W  #0x4
   \   0000A4   3012....     PUSH.W  #`?<Constant "2">`
   \   0000A8   2312         PUSH.W  #0x2
   \   0000AA   3012....     PUSH.W  #`?<Constant "Value">`
   \   0000AE   2F43         MOV.W   #0x2, R15
   \   0000B0   3E40....     MOV.W   #`?<Constant "RED">`, R14
   \   0000B4   2D43         MOV.W   #0x2, R13
   \   0000B6   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   0000BA   ........     CALLA   #Out_To_LCD
     40                Display_Process();
   \   0000BE   ........     CALLA   #Display_Process
   \   0000C2   3152         ADD.W   #0x8, SP
   \   0000C4   B33F         JMP     ??Resistors_0
     41              }else if(ADC_Thumb <= (resolution*POSIT_4)){
   \                     ??Resistors_4:
   \   0000C6   0F4A         MOV.W   R10, R15
   \   0000C8   5F06         RLAM.W  #0x2, R15
   \   0000CA   1F92....     CMP.W   &ADC_Thumb, R15
   \   0000CE   1228         JNC     ??Resistors_5
     42                Out_To_LCD("Color",POSIT_2,"ORANGE",POSIT_2,"Value",POSIT_2,"3",POSIT_4); 
   \   0000D0   2212         PUSH.W  #0x4
   \   0000D2   3012....     PUSH.W  #`?<Constant "3">`
   \   0000D6   2312         PUSH.W  #0x2
   \   0000D8   3012....     PUSH.W  #`?<Constant "Value">`
   \   0000DC   2F43         MOV.W   #0x2, R15
   \   0000DE   3E40....     MOV.W   #`?<Constant "ORANGE">`, R14
   \   0000E2   2D43         MOV.W   #0x2, R13
   \   0000E4   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   0000E8   ........     CALLA   #Out_To_LCD
     43                Display_Process();
   \   0000EC   ........     CALLA   #Display_Process
   \   0000F0   3152         ADD.W   #0x8, SP
   \   0000F2   9C3F         JMP     ??Resistors_0
     44              }else if(ADC_Thumb <= (resolution*POSIT_5)){
   \                     ??Resistors_5:
   \   0000F4   0F4A         MOV.W   R10, R15
   \   0000F6   0E4F         MOV.W   R15, R14
   \   0000F8   5F06         RLAM.W  #0x2, R15
   \   0000FA   0F5E         ADD.W   R14, R15
   \   0000FC   1F92....     CMP.W   &ADC_Thumb, R15
   \   000100   1228         JNC     ??Resistors_6
     45                Out_To_LCD("Color",POSIT_2,"YELLOW",POSIT_2,"Value",POSIT_2,"4",POSIT_4);
   \   000102   2212         PUSH.W  #0x4
   \   000104   3012....     PUSH.W  #`?<Constant "4">`
   \   000108   2312         PUSH.W  #0x2
   \   00010A   3012....     PUSH.W  #`?<Constant "Value">`
   \   00010E   2F43         MOV.W   #0x2, R15
   \   000110   3E40....     MOV.W   #`?<Constant "YELLOW">`, R14
   \   000114   2D43         MOV.W   #0x2, R13
   \   000116   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   00011A   ........     CALLA   #Out_To_LCD
     46                Display_Process();
   \   00011E   ........     CALLA   #Display_Process
   \   000122   3152         ADD.W   #0x8, SP
   \   000124   833F         JMP     ??Resistors_0
     47              }else if(ADC_Thumb <= (resolution*POSIT_6)){
   \                     ??Resistors_6:
   \   000126   0F4A         MOV.W   R10, R15
   \   000128                RPT     #0x5
   \   000128   44180F5A     ADDX.W  R10, R15
   \   00012C   1F92....     CMP.W   &ADC_Thumb, R15
   \   000130   1228         JNC     ??Resistors_7
     48                Out_To_LCD("Color",POSIT_2,"GREEN",POSIT_2,"Value",POSIT_2,"5",POSIT_4); 
   \   000132   2212         PUSH.W  #0x4
   \   000134   3012....     PUSH.W  #`?<Constant "5">`
   \   000138   2312         PUSH.W  #0x2
   \   00013A   3012....     PUSH.W  #`?<Constant "Value">`
   \   00013E   2F43         MOV.W   #0x2, R15
   \   000140   3E40....     MOV.W   #`?<Constant "GREEN">`, R14
   \   000144   2D43         MOV.W   #0x2, R13
   \   000146   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   00014A   ........     CALLA   #Out_To_LCD
     49                Display_Process();
   \   00014E   ........     CALLA   #Display_Process
   \   000152   3152         ADD.W   #0x8, SP
   \   000154   6B3F         JMP     ??Resistors_0
     50              }else if(ADC_Thumb <= (resolution*POSIT_7)){
   \                     ??Resistors_7:
   \   000156   0F4A         MOV.W   R10, R15
   \   000158                RPT     #0x6
   \   000158   45180F5A     ADDX.W  R10, R15
   \   00015C   1F92....     CMP.W   &ADC_Thumb, R15
   \   000160   1228         JNC     ??Resistors_8
     51                Out_To_LCD("Color",POSIT_2,"BLUE",POSIT_2,"Value",POSIT_2,"6",POSIT_4);
   \   000162   2212         PUSH.W  #0x4
   \   000164   3012....     PUSH.W  #`?<Constant "6">`
   \   000168   2312         PUSH.W  #0x2
   \   00016A   3012....     PUSH.W  #`?<Constant "Value">`
   \   00016E   2F43         MOV.W   #0x2, R15
   \   000170   3E40....     MOV.W   #`?<Constant "BLUE">`, R14
   \   000174   2D43         MOV.W   #0x2, R13
   \   000176   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   00017A   ........     CALLA   #Out_To_LCD
     52                Display_Process();
   \   00017E   ........     CALLA   #Display_Process
   \   000182   3152         ADD.W   #0x8, SP
   \   000184   533F         JMP     ??Resistors_0
     53              }else if(ADC_Thumb <= (resolution*POSIT_8)){
   \                     ??Resistors_8:
   \   000186   0F4A         MOV.W   R10, R15
   \   000188   5F0A         RLAM.W  #0x3, R15
   \   00018A   1F92....     CMP.W   &ADC_Thumb, R15
   \   00018E   1228         JNC     ??Resistors_9
     54                Out_To_LCD("Color",POSIT_2,"VIOLET",POSIT_2,"Value",POSIT_2,"7",POSIT_4); 
   \   000190   2212         PUSH.W  #0x4
   \   000192   3012....     PUSH.W  #`?<Constant "7">`
   \   000196   2312         PUSH.W  #0x2
   \   000198   3012....     PUSH.W  #`?<Constant "Value">`
   \   00019C   2F43         MOV.W   #0x2, R15
   \   00019E   3E40....     MOV.W   #`?<Constant "VIOLET">`, R14
   \   0001A2   2D43         MOV.W   #0x2, R13
   \   0001A4   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   0001A8   ........     CALLA   #Out_To_LCD
     55                Display_Process();
   \   0001AC   ........     CALLA   #Display_Process
   \   0001B0   3152         ADD.W   #0x8, SP
   \   0001B2   3C3F         JMP     ??Resistors_0
     56              }else if(ADC_Thumb <= (resolution*POSIT_9)){
   \                     ??Resistors_9:
   \   0001B4   0F4A         MOV.W   R10, R15
   \   0001B6   0E4F         MOV.W   R15, R14
   \   0001B8   5F0A         RLAM.W  #0x3, R15
   \   0001BA   0F5E         ADD.W   R14, R15
   \   0001BC   1F92....     CMP.W   &ADC_Thumb, R15
   \   0001C0   1228         JNC     ??Resistors_10
     57                Out_To_LCD("Color",POSIT_2,"GRAY",POSIT_2,"Value",POSIT_2,"8",POSIT_4); 
   \   0001C2   2212         PUSH.W  #0x4
   \   0001C4   3012....     PUSH.W  #`?<Constant "8">`
   \   0001C8   2312         PUSH.W  #0x2
   \   0001CA   3012....     PUSH.W  #`?<Constant "Value">`
   \   0001CE   2F43         MOV.W   #0x2, R15
   \   0001D0   3E40....     MOV.W   #`?<Constant "GRAY">`, R14
   \   0001D4   2D43         MOV.W   #0x2, R13
   \   0001D6   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   0001DA   ........     CALLA   #Out_To_LCD
     58                Display_Process();
   \   0001DE   ........     CALLA   #Display_Process
   \   0001E2   3152         ADD.W   #0x8, SP
   \   0001E4   233F         JMP     ??Resistors_0
     59              }else if(ADC_Thumb <= (resolution*POSIT_10)){
   \                     ??Resistors_10:
   \   0001E6   0F4A         MOV.W   R10, R15
   \   0001E8   0F5F         RLA.W   R15
   \   0001EA   0E4F         MOV.W   R15, R14
   \   0001EC   5F06         RLAM.W  #0x2, R15
   \   0001EE   0F5E         ADD.W   R14, R15
   \   0001F0   1F92....     CMP.W   &ADC_Thumb, R15
   \   0001F4   1B2B         JNC     ??Resistors_0
     60                Out_To_LCD("Color",POSIT_2,"WHITE",POSIT_2,"Value",POSIT_2,"9",POSIT_4);
   \   0001F6   2212         PUSH.W  #0x4
   \   0001F8   3012....     PUSH.W  #`?<Constant "9">`
   \   0001FC   2312         PUSH.W  #0x2
   \   0001FE   3012....     PUSH.W  #`?<Constant "Value">`
   \   000202   2F43         MOV.W   #0x2, R15
   \   000204   3E40....     MOV.W   #`?<Constant "WHITE">`, R14
   \   000208   2D43         MOV.W   #0x2, R13
   \   00020A   3C40....     MOV.W   #`?<Constant "Color">`, R12
   \   00020E   ........     CALLA   #Out_To_LCD
     61                Display_Process();
   \   000212   ........     CALLA   #Display_Process
   \   000216   3152         ADD.W   #0x8, SP
   \   000218   093F         JMP     ??Resistors_0
     62              }
     63            }
     64          } 
   \                     ??Resistors_1:
   \   00021A   3A41         POP.W   R10
   \   00021C   1001         RETA
   \   00021E                REQUIRE _A_PBIN_L
     65          
     66          //***********************************************************************
     67          //      Function name: Shapes
     68          //      Description: Menu for shapes  
     69          //      Global variables: NONE
     70          //      Local variables: NONE
     71          //      Return: VOID
     72          //***********************************************************************

   \                                 In  segment CODE, align 2
     73          void Shapes(void){
   \                     Shapes:
   \   000000   0A12         PUSH.W  R10
     74            // Line 1: previous shape
     75            // Line 2: current shape 
     76            // Line 3: next shape 
     77            int resolution = TEN23/POSIT_10; 
   \   000002   3A406600     MOV.W   #0x66, R10
     78            lcd_BIG_mid();
   \   000006   ........     CALLA   #lcd_BIG_mid
     79            
     80            // resetting LCD to prevent glitching 
     81            Out_To_LCD("",POSIT_0,"",POSIT_0,"",POSIT_0," ",POSIT_0);
   \   00000A   0312         PUSH.W  #0x0
   \   00000C   3012....     PUSH.W  #`?<Constant " ">`
   \   000010   0312         PUSH.W  #0x0
   \   000012   3012....     PUSH.W  #`?<Constant "">`
   \   000016   0F43         MOV.W   #0x0, R15
   \   000018   3E40....     MOV.W   #`?<Constant "">`, R14
   \   00001C   0D43         MOV.W   #0x0, R13
   \   00001E   3C40....     MOV.W   #`?<Constant "">`, R12
   \   000022   ........     CALLA   #Out_To_LCD
     82            Display_Process();
   \   000026   ........     CALLA   #Display_Process
   \   00002A   3152         ADD.W   #0x8, SP
     83            
     84            while((P4IN & SW2)){
   \                     ??Shapes_0:
   \   00002C   E2B32102     BIT.B   #0x2, &0x221
   \   000030   F628         JNC     ??Shapes_1
     85              ADC_Process();ADC_Process();ADC_Process();
   \   000032   ........     CALLA   #ADC_Process
   \   000036   ........     CALLA   #ADC_Process
   \   00003A   ........     CALLA   #ADC_Process
     86              if(ADC_Thumb <= resolution){
   \   00003E   1A92....     CMP.W   &ADC_Thumb, R10
   \   000042   1428         JNC     ??Shapes_2
     87                lcd_BIG_mid();
   \   000044   ........     CALLA   #lcd_BIG_mid
     88                Out_To_LCD(" ",POSIT_0,"CIRCLE",POSIT_0,"Square",POSIT_0," ",POSIT_0); 
   \   000048   0312         PUSH.W  #0x0
   \   00004A   3012....     PUSH.W  #`?<Constant " ">`
   \   00004E   0312         PUSH.W  #0x0
   \   000050   3012....     PUSH.W  #`?<Constant "Square">`
   \   000054   0F43         MOV.W   #0x0, R15
   \   000056   3E40....     MOV.W   #`?<Constant "CIRCLE">`, R14
   \   00005A   0D43         MOV.W   #0x0, R13
   \   00005C   3C40....     MOV.W   #`?<Constant " ">`, R12
   \   000060   ........     CALLA   #Out_To_LCD
     89                Display_Process();
   \   000064   ........     CALLA   #Display_Process
   \   000068   3152         ADD.W   #0x8, SP
   \   00006A   E03F         JMP     ??Shapes_0
     90              }else if(ADC_Thumb <= (resolution*POSIT_2)){
   \                     ??Shapes_2:
   \   00006C   0F4A         MOV.W   R10, R15
   \   00006E   0F5F         RLA.W   R15
   \   000070   1F92....     CMP.W   &ADC_Thumb, R15
   \   000074   1228         JNC     ??Shapes_3
     91                Out_To_LCD("Circle",POSIT_0,"SQUARE",POSIT_0,"Triangle",POSIT_0," ",POSIT_0); 
   \   000076   0312         PUSH.W  #0x0
   \   000078   3012....     PUSH.W  #`?<Constant " ">`
   \   00007C   0312         PUSH.W  #0x0
   \   00007E   3012....     PUSH.W  #`?<Constant "Triangle">`
   \   000082   0F43         MOV.W   #0x0, R15
   \   000084   3E40....     MOV.W   #`?<Constant "SQUARE">`, R14
   \   000088   0D43         MOV.W   #0x0, R13
   \   00008A   3C40....     MOV.W   #`?<Constant "Circle">`, R12
   \   00008E   ........     CALLA   #Out_To_LCD
     92                Display_Process();
   \   000092   ........     CALLA   #Display_Process
   \   000096   3152         ADD.W   #0x8, SP
   \   000098   C93F         JMP     ??Shapes_0
     93              }else if(ADC_Thumb <= (resolution*POSIT_3)){
   \                     ??Shapes_3:
   \   00009A   0F4A         MOV.W   R10, R15
   \   00009C                RPT     #0x2
   \   00009C   41180F5A     ADDX.W  R10, R15
   \   0000A0   1F92....     CMP.W   &ADC_Thumb, R15
   \   0000A4   1228         JNC     ??Shapes_4
     94                Out_To_LCD("Square",POSIT_0,"TRIANGLE",POSIT_0,"Octagon",POSIT_0," ",POSIT_0); 
   \   0000A6   0312         PUSH.W  #0x0
   \   0000A8   3012....     PUSH.W  #`?<Constant " ">`
   \   0000AC   0312         PUSH.W  #0x0
   \   0000AE   3012....     PUSH.W  #`?<Constant "Octagon">`
   \   0000B2   0F43         MOV.W   #0x0, R15
   \   0000B4   3E40....     MOV.W   #`?<Constant "TRIANGLE">`, R14
   \   0000B8   0D43         MOV.W   #0x0, R13
   \   0000BA   3C40....     MOV.W   #`?<Constant "Square">`, R12
   \   0000BE   ........     CALLA   #Out_To_LCD
     95                Display_Process();
   \   0000C2   ........     CALLA   #Display_Process
   \   0000C6   3152         ADD.W   #0x8, SP
   \   0000C8   B13F         JMP     ??Shapes_0
     96              }else if(ADC_Thumb <= (resolution*POSIT_4)){
   \                     ??Shapes_4:
   \   0000CA   0F4A         MOV.W   R10, R15
   \   0000CC   5F06         RLAM.W  #0x2, R15
   \   0000CE   1F92....     CMP.W   &ADC_Thumb, R15
   \   0000D2   1228         JNC     ??Shapes_5
     97                Out_To_LCD("Triangle",POSIT_0,"OCTAGON",POSIT_0,"Pentagon",POSIT_0," ",POSIT_0);  
   \   0000D4   0312         PUSH.W  #0x0
   \   0000D6   3012....     PUSH.W  #`?<Constant " ">`
   \   0000DA   0312         PUSH.W  #0x0
   \   0000DC   3012....     PUSH.W  #`?<Constant "Pentagon">`
   \   0000E0   0F43         MOV.W   #0x0, R15
   \   0000E2   3E40....     MOV.W   #`?<Constant "OCTAGON">`, R14
   \   0000E6   0D43         MOV.W   #0x0, R13
   \   0000E8   3C40....     MOV.W   #`?<Constant "Triangle">`, R12
   \   0000EC   ........     CALLA   #Out_To_LCD
     98                Display_Process();
   \   0000F0   ........     CALLA   #Display_Process
   \   0000F4   3152         ADD.W   #0x8, SP
   \   0000F6   9A3F         JMP     ??Shapes_0
     99              }else if(ADC_Thumb <= (resolution*POSIT_5)){
   \                     ??Shapes_5:
   \   0000F8   0F4A         MOV.W   R10, R15
   \   0000FA   0E4F         MOV.W   R15, R14
   \   0000FC   5F06         RLAM.W  #0x2, R15
   \   0000FE   0F5E         ADD.W   R14, R15
   \   000100   1F92....     CMP.W   &ADC_Thumb, R15
   \   000104   1228         JNC     ??Shapes_6
    100                Out_To_LCD("Octagon",POSIT_0,"PENTAGON",POSIT_0,"Hexagon",POSIT_0," ",POSIT_0); 
   \   000106   0312         PUSH.W  #0x0
   \   000108   3012....     PUSH.W  #`?<Constant " ">`
   \   00010C   0312         PUSH.W  #0x0
   \   00010E   3012....     PUSH.W  #`?<Constant "Hexagon">`
   \   000112   0F43         MOV.W   #0x0, R15
   \   000114   3E40....     MOV.W   #`?<Constant "PENTAGON">`, R14
   \   000118   0D43         MOV.W   #0x0, R13
   \   00011A   3C40....     MOV.W   #`?<Constant "Octagon">`, R12
   \   00011E   ........     CALLA   #Out_To_LCD
    101                Display_Process();
   \   000122   ........     CALLA   #Display_Process
   \   000126   3152         ADD.W   #0x8, SP
   \   000128   813F         JMP     ??Shapes_0
    102              }else if(ADC_Thumb <= (resolution*POSIT_6)){
   \                     ??Shapes_6:
   \   00012A   0F4A         MOV.W   R10, R15
   \   00012C                RPT     #0x5
   \   00012C   44180F5A     ADDX.W  R10, R15
   \   000130   1F92....     CMP.W   &ADC_Thumb, R15
   \   000134   1228         JNC     ??Shapes_7
    103                Out_To_LCD("Pentagon",POSIT_0,"HEXAGON",POSIT_0,"Cube",POSIT_0," ",POSIT_0);  
   \   000136   0312         PUSH.W  #0x0
   \   000138   3012....     PUSH.W  #`?<Constant " ">`
   \   00013C   0312         PUSH.W  #0x0
   \   00013E   3012....     PUSH.W  #`?<Constant "Cube">`
   \   000142   0F43         MOV.W   #0x0, R15
   \   000144   3E40....     MOV.W   #`?<Constant "HEXAGON">`, R14
   \   000148   0D43         MOV.W   #0x0, R13
   \   00014A   3C40....     MOV.W   #`?<Constant "Pentagon">`, R12
   \   00014E   ........     CALLA   #Out_To_LCD
    104                Display_Process();
   \   000152   ........     CALLA   #Display_Process
   \   000156   3152         ADD.W   #0x8, SP
   \   000158   693F         JMP     ??Shapes_0
    105              }else if(ADC_Thumb <= (resolution*POSIT_7)){
   \                     ??Shapes_7:
   \   00015A   0F4A         MOV.W   R10, R15
   \   00015C                RPT     #0x6
   \   00015C   45180F5A     ADDX.W  R10, R15
   \   000160   1F92....     CMP.W   &ADC_Thumb, R15
   \   000164   1228         JNC     ??Shapes_8
    106                Out_To_LCD("Hexagon",POSIT_0,"CUBE",POSIT_0,"Oval",POSIT_0," ",POSIT_0); 
   \   000166   0312         PUSH.W  #0x0
   \   000168   3012....     PUSH.W  #`?<Constant " ">`
   \   00016C   0312         PUSH.W  #0x0
   \   00016E   3012....     PUSH.W  #`?<Constant "Oval">`
   \   000172   0F43         MOV.W   #0x0, R15
   \   000174   3E40....     MOV.W   #`?<Constant "CUBE">`, R14
   \   000178   0D43         MOV.W   #0x0, R13
   \   00017A   3C40....     MOV.W   #`?<Constant "Hexagon">`, R12
   \   00017E   ........     CALLA   #Out_To_LCD
    107                Display_Process();
   \   000182   ........     CALLA   #Display_Process
   \   000186   3152         ADD.W   #0x8, SP
   \   000188   513F         JMP     ??Shapes_0
    108              }else if(ADC_Thumb <= (resolution*POSIT_8)){
   \                     ??Shapes_8:
   \   00018A   0F4A         MOV.W   R10, R15
   \   00018C   5F0A         RLAM.W  #0x3, R15
   \   00018E   1F92....     CMP.W   &ADC_Thumb, R15
   \   000192   1228         JNC     ??Shapes_9
    109                Out_To_LCD("Cube",POSIT_0,"OVAL",POSIT_0,"Sphere",POSIT_0," ",POSIT_0); 
   \   000194   0312         PUSH.W  #0x0
   \   000196   3012....     PUSH.W  #`?<Constant " ">`
   \   00019A   0312         PUSH.W  #0x0
   \   00019C   3012....     PUSH.W  #`?<Constant "Sphere">`
   \   0001A0   0F43         MOV.W   #0x0, R15
   \   0001A2   3E40....     MOV.W   #`?<Constant "OVAL">`, R14
   \   0001A6   0D43         MOV.W   #0x0, R13
   \   0001A8   3C40....     MOV.W   #`?<Constant "Cube">`, R12
   \   0001AC   ........     CALLA   #Out_To_LCD
    110                Display_Process();
   \   0001B0   ........     CALLA   #Display_Process
   \   0001B4   3152         ADD.W   #0x8, SP
   \   0001B6   3A3F         JMP     ??Shapes_0
    111              }else if(ADC_Thumb <= (resolution*POSIT_9)){
   \                     ??Shapes_9:
   \   0001B8   0F4A         MOV.W   R10, R15
   \   0001BA   0E4F         MOV.W   R15, R14
   \   0001BC   5F0A         RLAM.W  #0x3, R15
   \   0001BE   0F5E         ADD.W   R14, R15
   \   0001C0   1F92....     CMP.W   &ADC_Thumb, R15
   \   0001C4   1228         JNC     ??Shapes_10
    112                Out_To_LCD("Oval",POSIT_0,"SPHERE",POSIT_0,"Cylinder",POSIT_0," ",POSIT_0);  
   \   0001C6   0312         PUSH.W  #0x0
   \   0001C8   3012....     PUSH.W  #`?<Constant " ">`
   \   0001CC   0312         PUSH.W  #0x0
   \   0001CE   3012....     PUSH.W  #`?<Constant "Cylinder">`
   \   0001D2   0F43         MOV.W   #0x0, R15
   \   0001D4   3E40....     MOV.W   #`?<Constant "SPHERE">`, R14
   \   0001D8   0D43         MOV.W   #0x0, R13
   \   0001DA   3C40....     MOV.W   #`?<Constant "Oval">`, R12
   \   0001DE   ........     CALLA   #Out_To_LCD
    113                Display_Process();
   \   0001E2   ........     CALLA   #Display_Process
   \   0001E6   3152         ADD.W   #0x8, SP
   \   0001E8   213F         JMP     ??Shapes_0
    114              }else if(ADC_Thumb <= (resolution*POSIT_10)){
   \                     ??Shapes_10:
   \   0001EA   0F4A         MOV.W   R10, R15
   \   0001EC   0F5F         RLA.W   R15
   \   0001EE   0E4F         MOV.W   R15, R14
   \   0001F0   5F06         RLAM.W  #0x2, R15
   \   0001F2   0F5E         ADD.W   R14, R15
   \   0001F4   1F92....     CMP.W   &ADC_Thumb, R15
   \   0001F8   192B         JNC     ??Shapes_0
    115                Out_To_LCD("Sphere",POSIT_0,"CYLINDER",POSIT_0," ",POSIT_0," ",POSIT_0); 
   \   0001FA   0312         PUSH.W  #0x0
   \   0001FC   3012....     PUSH.W  #`?<Constant " ">`
   \   000200   0312         PUSH.W  #0x0
   \   000202   3012....     PUSH.W  #`?<Constant " ">`
   \   000206   0F43         MOV.W   #0x0, R15
   \   000208   3E40....     MOV.W   #`?<Constant "CYLINDER">`, R14
   \   00020C   0D43         MOV.W   #0x0, R13
   \   00020E   3C40....     MOV.W   #`?<Constant "Sphere">`, R12
   \   000212   ........     CALLA   #Out_To_LCD
    116                Display_Process();
   \   000216   ........     CALLA   #Display_Process
   \   00021A   3152         ADD.W   #0x8, SP
   \   00021C   073F         JMP     ??Shapes_0
    117              }
    118            }
    119          }
   \                     ??Shapes_1:
   \   00021E   3A41         POP.W   R10
   \   000220   1001         RETA
   \   000222                REQUIRE _A_PBIN_L
    120          
    121          //***********************************************************************
    122          //      Function name: Song
    123          //      Description: Menu for song_array 
    124          //      Global variables: NONE
    125          //      Local variables: NONE
    126          //      Return: VOID
    127          //***********************************************************************

   \                                 In  segment CODE, align 2
    128          void Song(void){
   \                     Song:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   3180EA00     SUB.W   #0xea, SP
    129            // resetting LCD to prevent glitching 
    130            Out_To_LCD("",POSIT_0,"",POSIT_0,"",POSIT_0," ",POSIT_0);
   \   000006   0312         PUSH.W  #0x0
   \   000008   3012....     PUSH.W  #`?<Constant " ">`
   \   00000C   0312         PUSH.W  #0x0
   \   00000E   3012....     PUSH.W  #`?<Constant "">`
   \   000012   0F43         MOV.W   #0x0, R15
   \   000014   3E40....     MOV.W   #`?<Constant "">`, R14
   \   000018   0D43         MOV.W   #0x0, R13
   \   00001A   3C40....     MOV.W   #`?<Constant "">`, R12
   \   00001E   ........     CALLA   #Out_To_LCD
    131            Display_Process();
   \   000022   ........     CALLA   #Display_Process
    132            
    133            // array that holds the entire song 
    134            char song_array[SONG_CHAR] = "We're the Red and White from State And we know we are the best. A hand behind our back, We can take on all the rest. Come over the hill, Carolina. Devils and Deacs stand in line. The Red and White from N.C. State. Go State!"; 
   \   000026   0C41         MOV.W   SP, R12
   \   000028   3C52         ADD.W   #0x8, R12
   \   00002A   3E40....     MOV.W   #`?<Constant "We\\'re the Red and Whi...">`, R14
   \   00002E   3D40E900     MOV.W   #0xe9, R13
   \   000032   ........     CALLA   #?CopyMemoryBytes
    135            
    136            // temporary thumb wheel variable to hold value of zero 
    137            int temp_thumb = ORIGINAL;
   \   000036   0A43         MOV.W   #0x0, R10
    138            
    139            // alt will alternate between displaying red and white for menu 
    140            int alt = ORIGINAL;
   \   000038   0B43         MOV.W   #0x0, R11
    141            
    142            // iterator that will go through the song array 
    143            int i = ORIGINAL;
   \   00003A   0843         MOV.W   #0x0, R8
    144            
    145            // resetting the char position for line 2 to be at far left 
    146            posL2 = POSIT_0; 
   \   00003C   C243....     MOV.B   #0x0, &posL2
   \   000040   3152         ADD.W   #0x8, SP
    147            
    148            // do this until SW2 is pressed 
    149            while((P4IN & SW2)){
   \                     ??Song_0:
   \   000042   E2B32102     BIT.B   #0x2, &0x221
   \   000046   CD28         JNC     ??Song_2
    150              
    151              // if iterator reaches max character count of song array 
    152              if(i == SONG_CHAR)break; 
   \   000048   3890E900     CMP.W   #0xe9, R8
   \   00004C   CA24         JEQ     ??Song_2
    153              
    154              // updating thumb wheel amount 
    155              ADC_Process(); ADC_Process(); ADC_Process(); 
   \   00004E   ........     CALLA   #ADC_Process
   \   000052   ........     CALLA   #ADC_Process
   \   000056   ........     CALLA   #ADC_Process
    156              lcd_BIG_mid();
   \   00005A   ........     CALLA   #lcd_BIG_mid
    157              
    158              // logic: song will only scroll when thumb wheel is scrolling counter clockwise
    159              if((ADC_Thumb < temp_thumb - POSIT_1) && (ADC_Thumb > POSIT_1)){ 
   \   00005E   0F4A         MOV.W   R10, R15
   \   000060   3F53         ADD.W   #0xffff, R15
   \   000062   829F....     CMP.W   R15, &ADC_Thumb
   \   000066   B72C         JC      ??Song_3
   \   000068   A293....     CMP.W   #0x2, &ADC_Thumb
   \   00006C   B428         JNC     ??Song_3
    160                if(alt){
   \   00006E   0B93         CMP.W   #0x0, R11
   \   000070   5924         JEQ     ??Song_4
    161                  // displaying Red/White and song 
    162                  display_1 = "Red";
   \   000072   B240........ MOV.W   #`?<Constant "Red">`, &display_1
    163                  posL1 = POSIT_3;
   \   000078   F2400300.... MOV.B   #0x3, &posL1
    164                  display_2[POSIT_0] = song_array[i];
   \   00007E   0F48         MOV.W   R8, R15
   \   000080   0F51         ADD.W   SP, R15
   \   000082   1E42....     MOV.W   &display_2, R14
   \   000086   EE4F0000     MOV.B   @R15, 0(R14)
    165                  display_2[POSIT_1] = song_array[i+POSIT_1];
   \   00008A   0F41         MOV.W   SP, R15
   \   00008C   0F58         ADD.W   R8, R15
   \   00008E   1E42....     MOV.W   &display_2, R14
   \   000092   DE4F01000100 MOV.B   0x1(R15), 0x1(R14)
    166                  display_2[POSIT_2] = song_array[i+POSIT_2];
   \   000098   0F41         MOV.W   SP, R15
   \   00009A   0F58         ADD.W   R8, R15
   \   00009C   1E42....     MOV.W   &display_2, R14
   \   0000A0   DE4F02000200 MOV.B   0x2(R15), 0x2(R14)
    167                  display_2[POSIT_3] = song_array[i+POSIT_3];
   \   0000A6   0F41         MOV.W   SP, R15
   \   0000A8   0F58         ADD.W   R8, R15
   \   0000AA   1E42....     MOV.W   &display_2, R14
   \   0000AE   DE4F03000300 MOV.B   0x3(R15), 0x3(R14)
    168                  display_2[POSIT_4] = song_array[i+POSIT_4];
   \   0000B4   0F41         MOV.W   SP, R15
   \   0000B6   0F58         ADD.W   R8, R15
   \   0000B8   1E42....     MOV.W   &display_2, R14
   \   0000BC   DE4F04000400 MOV.B   0x4(R15), 0x4(R14)
    169                  display_2[POSIT_5] = song_array[i+POSIT_5];
   \   0000C2   0F41         MOV.W   SP, R15
   \   0000C4   0F58         ADD.W   R8, R15
   \   0000C6   1E42....     MOV.W   &display_2, R14
   \   0000CA   DE4F05000500 MOV.B   0x5(R15), 0x5(R14)
    170                  display_2[POSIT_6] = song_array[i+POSIT_6];
   \   0000D0   0F41         MOV.W   SP, R15
   \   0000D2   0F58         ADD.W   R8, R15
   \   0000D4   1E42....     MOV.W   &display_2, R14
   \   0000D8   DE4F06000600 MOV.B   0x6(R15), 0x6(R14)
    171                  display_2[POSIT_7] = song_array[i+POSIT_7];
   \   0000DE   0F41         MOV.W   SP, R15
   \   0000E0   0F58         ADD.W   R8, R15
   \   0000E2   1E42....     MOV.W   &display_2, R14
   \   0000E6   DE4F07000700 MOV.B   0x7(R15), 0x7(R14)
    172                  display_2[POSIT_8] = song_array[i+POSIT_8];
   \   0000EC   0F41         MOV.W   SP, R15
   \   0000EE   0F58         ADD.W   R8, R15
   \   0000F0   1E42....     MOV.W   &display_2, R14
   \   0000F4   DE4F08000800 MOV.B   0x8(R15), 0x8(R14)
    173                  display_2[POSIT_9] = song_array[i+POSIT_9];
   \   0000FA   0F41         MOV.W   SP, R15
   \   0000FC   0F58         ADD.W   R8, R15
   \   0000FE   1E42....     MOV.W   &display_2, R14
   \   000102   DE4F09000900 MOV.B   0x9(R15), 0x9(R14)
    174                  display_3 = "White";
   \   000108   B240........ MOV.W   #`?<Constant "White">`, &display_3
    175                  posL3 = POSIT_3;
   \   00010E   F2400300.... MOV.B   #0x3, &posL3
    176                  Display_Process(); 
   \   000114   ........     CALLA   #Display_Process
    177                  Five_Msec_Delay(POSIT_5);
   \   000118   3C400500     MOV.W   #0x5, R12
   \   00011C   ........     CALLA   #Five_Msec_Delay
    178                  
    179                  // changing state of alt so it flips to White/Red 
    180                  alt = ORIGINAL;
   \   000120   0B43         MOV.W   #0x0, R11
   \   000122   583C         JMP     ??Song_5
    181                }else{
    182                  // displaying White/Red and song 
    183                  display_1 = "White";
   \                     ??Song_4:
   \   000124   B240........ MOV.W   #`?<Constant "White">`, &display_1
    184                  posL1 = POSIT_3;
   \   00012A   F2400300.... MOV.B   #0x3, &posL1
    185                  display_2[POSIT_0] = song_array[i];
   \   000130   0F48         MOV.W   R8, R15
   \   000132   0F51         ADD.W   SP, R15
   \   000134   1E42....     MOV.W   &display_2, R14
   \   000138   EE4F0000     MOV.B   @R15, 0(R14)
    186                  display_2[POSIT_1] = song_array[i+POSIT_1];
   \   00013C   0F41         MOV.W   SP, R15
   \   00013E   0F58         ADD.W   R8, R15
   \   000140   1E42....     MOV.W   &display_2, R14
   \   000144   DE4F01000100 MOV.B   0x1(R15), 0x1(R14)
    187                  display_2[POSIT_2] = song_array[i+POSIT_2];
   \   00014A   0F41         MOV.W   SP, R15
   \   00014C   0F58         ADD.W   R8, R15
   \   00014E   1E42....     MOV.W   &display_2, R14
   \   000152   DE4F02000200 MOV.B   0x2(R15), 0x2(R14)
    188                  display_2[POSIT_3] = song_array[i+POSIT_3];
   \   000158   0F41         MOV.W   SP, R15
   \   00015A   0F58         ADD.W   R8, R15
   \   00015C   1E42....     MOV.W   &display_2, R14
   \   000160   DE4F03000300 MOV.B   0x3(R15), 0x3(R14)
    189                  display_2[POSIT_4] = song_array[i+POSIT_4];
   \   000166   0F41         MOV.W   SP, R15
   \   000168   0F58         ADD.W   R8, R15
   \   00016A   1E42....     MOV.W   &display_2, R14
   \   00016E   DE4F04000400 MOV.B   0x4(R15), 0x4(R14)
    190                  display_2[POSIT_5] = song_array[i+POSIT_5];
   \   000174   0F41         MOV.W   SP, R15
   \   000176   0F58         ADD.W   R8, R15
   \   000178   1E42....     MOV.W   &display_2, R14
   \   00017C   DE4F05000500 MOV.B   0x5(R15), 0x5(R14)
    191                  display_2[POSIT_6] = song_array[i+POSIT_6];
   \   000182   0F41         MOV.W   SP, R15
   \   000184   0F58         ADD.W   R8, R15
   \   000186   1E42....     MOV.W   &display_2, R14
   \   00018A   DE4F06000600 MOV.B   0x6(R15), 0x6(R14)
    192                  display_2[POSIT_7] = song_array[i+POSIT_7];
   \   000190   0F41         MOV.W   SP, R15
   \   000192   0F58         ADD.W   R8, R15
   \   000194   1E42....     MOV.W   &display_2, R14
   \   000198   DE4F07000700 MOV.B   0x7(R15), 0x7(R14)
    193                  display_2[POSIT_8] = song_array[i+POSIT_8];
   \   00019E   0F41         MOV.W   SP, R15
   \   0001A0   0F58         ADD.W   R8, R15
   \   0001A2   1E42....     MOV.W   &display_2, R14
   \   0001A6   DE4F08000800 MOV.B   0x8(R15), 0x8(R14)
    194                  display_2[POSIT_9] = song_array[i+POSIT_9];
   \   0001AC   0F41         MOV.W   SP, R15
   \   0001AE   0F58         ADD.W   R8, R15
   \   0001B0   1E42....     MOV.W   &display_2, R14
   \   0001B4   DE4F09000900 MOV.B   0x9(R15), 0x9(R14)
    195                  display_3 = "Red";
   \   0001BA   B240........ MOV.W   #`?<Constant "Red">`, &display_3
    196                  posL3 = POSIT_3;
   \   0001C0   F2400300.... MOV.B   #0x3, &posL3
    197                  Display_Process(); 
   \   0001C6   ........     CALLA   #Display_Process
    198                  Five_Msec_Delay(POSIT_5);
   \   0001CA   3C400500     MOV.W   #0x5, R12
   \   0001CE   ........     CALLA   #Five_Msec_Delay
    199                  
    200                  // changing state of alt so it flips to Red/White
    201                  alt = POSIT_1;
   \   0001D2   1B43         MOV.W   #0x1, R11
    202                }
    203                
    204                // updating iterator for next point in song 
    205                i++;
   \                     ??Song_5:
   \   0001D4   1853         ADD.W   #0x1, R8
    206              }
    207              // temp thumb is set so that scrolling doesn't occur when going clockwise 
    208              temp_thumb = ADC_Thumb - POSIT_10; 
   \                     ??Song_3:
   \   0001D6   1F42....     MOV.W   &ADC_Thumb, R15
   \   0001DA   3F50F6FF     ADD.W   #0xfff6, R15
   \   0001DE   0A4F         MOV.W   R15, R10
   \   0001E0   303F         JMP     ??Song_0
    209            }
    210            // resetting LCD to prevent glitching 
    211            Out_To_LCD("",POSIT_0,"",POSIT_0,"",POSIT_0," ",POSIT_0);
   \                     ??Song_2:
   \   0001E2   0312         PUSH.W  #0x0
   \   0001E4   3012....     PUSH.W  #`?<Constant " ">`
   \   0001E8   0312         PUSH.W  #0x0
   \   0001EA   3012....     PUSH.W  #`?<Constant "">`
   \   0001EE   0F43         MOV.W   #0x0, R15
   \   0001F0   3E40....     MOV.W   #`?<Constant "">`, R14
   \   0001F4   0D43         MOV.W   #0x0, R13
   \   0001F6   3C40....     MOV.W   #`?<Constant "">`, R12
   \   0001FA   ........     CALLA   #Out_To_LCD
    212            Display_Process();
   \   0001FE   ........     CALLA   #Display_Process
    213          }
   \   000202   3150F200     ADD.W   #0xf2, SP
   \   000206   3817         POPM.W  #0x4, R11
   \   000208   1001         RETA
   \   00020A                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " ">`:
   \   000000   2000         DC8 " "

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Color">`:
   \   000000   436F6C6F7200 DC8 "Color"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "BLACK">`:
   \   000000   424C41434B00 DC8 "BLACK"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Value">`:
   \   000000   56616C756500 DC8 "Value"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "0">`:
   \   000000   3000         DC8 "0"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "BROWN">`:
   \   000000   42524F574E00 DC8 "BROWN"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "1">`:
   \   000000   3100         DC8 "1"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "RED">`:
   \   000000   52454400     DC8 "RED"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "2">`:
   \   000000   3200         DC8 "2"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ORANGE">`:
   \   000000   4F52414E4745 DC8 "ORANGE"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "3">`:
   \   000000   3300         DC8 "3"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "YELLOW">`:
   \   000000   59454C4C4F57 DC8 "YELLOW"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "4">`:
   \   000000   3400         DC8 "4"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "GREEN">`:
   \   000000   475245454E00 DC8 "GREEN"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "5">`:
   \   000000   3500         DC8 "5"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "BLUE">`:
   \   000000   424C554500   DC8 "BLUE"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "6">`:
   \   000000   3600         DC8 "6"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "VIOLET">`:
   \   000000   56494F4C4554 DC8 "VIOLET"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "7">`:
   \   000000   3700         DC8 "7"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "GRAY">`:
   \   000000   4752415900   DC8 "GRAY"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "8">`:
   \   000000   3800         DC8 "8"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WHITE">`:
   \   000000   574849544500 DC8 "WHITE"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "9">`:
   \   000000   3900         DC8 "9"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CIRCLE">`:
   \   000000   434952434C45 DC8 "CIRCLE"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Square">`:
   \   000000   537175617265 DC8 "Square"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Circle">`:
   \   000000   436972636C65 DC8 "Circle"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "SQUARE">`:
   \   000000   535155415245 DC8 "SQUARE"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Triangle">`:
   \   000000   547269616E67 DC8 "Triangle"
   \            6C6500      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "TRIANGLE">`:
   \   000000   545249414E47 DC8 "TRIANGLE"
   \            4C4500      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Octagon">`:
   \   000000   4F637461676F DC8 "Octagon"
   \            6E00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "OCTAGON">`:
   \   000000   4F435441474F DC8 "OCTAGON"
   \            4E00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Pentagon">`:
   \   000000   50656E746167 DC8 "Pentagon"
   \            6F6E00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "PENTAGON">`:
   \   000000   50454E544147 DC8 "PENTAGON"
   \            4F4E00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Hexagon">`:
   \   000000   48657861676F DC8 "Hexagon"
   \            6E00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "HEXAGON">`:
   \   000000   48455841474F DC8 "HEXAGON"
   \            4E00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Cube">`:
   \   000000   4375626500   DC8 "Cube"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CUBE">`:
   \   000000   4355424500   DC8 "CUBE"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Oval">`:
   \   000000   4F76616C00   DC8 "Oval"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "OVAL">`:
   \   000000   4F56414C00   DC8 "OVAL"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Sphere">`:
   \   000000   537068657265 DC8 "Sphere"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "SPHERE">`:
   \   000000   535048455245 DC8 "SPHERE"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Cylinder">`:
   \   000000   43796C696E64 DC8 "Cylinder"
   \            657200      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CYLINDER">`:
   \   000000   43594C494E44 DC8 "CYLINDER"
   \            455200      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "We\\'re the Red and Whi...">`:
   \   000000   576527726520 DC8 57H, 65H, 27H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000008   652052656420 DC8 65H, 20H, 52H, 65H, 64H, 20H, 61H, 6EH
   \            616E        
   \   000010   642057686974 DC8 64H, 20H, 57H, 68H, 69H, 74H, 65H, 20H
   \            6520        
   \   000018   66726F6D2053 DC8 66H, 72H, 6FH, 6DH, 20H, 53H, 74H, 61H
   \            7461        
   \   000020   746520416E64 DC8 74H, 65H, 20H, 41H, 6EH, 64H, 20H, 77H
   \            2077        
   \   000028   65206B6E6F77 DC8 65H, 20H, 6BH, 6EH, 6FH, 77H, 20H, 77H
   \            2077        
   \   000030   652061726520 DC8 65H, 20H, 61H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000038   652062657374 DC8 65H, 20H, 62H, 65H, 73H, 74H, 2EH, 20H
   \            2E20        
   \   000040   412068616E64 DC8 41H, 20H, 68H, 61H, 6EH, 64H, 20H, 62H
   \            2062        
   \   000048   6568696E6420 DC8 65H, 68H, 69H, 6EH, 64H, 20H, 6FH, 75H
   \            6F75        
   \   000050   72206261636B DC8 72H, 20H, 62H, 61H, 63H, 6BH, 2CH, 20H
   \            2C20        
   \   000058   57652063616E DC8 57H, 65H, 20H, 63H, 61H, 6EH, 20H, 74H
   \            2074        
   \   000060   616B65206F6E DC8 61H, 6BH, 65H, 20H, 6FH, 6EH, 20H, 61H
   \            2061        
   \   000068   6C6C20746865 DC8 6CH, 6CH, 20H, 74H, 68H, 65H, 20H, 72H
   \            2072        
   \   000070   6573742E2043 DC8 65H, 73H, 74H, 2EH, 20H, 43H, 6FH, 6DH
   \            6F6D        
   \   000078   65206F766572 DC8 65H, 20H, 6FH, 76H, 65H, 72H, 20H, 74H
   \            2074        
   \   000080   68652068696C DC8 68H, 65H, 20H, 68H, 69H, 6CH, 6CH, 2CH
   \            6C2C        
   \   000088   204361726F6C DC8 20H, 43H, 61H, 72H, 6FH, 6CH, 69H, 6EH
   \            696E        
   \   000090   612E20446576 DC8 61H, 2EH, 20H, 44H, 65H, 76H, 69H, 6CH
   \            696C        
   \   000098   7320616E6420 DC8 73H, 20H, 61H, 6EH, 64H, 20H, 44H, 65H
   \            4465        
   \   0000A0   616373207374 DC8 61H, 63H, 73H, 20H, 73H, 74H, 61H, 6EH
   \            616E        
   \   0000A8   6420696E206C DC8 64H, 20H, 69H, 6EH, 20H, 6CH, 69H, 6EH
   \            696E        
   \   0000B0   652E20546865 DC8 65H, 2EH, 20H, 54H, 68H, 65H, 20H, 52H
   \            2052        
   \   0000B8   656420616E64 DC8 65H, 64H, 20H, 61H, 6EH, 64H, 20H, 57H
   \            2057        
   \   0000C0   686974652066 DC8 68H, 69H, 74H, 65H, 20H, 66H, 72H, 6FH
   \            726F        
   \   0000C8   6D204E2E432E DC8 6DH, 20H, 4EH, 2EH, 43H, 2EH, 20H, 53H
   \            2053        
   \   0000D0   746174652E20 DC8 74H, 61H, 74H, 65H, 2EH, 20H, 47H, 6FH
   \            476F        
   \   0000D8   205374617465 DC8 20H, 53H, 74H, 61H, 74H, 65H, 21H, 0
   \            2100        
   \   0000E0   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Red">`:
   \   000000   52656400     DC8 "Red"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "White">`:
   \   000000   576869746500 DC8 "White"

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     14   Resistors
        6   -> ADC_Process
       14   -> Display_Process
       14   -> Out_To_LCD
        6   -> lcd_4line
     14   Shapes
        6   -> ADC_Process
       14   -> Display_Process
       14   -> Out_To_LCD
        6   -> lcd_BIG_mid
    254   Song
      246   -> ADC_Process
      246   -> Display_Process
      254   -> Display_Process
      246   -> Five_Msec_Delay
      254   -> Out_To_LCD
      246   -> lcd_BIG_mid
      254 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant " ">
       1  ?<Constant "">
       2  ?<Constant "0">
       2  ?<Constant "1">
       2  ?<Constant "2">
       2  ?<Constant "3">
       2  ?<Constant "4">
       2  ?<Constant "5">
       2  ?<Constant "6">
       2  ?<Constant "7">
       2  ?<Constant "8">
       2  ?<Constant "9">
       6  ?<Constant "BLACK">
       5  ?<Constant "BLUE">
       6  ?<Constant "BROWN">
       7  ?<Constant "CIRCLE">
       5  ?<Constant "CUBE">
       9  ?<Constant "CYLINDER">
       7  ?<Constant "Circle">
       6  ?<Constant "Color">
       5  ?<Constant "Cube">
       9  ?<Constant "Cylinder">
       5  ?<Constant "GRAY">
       6  ?<Constant "GREEN">
       8  ?<Constant "HEXAGON">
       8  ?<Constant "Hexagon">
       8  ?<Constant "OCTAGON">
       7  ?<Constant "ORANGE">
       5  ?<Constant "OVAL">
       8  ?<Constant "Octagon">
       5  ?<Constant "Oval">
       9  ?<Constant "PENTAGON">
       9  ?<Constant "Pentagon">
       4  ?<Constant "RED">
       4  ?<Constant "Red">
       7  ?<Constant "SPHERE">
       7  ?<Constant "SQUARE">
       7  ?<Constant "Sphere">
       7  ?<Constant "Square">
       9  ?<Constant "TRIANGLE">
       9  ?<Constant "Triangle">
       7  ?<Constant "VIOLET">
       6  ?<Constant "Value">
       6  ?<Constant "WHITE">
     233  ?<Constant "We\'re the Red and Whi...">
       6  ?<Constant "White">
       7  ?<Constant "YELLOW">
     542  Resistors
     546  Shapes
     522  Song
       2  _A_PBIN_L

 
 1 610 bytes in segment CODE
     2 bytes in segment DATA16_AN
   485 bytes in segment DATA16_C
 
 1 610 bytes of CODE  memory
   485 bytes of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
