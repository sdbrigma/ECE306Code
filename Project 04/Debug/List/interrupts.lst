###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Oct/2015  11:53:46
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        04\interrupts.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        04\interrupts.c" -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 04\Debug\List\" -o
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        04\Debug\Obj\" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR5739__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        04\Debug\List\interrupts.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        04\Debug\Obj\interrupts.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 04\interrupts.c
      1          #include  "macros.h"
      2          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2
      3          #include  "functions.h"
      4          /*******************************************************************************
      5          *        Author: Steffon Brigman
      6          *        Date:   October 2015
      7          *        Description: This file contains all interrupts used within this project.
      8          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
      9          *
     10          *        File name: interrupts.c
     11          *        Passed : No variables passed 
     12          *        Locals: No variables defined
     13          *        Returned: no values returned 
     14          *        Globlas: no variables defined
     15          *******************************************************************************/
     16          
     17          // TimerA0 0 Interrupt handler
     18          #pragma vector = TIMER0_A0_VECTOR
     19          

   \                                 In  segment ISR_CODE, align 2
     20          __interrupt void Timer0_A0_ISR(void){
   \                     Timer0_A0_ISR:
     21            /*******************************************************************************
     22          *        Author: Steffon Brigman
     23          *        Date:   October 2015
     24          *        Description: This functions is an interrupt used to control the motors.
     25          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     26          *
     27          *        Function name: Timer0_A0_ISR
     28          *        Passed : No variables passed 
     29          *        Locals: TA0CCR0, ISR_COUNT
     30          *        Returned: no values returned 
     31          *        Globlas: no variables defined
     32          *******************************************************************************/
     33          
     34           PJOUT ^= LED3; // Test signal
   \   000000   A2E22203     XOR.W   #0x4, &0x322
     35           ISR_COUNT++;
   \   000004   9253....     ADD.W   #0x1, &ISR_COUNT
     36           TA0CCR0 += TA0CCR0_INTERVAL; // Add Offset to TACCR0
   \   000008   B25010275203 ADD.W   #0x2710, &0x352
     37           if(ISR_COUNT>FIVE_SECONDS){
   \   00000E   B290FC00.... CMP.W   #0xfc, &ISR_COUNT
   \   000014   0238         JL      ??Timer0_A0_ISR_0
     38             ISR_COUNT = ZERO;
   \   000016   8243....     MOV.W   #0x0, &ISR_COUNT
     39           }
     40          }
   \                     ??Timer0_A0_ISR_0:
   \   00001A   0013         RETI
   \   00001C                REQUIRE _A_PJOUT_L
   \   00001C                REQUIRE TA0CCR0

   \                                 In  segment INTVEC, offset 0x5a, root
   \                     `??Timer0_A0_ISR::??INTVEC 90`:
   \   00005A   ....         DC16    Timer0_A0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Timer0_A0_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  TA0CCR0
      28  Timer0_A0_ISR
       2  Timer0_A0_ISR::??INTVEC 90
       2  _A_PJOUT_L

 
  4 bytes in segment DATA16_AN
  2 bytes in segment INTVEC
 28 bytes in segment ISR_CODE
 
 28 bytes of CODE  memory
  0 bytes of CONST memory (+ 2 bytes shared)
  0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
