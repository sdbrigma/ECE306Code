###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           01/Nov/2015  23:34:27
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\triangle.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\triangle.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\List\triangle.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\Obj\triangle.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\triangle.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file is used to implement a triangle shape during runtime
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          

   \                                 In  segment CODE, align 2
     18          void Triangle_Drive(void){
   \                     Triangle_Drive:
   \   000000   0A12         PUSH.W  R10
     19          //******************************************************************************
     20          //
     21          //  Description: This file is used to implement a triangle shape during runtime
     22          //
     23          //
     24          //  Christopher Woedy
     25          //  Sept 2015
     26          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     27          //
     28          // Globals: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
     29          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4, Time_Sequence,
     30          //
     31          //
     32          // Passed: 
     33          //
     34          // Local: i
     35          //
     36          // Return: VOID
     37          //
     38          //****************************************************************************** 
     39            
     40          	// Display GUI
     41          	  display_1 = "Triangle";
   \   000002   B240........ MOV.W   #`?<Constant "Triangle">`, &display_1
     42                posL1 = LINE_POS_L1;
   \   000008   D243....     MOV.B   #0x1, &posL1
     43                display_2 = "Is Being";
   \   00000C   B240........ MOV.W   #`?<Constant "Is Being">`, &display_2
     44                posL2 = LINE_POS_L1;
   \   000012   D243....     MOV.B   #0x1, &posL2
     45                display_3 = "Made!";
   \   000016   B240........ MOV.W   #`?<Constant "Made!">`, &display_3
     46                posL3 = LINE_POS_L3;
   \   00001C   F2400300.... MOV.B   #0x3, &posL3
     47                display_4 =  "3Angle: 1";
   \   000022   B240........ MOV.W   #`?<Constant "3Angle: 1">`, &display_4
     48                posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
     49                
     50          	// Initialize
     51                Time_Sequence = INITIAL;
   \   00002C   8243....     MOV.W   #0x0, &Time_Sequence
     52                Right_Forward_Off();
   \   000030   ........     CALLA   #Right_Forward_Off
     53                Left_Forward_Off();
   \   000034   ........     CALLA   #Left_Forward_Off
     54                int i = INITIAL;
   \   000038   0A43         MOV.W   #0x0, R10
     55                Display_Process();
   \   00003A   ........     CALLA   #Display_Process
     56          
     57              // First Triangle  
     58            while(i < TRI_STRGHT) {                            
   \                     ??Triangle_Drive_0:
   \   00003E   3A901700     CMP.W   #0x17, R10
   \   000042   0C34         JGE     ??Triangle_Drive_12
     59                
     60                Left_Forward_On(MOTOR_ENABLE);
   \   000044   1C43         MOV.W   #0x1, R12
   \   000046   ........     CALLA   #Left_Forward_On
     61                Left_Forward_Off();
   \   00004A   ........     CALLA   #Left_Forward_Off
     62                Right_Forward_On(MOTOR_ENABLE);
   \   00004E   1C43         MOV.W   #0x1, R12
   \   000050   ........     CALLA   #Right_Forward_On
     63                Right_Forward_Off();
   \   000054   ........     CALLA   #Right_Forward_Off
     64                i++;
   \   000058   1A53         ADD.W   #0x1, R10
   \   00005A   F13F         JMP     ??Triangle_Drive_0
     65          
     66              }
     67          
     68            i = INITIAL;
   \                     ??Triangle_Drive_12:
   \   00005C   0A43         MOV.W   #0x0, R10
     69                
     70            while(i < TRI_TURN1) {                         
   \                     ??Triangle_Drive_1:
   \   00005E   3A903900     CMP.W   #0x39, R10
   \   000062   0934         JGE     ??Triangle_Drive_13
     71                
     72                Left_Forward_On(MOTOR_ENABLE);
   \   000064   1C43         MOV.W   #0x1, R12
   \   000066   ........     CALLA   #Left_Forward_On
     73                Left_Forward_Off();
   \   00006A   ........     CALLA   #Left_Forward_Off
     74                Right_Forward_Off();
   \   00006E   ........     CALLA   #Right_Forward_Off
     75                i++;
   \   000072   1A53         ADD.W   #0x1, R10
   \   000074   F43F         JMP     ??Triangle_Drive_1
     76          
     77              }
     78          
     79            i = INITIAL;    
   \                     ??Triangle_Drive_13:
   \   000076   0A43         MOV.W   #0x0, R10
     80            
     81            while(i < TRI_STRGHT) {     
   \                     ??Triangle_Drive_2:
   \   000078   3A901700     CMP.W   #0x17, R10
   \   00007C   0C34         JGE     ??Triangle_Drive_14
     82                
     83                Left_Forward_On(MOTOR_ENABLE);
   \   00007E   1C43         MOV.W   #0x1, R12
   \   000080   ........     CALLA   #Left_Forward_On
     84                Left_Forward_Off();
   \   000084   ........     CALLA   #Left_Forward_Off
     85                Right_Forward_On(MOTOR_ENABLE);
   \   000088   1C43         MOV.W   #0x1, R12
   \   00008A   ........     CALLA   #Right_Forward_On
     86                Right_Forward_Off();
   \   00008E   ........     CALLA   #Right_Forward_Off
     87                i++;
   \   000092   1A53         ADD.W   #0x1, R10
   \   000094   F13F         JMP     ??Triangle_Drive_2
     88          
     89              }
     90          
     91            i = INITIAL;
   \                     ??Triangle_Drive_14:
   \   000096   0A43         MOV.W   #0x0, R10
     92            
     93            while(i < TRI_TURN2) {       
   \                     ??Triangle_Drive_3:
   \   000098   3A902C00     CMP.W   #0x2c, R10
   \   00009C   0934         JGE     ??Triangle_Drive_15
     94                
     95                Left_Forward_On(MOTOR_ENABLE);
   \   00009E   1C43         MOV.W   #0x1, R12
   \   0000A0   ........     CALLA   #Left_Forward_On
     96                Left_Forward_Off();
   \   0000A4   ........     CALLA   #Left_Forward_Off
     97                Right_Forward_Off();
   \   0000A8   ........     CALLA   #Right_Forward_Off
     98                i++;
   \   0000AC   1A53         ADD.W   #0x1, R10
   \   0000AE   F43F         JMP     ??Triangle_Drive_3
     99          
    100              }
    101          
    102            i = INITIAL;    
   \                     ??Triangle_Drive_15:
   \   0000B0   0A43         MOV.W   #0x0, R10
    103            
    104            while(i < TRI_STRGHT) {       
   \                     ??Triangle_Drive_4:
   \   0000B2   3A901700     CMP.W   #0x17, R10
   \   0000B6   0C34         JGE     ??Triangle_Drive_16
    105                
    106                Left_Forward_On(MOTOR_ENABLE);
   \   0000B8   1C43         MOV.W   #0x1, R12
   \   0000BA   ........     CALLA   #Left_Forward_On
    107                Left_Forward_Off();
   \   0000BE   ........     CALLA   #Left_Forward_Off
    108                Right_Forward_On(MOTOR_ENABLE);
   \   0000C2   1C43         MOV.W   #0x1, R12
   \   0000C4   ........     CALLA   #Right_Forward_On
    109                Right_Forward_Off();
   \   0000C8   ........     CALLA   #Right_Forward_Off
    110                i++;
   \   0000CC   1A53         ADD.W   #0x1, R10
   \   0000CE   F13F         JMP     ??Triangle_Drive_4
    111          
    112              }
    113          
    114            i = INITIAL;
   \                     ??Triangle_Drive_16:
   \   0000D0   0A43         MOV.W   #0x0, R10
    115            
    116             while(i < TRI_TURN2) {          
   \                     ??Triangle_Drive_5:
   \   0000D2   3A902C00     CMP.W   #0x2c, R10
   \   0000D6   0934         JGE     ??Triangle_Drive_17
    117                
    118                Left_Forward_On(MOTOR_ENABLE);
   \   0000D8   1C43         MOV.W   #0x1, R12
   \   0000DA   ........     CALLA   #Left_Forward_On
    119                Left_Forward_Off();
   \   0000DE   ........     CALLA   #Left_Forward_Off
    120                Right_Forward_Off();
   \   0000E2   ........     CALLA   #Right_Forward_Off
    121                i++;
   \   0000E6   1A53         ADD.W   #0x1, R10
   \   0000E8   F43F         JMP     ??Triangle_Drive_5
    122          
    123              }
    124          
    125            i = INITIAL; 
   \                     ??Triangle_Drive_17:
   \   0000EA   0A43         MOV.W   #0x0, R10
    126          
    127            
    128          	// Pause
    129                display_4 =  "  WAIT...";
   \   0000EC   B240........ MOV.W   #`?<Constant "  WAIT...">`, &display_4
    130                Display_Process();
   \   0000F2   ........     CALLA   #Display_Process
    131                Right_Forward_Off();
   \   0000F6   ........     CALLA   #Right_Forward_Off
    132                Left_Forward_Off();
   \   0000FA   ........     CALLA   #Left_Forward_Off
    133                i = INITIAL;
   \   0000FE   0A43         MOV.W   #0x0, R10
    134                Five_msec_Delay(BIG_DELAY);
   \   000100   3C403200     MOV.W   #0x32, R12
   \   000104   ........     CALLA   #Five_msec_Delay
    135                Time_Sequence = INITIAL;
   \   000108   8243....     MOV.W   #0x0, &Time_Sequence
    136                display_4 =  "3Angle: 2";
   \   00010C   B240........ MOV.W   #`?<Constant "3Angle: 2">`, &display_4
    137                Display_Process();
   \   000112   ........     CALLA   #Display_Process
    138          
    139          	  
    140          	// Second Triangle
    141            while(i < TRI_STRGHT) {                            
   \                     ??Triangle_Drive_6:
   \   000116   3A901700     CMP.W   #0x17, R10
   \   00011A   0C34         JGE     ??Triangle_Drive_18
    142                
    143                Left_Forward_On(MOTOR_ENABLE);
   \   00011C   1C43         MOV.W   #0x1, R12
   \   00011E   ........     CALLA   #Left_Forward_On
    144                Left_Forward_Off();
   \   000122   ........     CALLA   #Left_Forward_Off
    145                Right_Forward_On(MOTOR_ENABLE);
   \   000126   1C43         MOV.W   #0x1, R12
   \   000128   ........     CALLA   #Right_Forward_On
    146                Right_Forward_Off();
   \   00012C   ........     CALLA   #Right_Forward_Off
    147                i++;
   \   000130   1A53         ADD.W   #0x1, R10
   \   000132   F13F         JMP     ??Triangle_Drive_6
    148          
    149              }
    150          
    151            i = INITIAL;
   \                     ??Triangle_Drive_18:
   \   000134   0A43         MOV.W   #0x0, R10
    152                
    153            while(i < TRI_TURN3) {                           
   \                     ??Triangle_Drive_7:
   \   000136   3A903600     CMP.W   #0x36, R10
   \   00013A   0934         JGE     ??Triangle_Drive_19
    154                
    155                Left_Forward_On(MOTOR_ENABLE);
   \   00013C   1C43         MOV.W   #0x1, R12
   \   00013E   ........     CALLA   #Left_Forward_On
    156                Left_Forward_Off();
   \   000142   ........     CALLA   #Left_Forward_Off
    157                Right_Forward_Off();
   \   000146   ........     CALLA   #Right_Forward_Off
    158                i++;
   \   00014A   1A53         ADD.W   #0x1, R10
   \   00014C   F43F         JMP     ??Triangle_Drive_7
    159          
    160              }
    161          
    162            i = INITIAL;    
   \                     ??Triangle_Drive_19:
   \   00014E   0A43         MOV.W   #0x0, R10
    163            
    164            while(i < TRI_STRGHT) {                          
   \                     ??Triangle_Drive_8:
   \   000150   3A901700     CMP.W   #0x17, R10
   \   000154   0C34         JGE     ??Triangle_Drive_20
    165                
    166                Left_Forward_On(MOTOR_ENABLE);
   \   000156   1C43         MOV.W   #0x1, R12
   \   000158   ........     CALLA   #Left_Forward_On
    167                Left_Forward_Off();
   \   00015C   ........     CALLA   #Left_Forward_Off
    168                Right_Forward_On(MOTOR_ENABLE);
   \   000160   1C43         MOV.W   #0x1, R12
   \   000162   ........     CALLA   #Right_Forward_On
    169                Right_Forward_Off();
   \   000166   ........     CALLA   #Right_Forward_Off
    170                i++;
   \   00016A   1A53         ADD.W   #0x1, R10
   \   00016C   F13F         JMP     ??Triangle_Drive_8
    171          
    172              }
    173          
    174            i = INITIAL;
   \                     ??Triangle_Drive_20:
   \   00016E   0A43         MOV.W   #0x0, R10
    175            
    176            while(i < TRI_TURN2) {                         
   \                     ??Triangle_Drive_9:
   \   000170   3A902C00     CMP.W   #0x2c, R10
   \   000174   0934         JGE     ??Triangle_Drive_21
    177                
    178                Left_Forward_On(MOTOR_ENABLE);
   \   000176   1C43         MOV.W   #0x1, R12
   \   000178   ........     CALLA   #Left_Forward_On
    179                Left_Forward_Off();
   \   00017C   ........     CALLA   #Left_Forward_Off
    180                Right_Forward_Off();
   \   000180   ........     CALLA   #Right_Forward_Off
    181                i++;
   \   000184   1A53         ADD.W   #0x1, R10
   \   000186   F43F         JMP     ??Triangle_Drive_9
    182          
    183              }
    184          
    185            i = INITIAL;    
   \                     ??Triangle_Drive_21:
   \   000188   0A43         MOV.W   #0x0, R10
    186            
    187            while(i < TRI_STRGHT) {                           
   \                     ??Triangle_Drive_10:
   \   00018A   3A901700     CMP.W   #0x17, R10
   \   00018E   0C34         JGE     ??Triangle_Drive_22
    188                
    189                Left_Forward_On(MOTOR_ENABLE);
   \   000190   1C43         MOV.W   #0x1, R12
   \   000192   ........     CALLA   #Left_Forward_On
    190                Left_Forward_Off();
   \   000196   ........     CALLA   #Left_Forward_Off
    191                Right_Forward_On(MOTOR_ENABLE);
   \   00019A   1C43         MOV.W   #0x1, R12
   \   00019C   ........     CALLA   #Right_Forward_On
    192                Right_Forward_Off();
   \   0001A0   ........     CALLA   #Right_Forward_Off
    193                i++;
   \   0001A4   1A53         ADD.W   #0x1, R10
   \   0001A6   F13F         JMP     ??Triangle_Drive_10
    194          
    195              }
    196          
    197            i = INITIAL;
   \                     ??Triangle_Drive_22:
   \   0001A8   0A43         MOV.W   #0x0, R10
    198            
    199             while(i < TRI_TURN2) {                         
   \                     ??Triangle_Drive_11:
   \   0001AA   3A902C00     CMP.W   #0x2c, R10
   \   0001AE   0934         JGE     ??Triangle_Drive_23
    200                
    201                Left_Forward_On(MOTOR_ENABLE);
   \   0001B0   1C43         MOV.W   #0x1, R12
   \   0001B2   ........     CALLA   #Left_Forward_On
    202                Left_Forward_Off();
   \   0001B6   ........     CALLA   #Left_Forward_Off
    203                Right_Forward_Off();
   \   0001BA   ........     CALLA   #Right_Forward_Off
    204                i++;
   \   0001BE   1A53         ADD.W   #0x1, R10
   \   0001C0   F43F         JMP     ??Triangle_Drive_11
    205          
    206              }
    207          
    208            i = INITIAL;
   \                     ??Triangle_Drive_23:
   \   0001C2   0A43         MOV.W   #0x0, R10
    209            
    210          
    211          	// Finalize function
    212                Time_Sequence = INITIAL;
   \   0001C4   8243....     MOV.W   #0x0, &Time_Sequence
    213                Right_Forward_Off();
   \   0001C8   ........     CALLA   #Right_Forward_Off
    214                Left_Forward_Off();
   \   0001CC   ........     CALLA   #Left_Forward_Off
    215                
    216                display_1 = "Triangle";
   \   0001D0   B240........ MOV.W   #`?<Constant "Triangle">`, &display_1
    217                posL1 = LINE_POS_L2;
   \   0001D6   E243....     MOV.B   #0x2, &posL1
    218                display_2 = "Complete!";
   \   0001DA   B240........ MOV.W   #`?<Constant "Complete!">`, &display_2
    219                posL2 = LINE_POS_L1;
   \   0001E0   D243....     MOV.B   #0x1, &posL2
    220                display_3 = "Push";
   \   0001E4   B240........ MOV.W   #`?<Constant "Push">`, &display_3
    221                posL3 = LINE_POS_L3;
   \   0001EA   F2400300.... MOV.B   #0x3, &posL3
    222                display_4 =  "Select";
   \   0001F0   B240........ MOV.W   #`?<Constant "Select">`, &display_4
    223                posL4 = LINE_POS_L2;
   \   0001F6   E243....     MOV.B   #0x2, &posL4
    224            
    225          }
   \   0001FA   3A41         POP.W   R10
   \   0001FC   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Triangle">`:
   \   000000   547269616E67 DC8 "Triangle"
   \            6C6500      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Is Being">`:
   \   000000   497320426569 DC8 "Is Being"
   \            6E6700      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Made!">`:
   \   000000   4D6164652100 DC8 "Made!"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "3Angle: 1">`:
   \   000000   33416E676C65 DC8 "3Angle: 1"
   \            3A203100    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  WAIT...">`:
   \   000000   202057414954 DC8 "  WAIT..."
   \            2E2E2E00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "3Angle: 2">`:
   \   000000   33416E676C65 DC8 "3Angle: 2"
   \            3A203200    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Complete!">`:
   \   000000   436F6D706C65 DC8 "Complete!"
   \            74652100    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Push">`:
   \   000000   5075736800   DC8 "Push"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Select">`:
   \   000000   53656C656374 DC8 "Select"
   \            00          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Triangle_Drive
        6   -> Display_Process
        6   -> Five_msec_Delay
        6   -> Left_Forward_Off
        6   -> Left_Forward_On
        6   -> Right_Forward_Off
        6   -> Right_Forward_On


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "  WAIT...">
      10  ?<Constant "3Angle: 1">
      10  ?<Constant "3Angle: 2">
      10  ?<Constant "Complete!">
       9  ?<Constant "Is Being">
       6  ?<Constant "Made!">
       5  ?<Constant "Push">
       7  ?<Constant "Select">
       9  ?<Constant "Triangle">
     510  Triangle_Drive

 
 510 bytes in segment CODE
  76 bytes in segment DATA16_C
 
 510 bytes of CODE  memory
  76 bytes of CONST memory

Errors: none
Warnings: none
