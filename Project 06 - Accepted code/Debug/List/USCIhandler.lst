###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  17:54:49
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\USCIhandler.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\USCIhandler.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\List\USCIhandler.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\Obj\USCIhandler.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\USCIhandler.c
      1          //******************************************************************************
      2          //
      3          //  Description: Handles eUSCI_A interrupts
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //Points to Header files for Preprocessing
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x5ec
   \   union <unnamed> _A_UCA1RXBUF_L
   \                     _A_UCA1RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fe
   \   unsigned short volatile UCA1IV
   \                     UCA1IV:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          
     16          #pragma vector = USCI_A1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     17          __interrupt void USCI_A1_ISR(void){
   \                     USCI_A1_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
   \   000002   2183         SUB.W   #0x2, SP
     18          //******************************************************************************
     19          //
     20          //  Description: Handles eUSCI_A interrupts
     21          //
     22          //
     23          //  Christopher Woedy
     24          //  Sept 2015
     25          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     26          //
     27          // Globals: txRead RX_Char[WORD_LENGTH], TX_Char[WORD_LENGTH]
     28          //
     29          // Passed:
     30          //
     31          // Local: temp
     32          //
     33          // Return: VOID
     34          //
     35          //****************************************************************************** 
     36                  unsigned volatile int temp = INITIAL;
   \   000004   81430000     MOV.W   #0x0, 0(SP)
     37          	switch(__even_in_range(UCA1IV, USCI_val8)) {
   \   000008   1F42FE05     MOV.W   &0x5fe, R15
   \   00000C   E00F         ADDA    R15, PC
   \                     `?<Jumptable for USCI_A1_ISR>_0`:
   \   00000E   183C         JMP     ??USCI_A1_ISR_2
   \   000010   033C         JMP     ??USCI_A1_ISR_3
   \   000012   163C         JMP     ??USCI_A1_ISR_2
   \   000014   153C         JMP     ??USCI_A1_ISR_2
   \   000016   143C         JMP     ??USCI_A1_ISR_2
     38          		case SW_SEL_0:		//Vector 0 - No Interrupt
     39          			break;
     40          		case SW_SEL_2:		// Vector 2 - RXIFG
     41          			// Code for Receive
     42                                  temp = rxRead;
   \                     ??USCI_A1_ISR_3:
   \   000018   9142....0000 MOV.W   &rxRead, 0(SP)
     43                                  receiveEnable = TRUE;
   \   00001E   D243....     MOV.B   #0x1, &receiveEnable
     44                                  RX_Char[rxRead] =  UCA1RXBUF;                        
                                         ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   000022   1F42....     MOV.W   &rxRead, R15
   \   000026   1E42EC05     MOV.W   &0x5ec, R14
   \   00002A   CF4E....     MOV.B   R14, RX_Char(R15)
     45                                  if (++rxRead >= (SW_SEL_2)) {
   \   00002E   1F42....     MOV.W   &rxRead, R15
   \   000032   1F53         ADD.W   #0x1, R15
   \   000034   824F....     MOV.W   R15, &rxRead
   \   000038   2F93         CMP.W   #0x2, R15
   \   00003A   0228         JNC     ??USCI_A1_ISR_2
     46                                    rxRead = INITIAL;
   \   00003C   8243....     MOV.W   #0x0, &rxRead
     47                                  }
     48          			break;
     49          		case SW_SEL_4:		// Vector 4 - TXIFG
     50          			// Code for Transmit
     51          			break;
     52          		default: break;
     53          	}
     54          
     55          }
   \                     ??USCI_A1_ISR_2:
   \   000040   2153         ADD.W   #0x2, SP
   \   000042   1E17         POPM.W  #0x2, R15
   \   000044   0013         RETI
   \   000046                REQUIRE _A_UCA1RXBUF_L
   \   000046                REQUIRE UCA1IV

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??USCI_A1_ISR::??INTVEC 86`:
   \   000056   ....         DC16    USCI_A1_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     10   USCI_A1_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  UCA1IV
      70  USCI_A1_ISR
       2  USCI_A1_ISR::??INTVEC 86
       2  _A_UCA1RXBUF_L

 
  4 bytes in segment DATA16_AN
  2 bytes in segment INTVEC
 70 bytes in segment ISR_CODE
 
 70 bytes of CODE  memory
  0 bytes of CONST memory (+ 2 bytes shared)
  0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: 1
