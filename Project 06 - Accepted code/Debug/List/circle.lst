###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           01/Nov/2015  23:34:23
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\circle.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\circle.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\List\circle.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\circle.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\circle.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file is used to implement a circle shape during runtime
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          

   \                                 In  segment CODE, align 2
     18          void Circle_Drive(void){
   \                     Circle_Drive:
     19          //******************************************************************************
     20          //
     21          //  Description: This file is used to implement a circle shape during runtime
     22          //
     23          //
     24          //  Christopher Woedy
     25          //  Sept 2015
     26          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     27          //
     28          // Globals: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
     29          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4, Time_Sequence,
     30          //
     31          //
     32          // Passed: 
     33          //
     34          // Local:
     35          //
     36          // Return: VOID
     37          //
     38          //****************************************************************************** 
     39            
     40          	// Display GUI
     41                display_1 = "A Circle";
   \   000000   B240........ MOV.W   #`?<Constant "A Circle">`, &display_1
     42                posL1 = LINE_POS_L1;
   \   000006   D243....     MOV.B   #0x1, &posL1
     43                display_2 = "Is Being";
   \   00000A   B240........ MOV.W   #`?<Constant "Is Being">`, &display_2
     44                posL2 = LINE_POS_L1;
   \   000010   D243....     MOV.B   #0x1, &posL2
     45                display_3 = "Made!";
   \   000014   B240........ MOV.W   #`?<Constant "Made!">`, &display_3
     46                posL3 = LINE_POS_L3;
   \   00001A   F2400300.... MOV.B   #0x3, &posL3
     47                display_4 =  "Circle: 1";
   \   000020   B240........ MOV.W   #`?<Constant "Circle: 1">`, &display_4
     48                posL4 = LINE_POS_L0;
   \   000026   C243....     MOV.B   #0x0, &posL4
     49                Display_Process();
   \   00002A   ........     CALLA   #Display_Process
     50                
     51          	// Initialize
     52                Right_Forward_Off();
   \   00002E   ........     CALLA   #Right_Forward_Off
     53                Left_Forward_Off();
   \   000032   ........     CALLA   #Left_Forward_Off
     54                Right_Reverse_Off();
   \   000036   ........     CALLA   #Right_Reverse_Off
     55                Left_Reverse_Off();
   \   00003A   ........     CALLA   #Left_Reverse_Off
     56                Time_Sequence = INITIAL;
   \   00003E   8243....     MOV.W   #0x0, &Time_Sequence
     57                A0_time_count = INITIAL;
   \   000042   8243....     MOV.W   #0x0, &A0_time_count
     58          
     59                
     60              // Forward  
     61                
     62            while(A0_time_count <= C_TWO_SEC_COUNT) {                            
   \                     ??Circle_Drive_0:
   \   000046   B290C509.... CMP.W   #0x9c5, &A0_time_count
   \   00004C   0C2C         JC      ??Circle_Drive_3
     63                
     64                Left_Forward_On(MOTOR_ENABLE);
   \   00004E   1C43         MOV.W   #0x1, R12
   \   000050   ........     CALLA   #Left_Forward_On
     65                Left_Forward_Off();
   \   000054   ........     CALLA   #Left_Forward_Off
     66                Right_Forward_On(CIRCLE_LEFT);
   \   000058   3C400600     MOV.W   #0x6, R12
   \   00005C   ........     CALLA   #Right_Forward_On
     67                Right_Forward_Off();
   \   000060   ........     CALLA   #Right_Forward_Off
   \   000064   F03F         JMP     ??Circle_Drive_0
     68          
     69              }
     70            
     71                // Pause
     72                display_4 =  "  WAIT...";
   \                     ??Circle_Drive_3:
   \   000066   B240........ MOV.W   #`?<Constant "  WAIT...">`, &display_4
     73                Display_Process();
   \   00006C   ........     CALLA   #Display_Process
     74                Right_Forward_Off();
   \   000070   ........     CALLA   #Right_Forward_Off
     75                Left_Forward_Off();
   \   000074   ........     CALLA   #Left_Forward_Off
     76                Time_Sequence = INITIAL;
   \   000078   8243....     MOV.W   #0x0, &Time_Sequence
     77                A0_time_count = INITIAL;
   \   00007C   8243....     MOV.W   #0x0, &A0_time_count
     78                
     79            while(A0_time_count <= C_ONE_SEC_COUNT) {                            
   \                     ??Circle_Drive_1:
   \   000080   B290E903.... CMP.W   #0x3e9, &A0_time_count
   \   000086   092C         JC      ??Circle_Drive_4
     80                
     81                Right_Forward_Off();
   \   000088   ........     CALLA   #Right_Forward_Off
     82                Left_Forward_Off();
   \   00008C   ........     CALLA   #Left_Forward_Off
     83                Right_Reverse_Off();
   \   000090   ........     CALLA   #Right_Reverse_Off
     84                Left_Reverse_Off();
   \   000094   ........     CALLA   #Left_Reverse_Off
   \   000098   F33F         JMP     ??Circle_Drive_1
     85              }  
     86            
     87          
     88                // Circle 2  
     89                display_4 =  "Circle: 2";
   \                     ??Circle_Drive_4:
   \   00009A   B240........ MOV.W   #`?<Constant "Circle: 2">`, &display_4
     90                Display_Process();
   \   0000A0   ........     CALLA   #Display_Process
     91                Time_Sequence = INITIAL;
   \   0000A4   8243....     MOV.W   #0x0, &Time_Sequence
     92                A0_time_count = INITIAL;    
   \   0000A8   8243....     MOV.W   #0x0, &A0_time_count
     93            
     94            while(A0_time_count <= C_TWO_SEC_COUNT) {                            
   \                     ??Circle_Drive_2:
   \   0000AC   B290C509.... CMP.W   #0x9c5, &A0_time_count
   \   0000B2   0C2C         JC      ??Circle_Drive_5
     95                
     96                Left_Forward_On(MOTOR_ENABLE);
   \   0000B4   1C43         MOV.W   #0x1, R12
   \   0000B6   ........     CALLA   #Left_Forward_On
     97                Left_Forward_Off();
   \   0000BA   ........     CALLA   #Left_Forward_Off
     98                Right_Forward_On(CIRCLE_LEFT);
   \   0000BE   3C400600     MOV.W   #0x6, R12
   \   0000C2   ........     CALLA   #Right_Forward_On
     99                Right_Forward_Off();
   \   0000C6   ........     CALLA   #Right_Forward_Off
   \   0000CA   F03F         JMP     ??Circle_Drive_2
    100          
    101              }
    102          
    103            
    104          	// Finalize Function
    105                Time_Sequence = INITIAL;
   \                     ??Circle_Drive_5:
   \   0000CC   8243....     MOV.W   #0x0, &Time_Sequence
    106                A0_time_count = INITIAL; 
   \   0000D0   8243....     MOV.W   #0x0, &A0_time_count
    107                Right_Forward_Off();
   \   0000D4   ........     CALLA   #Right_Forward_Off
    108                Left_Forward_Off();
   \   0000D8   ........     CALLA   #Left_Forward_Off
    109                
    110                display_1 = "Circle";
   \   0000DC   B240........ MOV.W   #`?<Constant "Circle">`, &display_1
    111                posL1 = LINE_POS_L2;
   \   0000E2   E243....     MOV.B   #0x2, &posL1
    112                display_2 = "Complete!";
   \   0000E6   B240........ MOV.W   #`?<Constant "Complete!">`, &display_2
    113                posL2 = LINE_POS_L1;
   \   0000EC   D243....     MOV.B   #0x1, &posL2
    114                display_3 = "Push";
   \   0000F0   B240........ MOV.W   #`?<Constant "Push">`, &display_3
    115                posL3 = LINE_POS_L3;
   \   0000F6   F2400300.... MOV.B   #0x3, &posL3
    116                display_4 =  "Select";
   \   0000FC   B240........ MOV.W   #`?<Constant "Select">`, &display_4
    117                posL4 = LINE_POS_L2;
   \   000102   E243....     MOV.B   #0x2, &posL4
    118                Display_Process();
   \   000106   ........     BRA     #Display_Process
    119                
    120          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "A Circle">`:
   \   000000   412043697263 DC8 "A Circle"
   \            6C6500      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Is Being">`:
   \   000000   497320426569 DC8 "Is Being"
   \            6E6700      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Made!">`:
   \   000000   4D6164652100 DC8 "Made!"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Circle: 1">`:
   \   000000   436972636C65 DC8 "Circle: 1"
   \            3A203100    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  WAIT...">`:
   \   000000   202057414954 DC8 "  WAIT..."
   \            2E2E2E00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Circle: 2">`:
   \   000000   436972636C65 DC8 "Circle: 2"
   \            3A203200    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Circle">`:
   \   000000   436972636C65 DC8 "Circle"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Complete!">`:
   \   000000   436F6D706C65 DC8 "Complete!"
   \            74652100    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Push">`:
   \   000000   5075736800   DC8 "Push"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Select">`:
   \   000000   53656C656374 DC8 "Select"
   \            00          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Circle_Drive
        0   -> Display_Process
        4   -> Display_Process
        4   -> Left_Forward_Off
        4   -> Left_Forward_On
        4   -> Left_Reverse_Off
        4   -> Right_Forward_Off
        4   -> Right_Forward_On
        4   -> Right_Reverse_Off


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "  WAIT...">
       9  ?<Constant "A Circle">
       7  ?<Constant "Circle">
      10  ?<Constant "Circle: 1">
      10  ?<Constant "Circle: 2">
      10  ?<Constant "Complete!">
       9  ?<Constant "Is Being">
       6  ?<Constant "Made!">
       5  ?<Constant "Push">
       7  ?<Constant "Select">
     266  Circle_Drive

 
 266 bytes in segment CODE
  83 bytes in segment DATA16_C
 
 266 bytes of CODE  memory
  83 bytes of CONST memory

Errors: none
Warnings: none
