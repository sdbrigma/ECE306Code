###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           01/Nov/2015  23:34:23
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\figure8.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\figure8.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\List\figure8.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\Obj\figure8.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\figure8.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file is used to implement a figure 8 shape during runtime
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          

   \                                 In  segment CODE, align 2
     18          void Figure8_Drive(void){
   \                     Figure8_Drive:
   \   000000   0A12         PUSH.W  R10
     19          //******************************************************************************
     20          //
     21          //  Description: This file is used to implement a figure 8 shape during runtime
     22          //
     23          //
     24          //  Christopher Woedy
     25          //  Sept 2015
     26          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     27          //
     28          // Globals: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
     29          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4, Time_Sequence,
     30          // circle_timer,
     31          //
     32          // Passed: 
     33          //
     34          // Local: i
     35          //
     36          // Return: VOID
     37          //
     38          //****************************************************************************** 
     39          	
     40          	// Display UI
     41                display_1 = "A Fig. 8";
   \   000002   B240........ MOV.W   #`?<Constant "A Fig. 8">`, &display_1
     42                posL1 = LINE_POS_L1;
   \   000008   D243....     MOV.B   #0x1, &posL1
     43                display_2 = "Is Being";
   \   00000C   B240........ MOV.W   #`?<Constant "Is Being">`, &display_2
     44                posL2 = LINE_POS_L1;
   \   000012   D243....     MOV.B   #0x1, &posL2
     45                display_3 = "Made!";
   \   000016   B240........ MOV.W   #`?<Constant "Made!">`, &display_3
     46                posL3 = LINE_POS_L3;
   \   00001C   F2400300.... MOV.B   #0x3, &posL3
     47                display_4 =  "Fig 8.: 1";
   \   000022   B240........ MOV.W   #`?<Constant "Fig 8.: 1">`, &display_4
     48                posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
     49                
     50          	// Initialize
     51                Time_Sequence = INITIAL;
   \   00002C   8243....     MOV.W   #0x0, &Time_Sequence
     52                Left_Forward_Off();
   \   000030   ........     CALLA   #Left_Forward_Off
     53                Right_Forward_Off();
   \   000034   ........     CALLA   #Right_Forward_Off
     54                int i = INITIAL;
   \   000038   0A43         MOV.W   #0x0, R10
     55                Display_Process();
   \   00003A   ........     CALLA   #Display_Process
     56          
     57          // First Figure 8
     58           while(i < FIG8_STEP1) {                            
   \                     ??Figure8_Drive_0:
   \   00003E   3A901700     CMP.W   #0x17, R10
   \   000042   0D34         JGE     ??Figure8_Drive_6
     59                
     60                Left_Forward_On(CIRCLE_LEFT);
   \   000044   3C400600     MOV.W   #0x6, R12
   \   000048   ........     CALLA   #Left_Forward_On
     61                Left_Forward_Off();
   \   00004C   ........     CALLA   #Left_Forward_Off
     62                Right_Forward_On(MOTOR_ENABLE);
   \   000050   1C43         MOV.W   #0x1, R12
   \   000052   ........     CALLA   #Right_Forward_On
     63                Right_Forward_Off();
   \   000056   ........     CALLA   #Right_Forward_Off
     64                i++;
   \   00005A   1A53         ADD.W   #0x1, R10
   \   00005C   F03F         JMP     ??Figure8_Drive_0
     65          
     66              }
     67          
     68           i = INITIAL;
   \                     ??Figure8_Drive_6:
   \   00005E   0A43         MOV.W   #0x0, R10
     69                
     70            while(i < FIG8_STEP2) {                            
   \                     ??Figure8_Drive_1:
   \   000060   3A900F00     CMP.W   #0xf, R10
   \   000064   0C34         JGE     ??Figure8_Drive_7
     71                
     72                Right_Forward_On(CIRCLE_RIGHT);
   \   000066   3C42         MOV.W   #0x8, R12
   \   000068   ........     CALLA   #Right_Forward_On
     73                Right_Forward_Off();
   \   00006C   ........     CALLA   #Right_Forward_Off
     74                Left_Forward_On(MOTOR_ENABLE);
   \   000070   1C43         MOV.W   #0x1, R12
   \   000072   ........     CALLA   #Left_Forward_On
     75                Left_Forward_Off();
   \   000076   ........     CALLA   #Left_Forward_Off
     76                i++;
   \   00007A   1A53         ADD.W   #0x1, R10
   \   00007C   F13F         JMP     ??Figure8_Drive_1
     77                
     78              }
     79            
     80            i = INITIAL;
   \                     ??Figure8_Drive_7:
   \   00007E   0A43         MOV.W   #0x0, R10
     81          
     82            while(i < FIG8_STEP3) {                            
   \                     ??Figure8_Drive_2:
   \   000080   3A900F00     CMP.W   #0xf, R10
   \   000084   0C34         JGE     ??Figure8_Drive_8
     83                
     84                Right_Forward_On(MOTOR_ENABLE);
   \   000086   1C43         MOV.W   #0x1, R12
   \   000088   ........     CALLA   #Right_Forward_On
     85                Right_Forward_Off();
   \   00008C   ........     CALLA   #Right_Forward_Off
     86                Left_Forward_On(MOTOR_ENABLE);
   \   000090   1C43         MOV.W   #0x1, R12
   \   000092   ........     CALLA   #Left_Forward_On
     87                Left_Forward_Off();
   \   000096   ........     CALLA   #Left_Forward_Off
     88                i++;
   \   00009A   1A53         ADD.W   #0x1, R10
   \   00009C   F13F         JMP     ??Figure8_Drive_2
     89                
     90              }
     91            
     92            i = INITIAL;
   \                     ??Figure8_Drive_8:
   \   00009E   0A43         MOV.W   #0x0, R10
     93            
     94          	// Pause
     95                display_4 =  "  WAIT...";
   \   0000A0   B240........ MOV.W   #`?<Constant "  WAIT...">`, &display_4
     96                Display_Process();
   \   0000A6   ........     CALLA   #Display_Process
     97                Left_Forward_Off();
   \   0000AA   ........     CALLA   #Left_Forward_Off
     98                Right_Forward_Off();
   \   0000AE   ........     CALLA   #Right_Forward_Off
     99                Five_msec_Delay(BIG_DELAY);
   \   0000B2   3C403200     MOV.W   #0x32, R12
   \   0000B6   ........     CALLA   #Five_msec_Delay
    100                Time_Sequence = INITIAL;
   \   0000BA   8243....     MOV.W   #0x0, &Time_Sequence
    101                display_4 =  "Fig 8.: 2";
   \   0000BE   B240........ MOV.W   #`?<Constant "Fig 8.: 2">`, &display_4
    102                Display_Process();
   \   0000C4   ........     CALLA   #Display_Process
    103          
    104          	  
    105          	// Second Figure 8
    106           while(i < FIG8_STEP4) {                            
   \                     ??Figure8_Drive_3:
   \   0000C8   3A901300     CMP.W   #0x13, R10
   \   0000CC   0D34         JGE     ??Figure8_Drive_9
    107                
    108                Left_Forward_On(CIRCLE_LEFT);
   \   0000CE   3C400600     MOV.W   #0x6, R12
   \   0000D2   ........     CALLA   #Left_Forward_On
    109                Left_Forward_Off();
   \   0000D6   ........     CALLA   #Left_Forward_Off
    110                Right_Forward_On(MOTOR_ENABLE);
   \   0000DA   1C43         MOV.W   #0x1, R12
   \   0000DC   ........     CALLA   #Right_Forward_On
    111                Right_Forward_Off();
   \   0000E0   ........     CALLA   #Right_Forward_Off
    112                i++;
   \   0000E4   1A53         ADD.W   #0x1, R10
   \   0000E6   F03F         JMP     ??Figure8_Drive_3
    113          
    114              }
    115          
    116           i = INITIAL;
   \                     ??Figure8_Drive_9:
   \   0000E8   0A43         MOV.W   #0x0, R10
    117                
    118            while(i < FIG8_STEP5) {                            
   \                     ??Figure8_Drive_4:
   \   0000EA   3A900F00     CMP.W   #0xf, R10
   \   0000EE   0C34         JGE     ??Figure8_Drive_10
    119                
    120                Right_Forward_On(CIRCLE_RIGHT);
   \   0000F0   3C42         MOV.W   #0x8, R12
   \   0000F2   ........     CALLA   #Right_Forward_On
    121                Right_Forward_Off();
   \   0000F6   ........     CALLA   #Right_Forward_Off
    122                Left_Forward_On(MOTOR_ENABLE);
   \   0000FA   1C43         MOV.W   #0x1, R12
   \   0000FC   ........     CALLA   #Left_Forward_On
    123                Left_Forward_Off();
   \   000100   ........     CALLA   #Left_Forward_Off
    124                i++;
   \   000104   1A53         ADD.W   #0x1, R10
   \   000106   F13F         JMP     ??Figure8_Drive_4
    125                
    126              }
    127          
    128            i = INITIAL;
   \                     ??Figure8_Drive_10:
   \   000108   0A43         MOV.W   #0x0, R10
    129          
    130            while(i < FIG8_STEP6) {                            
   \                     ??Figure8_Drive_5:
   \   00010A   3A900A00     CMP.W   #0xa, R10
   \   00010E   0C34         JGE     ??Figure8_Drive_11
    131                
    132                Right_Forward_On(MOTOR_ENABLE);
   \   000110   1C43         MOV.W   #0x1, R12
   \   000112   ........     CALLA   #Right_Forward_On
    133                Right_Forward_Off();
   \   000116   ........     CALLA   #Right_Forward_Off
    134                Left_Forward_On(MOTOR_ENABLE);
   \   00011A   1C43         MOV.W   #0x1, R12
   \   00011C   ........     CALLA   #Left_Forward_On
    135                Left_Forward_Off();
   \   000120   ........     CALLA   #Left_Forward_Off
    136                i++;
   \   000124   1A53         ADD.W   #0x1, R10
   \   000126   F13F         JMP     ??Figure8_Drive_5
    137                
    138              }
    139            
    140            i = INITIAL;
   \                     ??Figure8_Drive_11:
   \   000128   0A43         MOV.W   #0x0, R10
    141            
    142          	// Finalize function
    143                Right_Forward_Off();
   \   00012A   ........     CALLA   #Right_Forward_Off
    144                Left_Forward_Off();
   \   00012E   ........     CALLA   #Left_Forward_Off
    145                Time_Sequence = INITIAL;
   \   000132   8243....     MOV.W   #0x0, &Time_Sequence
    146                
    147                display_1 = "Fig. 8";
   \   000136   B240........ MOV.W   #`?<Constant "Fig. 8">`, &display_1
    148                posL1 = LINE_POS_L2;
   \   00013C   E243....     MOV.B   #0x2, &posL1
    149                display_2 = "Complete!";
   \   000140   B240........ MOV.W   #`?<Constant "Complete!">`, &display_2
    150                posL2 = LINE_POS_L1;
   \   000146   D243....     MOV.B   #0x1, &posL2
    151                display_3 = "Push";
   \   00014A   B240........ MOV.W   #`?<Constant "Push">`, &display_3
    152                posL3 = LINE_POS_L3;
   \   000150   F2400300.... MOV.B   #0x3, &posL3
    153                display_4 =  "Select";
   \   000156   B240........ MOV.W   #`?<Constant "Select">`, &display_4
    154                posL4 = LINE_POS_L2;
   \   00015C   E243....     MOV.B   #0x2, &posL4
    155            
    156          }
   \   000160   3A41         POP.W   R10
   \   000162   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "A Fig. 8">`:
   \   000000   41204669672E DC8 "A Fig. 8"
   \            203800      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Is Being">`:
   \   000000   497320426569 DC8 "Is Being"
   \            6E6700      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Made!">`:
   \   000000   4D6164652100 DC8 "Made!"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Fig 8.: 1">`:
   \   000000   46696720382E DC8 "Fig 8.: 1"
   \            3A203100    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  WAIT...">`:
   \   000000   202057414954 DC8 "  WAIT..."
   \            2E2E2E00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Fig 8.: 2">`:
   \   000000   46696720382E DC8 "Fig 8.: 2"
   \            3A203200    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Fig. 8">`:
   \   000000   4669672E2038 DC8 "Fig. 8"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Complete!">`:
   \   000000   436F6D706C65 DC8 "Complete!"
   \            74652100    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Push">`:
   \   000000   5075736800   DC8 "Push"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Select">`:
   \   000000   53656C656374 DC8 "Select"
   \            00          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Figure8_Drive
        6   -> Display_Process
        6   -> Five_msec_Delay
        6   -> Left_Forward_Off
        6   -> Left_Forward_On
        6   -> Right_Forward_Off
        6   -> Right_Forward_On


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "  WAIT...">
       9  ?<Constant "A Fig. 8">
      10  ?<Constant "Complete!">
      10  ?<Constant "Fig 8.: 1">
      10  ?<Constant "Fig 8.: 2">
       7  ?<Constant "Fig. 8">
       9  ?<Constant "Is Being">
       6  ?<Constant "Made!">
       5  ?<Constant "Push">
       7  ?<Constant "Select">
     356  Figure8_Drive

 
 356 bytes in segment CODE
  83 bytes in segment DATA16_C
 
 356 bytes of CODE  memory
  83 bytes of CONST memory

Errors: none
Warnings: none
