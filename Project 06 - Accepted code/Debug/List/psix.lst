###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  18:26:50
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Christopher\Documents\ECE 306\Project_06\psix.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\psix.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\psix.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\psix.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\psix.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file is used to implement the test code for project 6
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Oct 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          

   \                                 In  segment CODE, align 2
     18          void Project_6(void){
   \                     Project_6:
   \   000000   3B15         PUSHM.W #0x4, R11
     19          //******************************************************************************
     20          //
     21          //  Description: This file is used to implement the test code for project 6
     22          //
     23          //
     24          //  Christopher Woedy
     25          //  Sept 2015
     26          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     27          //
     28          // Globals: RX_Char
     29          //
     30          // Passed: 
     31          //
     32          // Local: receiveTMP[SW_SEL_10]
     33          //
     34          // Return: VOID
     35          //
     36          //****************************************************************************** 
     37            
     38                Init_Serial_UCA1(TRUE);
   \   000002   5C43         MOV.B   #0x1, R12
   \   000004   ........     CALLA   #Init_Serial_UCA1
     39            
     40                display_1 = "----------";
   \   000008   B240........ MOV.W   #`?<Constant "----------">`, &display_1
     41                posL1 = LINE_POS_L0;
   \   00000E   C243....     MOV.B   #0x0, &posL1
     42                display_2 = " Counter: ";
   \   000012   B240........ MOV.W   #`?<Constant " Counter: ">`, &display_2
     43                posL2 = LINE_POS_L0;
   \   000018   C243....     MOV.B   #0x0, &posL2
     44                display_3 = "          ";
   \   00001C   B240........ MOV.W   #`?<Constant "          ">`, &display_3
     45                posL3 = LINE_POS_L0;
   \   000022   C243....     MOV.B   #0x0, &posL3
     46                display_4 =  "----------";
   \   000026   B240........ MOV.W   #`?<Constant "----------">`, &display_4
     47                posL4 = LINE_POS_L0;
   \   00002C   C243....     MOV.B   #0x0, &posL4
     48                Display_Process();
   \   000030   ........     CALLA   #Display_Process
     49                
     50          	  char packet1 = INITIAL;
   \   000034   4B43         MOV.B   #0x0, R11
     51           	  char packet2 = INITIAL;
   \   000036   4A43         MOV.B   #0x0, R10
     52                    RX_Char[LINE_POS_L0] = INITIAL;
   \   000038   C243....     MOV.B   #0x0, &RX_Char
     53                    RX_Char[LINE_POS_L1] = INITIAL;
   \   00003C   C243....     MOV.B   #0x0, &RX_Char + 1
     54          	  unsigned int tmpPacket = INITIAL;
   \   000040   0843         MOV.W   #0x0, R8
     55          	  unsigned int count = INITIAL;
   \   000042   0943         MOV.W   #0x0, R9
     56          	  
     57                while (ALWAYS) {
     58                  
     59                 	  UCA1TXBUF = packet1;
   \                     ??Project_6_0:
   \   000044   4B4B         MOV.B   R11, R11
   \   000046   824BEE05     MOV.W   R11, &0x5ee
     60          	  Five_msec_Delay(SW_SEL_1);
   \   00004A   1C43         MOV.W   #0x1, R12
   \   00004C   ........     CALLA   #Five_msec_Delay
     61                 	  UCA1TXBUF = packet2;
   \   000050   4A4A         MOV.B   R10, R10
   \   000052   824AEE05     MOV.W   R10, &0x5ee
     62          	  Five_msec_Delay(SW_SEL_1);
   \   000056   1C43         MOV.W   #0x1, R12
   \   000058   ........     CALLA   #Five_msec_Delay
     63                  
     64          	  packet1 = RX_Char[LINE_POS_L0];
   \   00005C   5B42....     MOV.B   &RX_Char, R11
     65          	  packet2 = RX_Char[LINE_POS_L1];
   \   000060   5A42....     MOV.B   &RX_Char + 1, R10
     66          	  
     67                    count = packet2;
   \   000064   4A4A         MOV.B   R10, R10
   \   000066   094A         MOV.W   R10, R9
     68                    count <<= SHIFT_8;
   \   000068   39F0FF00     AND.W   #0xff, R9
   \   00006C   8910         SWPB    R9
     69                    count |= packet1; 
   \   00006E   4B4B         MOV.B   R11, R11
   \   000070   09DB         BIS.W   R11, R9
     70                    count++;
   \   000072   1953         ADD.W   #0x1, R9
     71                    hexToInt(count);
   \   000074   0C49         MOV.W   R9, R12
   \   000076   ........     CALLA   #hexToInt
     72                    
     73                    packet1 = (char) count;
   \   00007A   4B49         MOV.B   R9, R11
     74                    tmpPacket = count >> SHIFT_8;
   \   00007C   0F49         MOV.W   R9, R15
   \   00007E   8F10         SWPB    R15
   \   000080   3FF0FF00     AND.W   #0xff, R15
   \   000084   084F         MOV.W   R15, R8
     75                    packet2 = (char) tmpPacket;
   \   000086   4A48         MOV.B   R8, R10
     76                    
     77                 	  UCA1TXBUF = packet1;
   \   000088   4B4B         MOV.B   R11, R11
   \   00008A   824BEE05     MOV.W   R11, &0x5ee
     78          	  Five_msec_Delay(SW_SEL_1);
   \   00008E   1C43         MOV.W   #0x1, R12
   \   000090   ........     CALLA   #Five_msec_Delay
     79                 	  UCA1TXBUF = packet2;
   \   000094   4A4A         MOV.B   R10, R10
   \   000096   824AEE05     MOV.W   R10, &0x5ee
     80          	  Five_msec_Delay(SW_SEL_1);
   \   00009A   1C43         MOV.W   #0x1, R12
   \   00009C   ........     CALLA   #Five_msec_Delay
     81                    	  
     82          	  
     83               if (!(P4IN & SW1)){
   \   0000A0   D2B32102     BIT.B   #0x1, &0x221
   \   0000A4   082C         JC      ??Project_6_1
     84                  packet1 = INITIAL;
   \   0000A6   4B43         MOV.B   #0x0, R11
     85                  packet2 = INITIAL;
   \   0000A8   4A43         MOV.B   #0x0, R10
     86                  count = INITIAL;
   \   0000AA   0943         MOV.W   #0x0, R9
     87                  tmpPacket = INITIAL;
   \   0000AC   0843         MOV.W   #0x0, R8
     88                  RX_Char[LINE_POS_L0] = INITIAL;
   \   0000AE   C243....     MOV.B   #0x0, &RX_Char
     89                  RX_Char[LINE_POS_L1] = INITIAL;
   \   0000B2   C243....     MOV.B   #0x0, &RX_Char + 1
     90                }	  
     91               if (!(P4IN & SW2)){
   \                     ??Project_6_1:
   \   0000B6   E2B32102     BIT.B   #0x2, &0x221
   \   0000BA   172C         JC      ??Project_6_2
     92                  break;
     93                }
     94               Display_Process();
     95               Five_msec_Delay(BIGGER_DELAY);
     96           }
     97                          
     98                display_1 = "P. Six";
   \   0000BC   B240........ MOV.W   #`?<Constant "P. Six">`, &display_1
     99                posL1 = LINE_POS_L2;
   \   0000C2   E243....     MOV.B   #0x2, &posL1
    100                display_2 = "Complete!";
   \   0000C6   B240........ MOV.W   #`?<Constant "Complete!">`, &display_2
    101                posL2 = LINE_POS_L1;
   \   0000CC   D243....     MOV.B   #0x1, &posL2
    102                display_3 = "          ";
   \   0000D0   B240........ MOV.W   #`?<Constant "          ">`, &display_3
    103                posL3 = LINE_POS_L0;
   \   0000D6   C243....     MOV.B   #0x0, &posL3
    104                display_4 =  "          ";
   \   0000DA   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    105                posL4 = LINE_POS_L0;
   \   0000E0   C243....     MOV.B   #0x0, &posL4
    106                Display_Process();
   \   0000E4   ........     CALLA   #Display_Process
    107                
    108          }
   \   0000E8   073C         JMP     ??Project_6_3
   \                     ??Project_6_2:
   \   0000EA   ........     CALLA   #Display_Process
   \   0000EE   3C404B00     MOV.W   #0x4b, R12
   \   0000F2   ........     CALLA   #Five_msec_Delay
   \   0000F6   A63F         JMP     ??Project_6_0
   \                     ??Project_6_3:
   \   0000F8   3817         POPM.W  #0x4, R11
   \   0000FA   1001         RETA
   \   0000FC                REQUIRE _A_UCA1TXBUF_L
   \   0000FC                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Counter: ">`:
   \   000000   20436F756E74 DC8 " Counter: "
   \            65723A2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "P. Six">`:
   \   000000   502E20536978 DC8 "P. Six"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Complete!">`:
   \   000000   436F6D706C65 DC8 "Complete!"
   \            74652100    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Project_6
       12   -> Display_Process
       12   -> Five_msec_Delay
       12   -> Init_Serial_UCA1
       12   -> hexToInt


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant " Counter: ">
      11  ?<Constant "----------">
      10  ?<Constant "Complete!">
       7  ?<Constant "P. Six">
     252  Project_6
       2  _A_PBIN_L
       2  _A_UCA1TXBUF_L

 
 252 bytes in segment CODE
   4 bytes in segment DATA16_AN
  50 bytes in segment DATA16_C
 
 252 bytes of CODE  memory
  50 bytes of CONST memory
   0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
