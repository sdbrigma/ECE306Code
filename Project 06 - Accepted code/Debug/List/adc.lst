###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  17:54:44
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Christopher\Documents\ECE 306\Project_06\adc.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\adc.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\adc.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\adc.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\adc.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the ADC Routines
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //Points to Header files for Preprocessing
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADC10CTL0_L
   \                     _A_ADC10CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADC10CTL1_L
   \                     _A_ADC10CTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x704
   \   union <unnamed> _A_ADC10CTL2_L
   \                     _A_ADC10CTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADC10MCTL0_L
   \                     _A_ADC10MCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x712
   \   union <unnamed> _A_ADC10MEM0_L
   \                     _A_ADC10MEM0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71a
   \   union <unnamed> _A_ADC10IE_L
   \                     _A_ADC10IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71e
   \   union <unnamed> _A_ADC10IV_L
   \                     _A_ADC10IV_L:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          

   \                                 In  segment CODE, align 2
     16          void Init_ADC(void){
   \                     Init_ADC:
     17          //******************************************************************************
     18          //
     19          //  Description: This file contains the ADC Configuration Routine
     20          //
     21          //
     22          //  Christopher Woedy
     23          //  Sept 2015
     24          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     25          //
     26          // Globals:
     27          //
     28          // Passed:
     29          //
     30          // Local:
     31          //
     32          // Return: VOID
     33          //
     34          //****************************************************************************** 
     35          
     36          ADC10CTL0 = CLEAR_REGISTER;    // Clear ADC10CTL0
   \   000000   82430007     MOV.W   #0x0, &0x700
     37          ADC10CTL0 |= ADC10SHT_2;    // 16 ADC clocks
   \   000004   B2D000020007 BIS.W   #0x200, &0x700
     38          ADC10CTL0 &= ~ADC10MSC;     // Single Sequence
   \   00000A   B2C080000007 BIC.W   #0x80, &0x700
     39          ADC10CTL0 |= ADC10ON;       // ADC ON - Core Enabled
   \   000010   B2D010000007 BIS.W   #0x10, &0x700
     40          
     41          ADC10CTL1 = CLEAR_REGISTER;    // Clear ADC10CTL1
   \   000016   82430207     MOV.W   #0x0, &0x702
     42          ADC10CTL1 |= ADC10SHS_0;     // ADC10SC bit
   \   00001A   924202070207 MOV.W   &0x702, &0x702
     43          ADC10CTL1 |= ADC10SHP;      // SAMPCON signal sourced from sampling timer
   \   000020   B2D000020207 BIS.W   #0x200, &0x702
     44          ADC10CTL1 &= ~ADC10ISSH;    // The sample-input signal is not inverted
   \   000026   B2C000010207 BIC.W   #0x100, &0x702
     45          ADC10CTL1 |= ADC10DIV_0;    // ADC10_B clock divider - divide by 1
   \   00002C   924202070207 MOV.W   &0x702, &0x702
     46          ADC10CTL1 |= ADC10SSEL_0;    // MODCLK
   \   000032   924202070207 MOV.W   &0x702, &0x702
     47          ADC10CTL1 |= ADC10CONSEQ_0; // Single-channel, single-conversion
   \   000038   924202070207 MOV.W   &0x702, &0x702
     48          
     49          ADC10CTL2 = CLEAR_REGISTER;    // Clear ADC10CTL2
   \   00003E   82430407     MOV.W   #0x0, &0x704
     50          ADC10CTL2 |= ADC10DIV_0;    // Pre-divide by 1
   \   000042   924204070407 MOV.W   &0x704, &0x704
     51          ADC10CTL2 |= ADC10RES;      // 10-bit resolution
   \   000048   B2D010000407 BIS.W   #0x10, &0x704
     52          ADC10CTL2 &= ~ADC10DF;      // Binary unsigned
   \   00004E   B2C20407     BIC.W   #0x8, &0x704
     53          ADC10CTL2 &= ~ADC10SR;      // Supports up to approximately 200 ksps
   \   000052   A2C20407     BIC.W   #0x4, &0x704
     54          
     55          ADC10MCTL0 = CLEAR_REGISTER;   // Clear ADC10MCTL0
   \   000056   82430A07     MOV.W   #0x0, &0x70a
     56          ADC10MCTL0 |= ADC10SREF_0;  // V(R+) = AVCC and V(R-) = AVSS
   \   00005A   92420A070A07 MOV.W   &0x70a, &0x70a
     57          ADC10MCTL0 |= ADC10INCH_0;  // Channel A0
   \   000060   92420A070A07 MOV.W   &0x70a, &0x70a
     58          ADC10IE |= ADC10IE0;        // Enable ADC conversion complete interrupt
   \   000066   92D31A07     BIS.W   #0x1, &0x71a
     59          }
   \   00006A   1001         RETA
   \   00006C                REQUIRE _A_ADC10CTL0_L
   \   00006C                REQUIRE _A_ADC10CTL1_L
   \   00006C                REQUIRE _A_ADC10CTL2_L
   \   00006C                REQUIRE _A_ADC10MCTL0_L
   \   00006C                REQUIRE _A_ADC10IE_L
     60          
     61          #pragma vector=ADC10_VECTOR

   \                                 In  segment ISR_CODE, align 2
     62          __interrupt void ADC10_ISR(void){
   \                     ADC10_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     63          //******************************************************************************
     64          //
     65          //  Description: This file contains the ADC interrupt service routine handler
     66          //  code that addresses different cases of the interrupt.
     67          //
     68          //
     69          //  Christopher Woedy
     70          //  Sept 2015
     71          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     72          //
     73          // Globals: ADC_Thumb, ADC_Right_Detector, ADC_Left_Detector,
     74          // ADC_Temp, ADC_Bat
     75          //
     76          // Passed:
     77          //
     78          // Local:
     79          //
     80          // Return: VOID
     81          //
     82          //****************************************************************************** 
     83          
     84          	switch(__even_in_range(ADC10IV,SW_SEL_12)) {
   \   000002   1F421E07     MOV.W   &0x71e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for ADC10_ISR>_0`:
   \   000008   3B3C         JMP     ??ADC10_ISR_0
   \   00000A   3A3C         JMP     ??ADC10_ISR_0
   \   00000C   393C         JMP     ??ADC10_ISR_0
   \   00000E   383C         JMP     ??ADC10_ISR_0
   \   000010   373C         JMP     ??ADC10_ISR_0
   \   000012   363C         JMP     ??ADC10_ISR_0
   \   000014   003C         JMP     ??ADC10_ISR_7
     85          		case SW_SEL_0: break;
     86          		case SW_SEL_2: break;
     87          		case SW_SEL_4: break;
     88          		case SW_SEL_6: break;
     89          		case SW_SEL_8: break;
     90          		case SW_SEL_10: break;
     91          		case SW_SEL_12: 
     92                            // Need this to change the ADC10INCH_x value.       
     93                            ADC10CTL0 &= ~ADC10ENC;             // Toggle ENC bit. 
   \                     ??ADC10_ISR_7:
   \   000016   A2C30007     BIC.W   #0x2, &0x700
     94                             
     95                            switch (ADC_Channel++){  
   \   00001A   1F42....     MOV.W   &ADC_Channel, R15
   \   00001E   0E4F         MOV.W   R15, R14
   \   000020   1E53         ADD.W   #0x1, R14
   \   000022   824E....     MOV.W   R14, &ADC_Channel
   \   000026   0F83         SUB.W   #0x0, R15
   \   000028   0924         JEQ     ??ADC10_ISR_2
   \   00002A   1F83         SUB.W   #0x1, R15
   \   00002C   0D24         JEQ     ??ADC10_ISR_3
   \   00002E   1F83         SUB.W   #0x1, R15
   \   000030   1224         JEQ     ??ADC10_ISR_4
   \   000032   1F83         SUB.W   #0x1, R15
   \   000034   1724         JEQ     ??ADC10_ISR_5
   \   000036   1F83         SUB.W   #0x1, R15
   \   000038   1C24         JEQ     ??ADC10_ISR_6
   \   00003A   223C         JMP     ??ADC10_ISR_0
     96                                    // Right Detector
     97                                    case Right_Detector:           
     98                                            ADC10MCTL0 = ADC10INCH_1;       // Next channel A1
   \                     ??ADC10_ISR_2:
   \   00003C   92430A07     MOV.W   #0x1, &0x70a
     99                                            ADC_Left_Detector = ADC10MEM0; // Read Channel A0            
   \   000040   92421207.... MOV.W   &0x712, &ADC_Left_Detector
    100                                            break;
   \   000046   1C3C         JMP     ??ADC10_ISR_0
    101                                    // Left Detector
    102                                    case Left_Detector:           
    103                                            ADC10MCTL0 = ADC10INCH_3;       // Next channel A3           
   \                     ??ADC10_ISR_3:
   \   000048   B24003000A07 MOV.W   #0x3, &0x70a
    104                                            ADC_Right_Detector = ADC10MEM0;  // Read Channel A1            
   \   00004E   92421207.... MOV.W   &0x712, &ADC_Right_Detector
    105                                            break;    
   \   000054   153C         JMP     ??ADC10_ISR_0
    106                                    // Thumbwheel
    107                                    case Thumbwheel:           
    108                                            ADC10MCTL0 = ADC10INCH_11;      // Next channel A11           
   \                     ??ADC10_ISR_4:
   \   000056   B2400B000A07 MOV.W   #0xb, &0x70a
    109                                            ADC_Thumb = ADC10MEM0;          // Read Channel A3            
   \   00005C   92421207.... MOV.W   &0x712, &ADC_Thumb
    110                                            break;
   \   000062   0E3C         JMP     ??ADC10_ISR_0
    111                                    // Temperature
    112                                    case CHANNEL_A10:           
    113                                            ADC10MCTL0 = ADC10INCH_10;      // Next channel A10           
   \                     ??ADC10_ISR_5:
   \   000064   B2400A000A07 MOV.W   #0xa, &0x70a
    114                                            ADC_Temp = ADC10MEM0;           // Read Channel A10           
   \   00006A   92421207.... MOV.W   &0x712, &ADC_Temp
    115                                            break; 
   \   000070   073C         JMP     ??ADC10_ISR_0
    116                                    // Internal
    117                                    case CHANNEL_A11:           
    118                                            ADC10MCTL0 = ADC10INCH_0;       // Next channel A0           
   \                     ??ADC10_ISR_6:
   \   000072   82430A07     MOV.W   #0x0, &0x70a
    119                                            ADC_Bat = ADC10MEM0;            // Read Channel A11            
   \   000076   92421207.... MOV.W   &0x712, &ADC_Bat
    120                                            ADC_Channel=INITIAL;           
   \   00007C   8243....     MOV.W   #0x0, &ADC_Channel
    121                                            break;         
    122                                    default:         
    123                                            break;       
    124                                            }              
    125                                    break;
    126                                    default: break;
    127          	}
    128          }
   \                     ??ADC10_ISR_0:
   \   000080   1E17         POPM.W  #0x2, R15
   \   000082   0013         RETI
   \   000084                REQUIRE _A_ADC10CTL0_L
   \   000084                REQUIRE _A_ADC10MCTL0_L
   \   000084                REQUIRE _A_ADC10MEM0_L
   \   000084                REQUIRE _A_ADC10IV_L
    129          

   \                                 In  segment CODE, align 2
    130          void ADC10_Process(void){
   \                     ADC10_Process:
   \                     ??ADC10_Process_0:
    131          //******************************************************************************
    132          //
    133          //  Description: This file contains the ADC operation Routine
    134          //
    135          //
    136          //  Christopher Woedy
    137          //  Sept 2015
    138          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    139          //
    140          // Globals:
    141          //
    142          // Passed:
    143          //
    144          // Local:
    145          //
    146          // Return: VOID
    147          //
    148          //****************************************************************************** 
    149          
    150            while (ADC10CTL1 & BUSY);             // Wait if ADC10 core is active
   \   000000   92B30207     BIT.W   #0x1, &0x702
   \   000004   FD2F         JC      ??ADC10_Process_0
    151            ADC10CTL0 |= ADC10ENC + ADC10SC;      // Sampling and conversion start
   \   000006   B2D003000007 BIS.W   #0x3, &0x700
    152          
    153          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_ADC10CTL1_L
   \   00000E                REQUIRE _A_ADC10CTL0_L

   \                                 In  segment INTVEC, offset 0x5c, root
   \                     `??ADC10_ISR::??INTVEC 92`:
   \   00005C   ....         DC16    ADC10_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   ADC10_ISR
      4   ADC10_Process
      4   Init_ADC


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     132  ADC10_ISR
       2  ADC10_ISR::??INTVEC 92
      14  ADC10_Process
     108  Init_ADC
       2  _A_ADC10CTL0_L
       2  _A_ADC10CTL1_L
       2  _A_ADC10CTL2_L
       2  _A_ADC10IE_L
       2  _A_ADC10IV_L
       2  _A_ADC10MCTL0_L
       2  _A_ADC10MEM0_L

 
 122 bytes in segment CODE
  14 bytes in segment DATA16_AN
   2 bytes in segment INTVEC
 132 bytes in segment ISR_CODE
 
 254 bytes of CODE  memory
   0 bytes of CONST memory (+  2 bytes shared)
   0 bytes of DATA  memory (+ 14 bytes shared)

Errors: none
Warnings: none
