###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  17:54:48
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\system.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\system.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\List\system.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\system.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\system.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the System Routine
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          
     18          
     19          //------------------------------------------------------------------------------
     20          // System Configurations
     21          
     22          // Tells the compiler to provide the value in reg as an input to an 
     23          // inline assembly block.  Even though the block contains no instructions,
     24          // the compiler may not optimize it away, and is told that the value
     25          // may change and should not be relied upon.
     26          
     27          //inline void READ_AND_DISCARD(unsigned int reg) __attribute__((always_inline));
     28          //void READ_AND_DISCARD(unsigned int reg){
     29          //  asm volatile ("" : "=m" (reg) : "r" (reg));
     30          //}
     31          
     32          //inline void enable_interrupts(void) __attribute__((always_inline));

   \                                 In  segment CODE, align 2
     33          void enable_interrupts(void){
   \                     enable_interrupts:
     34            __bis_SR_register(GIE);     // enable interrupts
   \   000000   0343         NOP
   \   000002   32D2         BIS.W   #0x8, SR
     35          //  asm volatile ("eint \n");
     36          }
   \   000004   1001         RETA
     37          
     38          //inline void disable_interrupts(void) __attribute__((always_inline));
     39          //void disable_interrupts(void){
     40          //  asm volatile ("dint \n");
     41          //}
     42          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  enable_interrupts

 
 6 bytes in segment CODE
 
 6 bytes of CODE memory

Errors: none
Warnings: none
