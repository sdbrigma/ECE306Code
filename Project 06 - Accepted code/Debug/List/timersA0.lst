###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  17:54:48
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\timersA0.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\timersA0.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\List\timersA0.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\Obj\timersA0.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\timersA0.c
      1          //******************************************************************************
      2          //
      3          //  Description: Initializes the A0 Timer
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //Points to Header files for Preprocessing
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x340
   \   unsigned short volatile TA0CTL
   \                     TA0CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   unsigned short volatile TA0CCTL0
   \                     TA0CCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x360
   \   unsigned short volatile TA0EX0
   \                     TA0EX0:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          

   \                                 In  segment CODE, align 2
     16          void Init_Timer_A0(void){
   \                     Init_Timer_A0:
     17          //******************************************************************************
     18          //
     19          //  Description: Initializes the A0 Timer
     20          //
     21          //
     22          //  Christopher Woedy
     23          //  Sept 2015
     24          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     25          //
     26          // Globals:
     27          //
     28          // Passed:
     29          //
     30          // Local:
     31          //
     32          // Return: VOID
     33          //
     34          //****************************************************************************** 
     35          
     36          TA0CTL = TASSEL__SMCLK;		        // SMCLK source
   \   000000   B24000024003 MOV.W   #0x200, &0x340
     37          TA0CTL |= TACLR;			// Resets TA0R, clock divider, count direction
   \   000006   A2D24003     BIS.W   #0x4, &0x340
     38          TA0CTL |= MC__CONTINOUS;	        // Sets timer to count up continuously and then reset to zero
   \   00000A   B2D020004003 BIS.W   #0x20, &0x340
     39          TA0CTL |= ID__8;			// Divide the clock by 8
   \   000010   B2D0C0004003 BIS.W   #0xc0, &0x340
     40          TA0CTL &= ~TAIE;			// Disable overflow interrupt
   \   000016   A2C34003     BIC.W   #0x2, &0x340
     41          TA0CTL &= ~TAIFG;			// Clear overflow interrupt flag
   \   00001A   92C34003     BIC.W   #0x1, &0x340
     42          
     43          TA0EX0 = TAIDEX_7;			// Divide the clock by an additional 8
   \   00001E   B24007006003 MOV.W   #0x7, &0x360
     44          
     45          TA0CCR0 = TA0CCR0_INTERVAL;	        // CCR0
   \   000024   B2407D005203 MOV.W   #0x7d, &0x352
     46          TA0CCTL0 |= CCIE;			// CCR0 enable interrupt
   \   00002A   B2D010004203 BIS.W   #0x10, &0x342
     47          
     48          // TA0CCR1 = TA0CCR1_INTERVAL	// CCR1
     49          // TA0CCTL1 |= CCIE;			// CCR1 enable interrupt
     50          
     51          // TA0CCR2 = TA0CCR2_INTERVAL	// CCR2
     52          // TA0CCTL2 |= CCIE;			// CCR2 enable interrupt
     53          
     54          }
   \   000030   1001         RETA
   \   000032                REQUIRE TA0CTL
   \   000032                REQUIRE TA0EX0
   \   000032                REQUIRE TA0CCR0
   \   000032                REQUIRE TA0CCTL0

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_A0


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      50  Init_Timer_A0
       2  TA0CCR0
       2  TA0CCTL0
       2  TA0CTL
       2  TA0EX0

 
 50 bytes in segment CODE
  8 bytes in segment DATA16_AN
 
 50 bytes of CODE memory
  0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
