###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  17:54:46
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\init_serial.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\init_serial.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\List\init_serial.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE
#        306\Project_06\Debug\Obj\init_serial.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\init_serial.c
      1          //******************************************************************************
      2          //
      3          //  Description: Controls serialized communications
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //Points to Header files for Preprocessing
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x204
   \   union <unnamed> _A_PADIR_L
   \                     _A_PADIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20a
   \   union <unnamed> _A_PASEL0_L
   \                     _A_PASEL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20c
   \   union <unnamed> _A_PASEL1_L
   \                     _A_PASEL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e0
   \   union <unnamed> _A_UCA1CTLW0_L
   \                     _A_UCA1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e6
   \   union <unnamed> _A_UCA1BRW_L
   \                     _A_UCA1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e8
   \   union <unnamed> _A_UCA1MCTLW_L
   \                     _A_UCA1MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          

   \                                 In  segment CODE, align 2
     16          void Init_Serial_UCA1(_Bool lowBaud) {
   \                     Init_Serial_UCA1:
     17          //******************************************************************************
     18          //
     19          //  Description: Controls serialized communications
     20          //
     21          //
     22          //  Christopher Woedy
     23          //  Sept 2015
     24          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     25          //
     26          // Globals: rxRead, rxWrite, txRead, txWrite, RX_Char[WORD_LENGTH],
     27          // TX_Char[WORD_LENGTH],
     28          //
     29          // Passed:
     30          //
     31          // Local: i
     32          //
     33          // Return: VOID
     34          //
     35          //****************************************************************************** 
     36            
     37          // Count
     38          int i;
     39          
     40          // Initial RX
     41          for (i=INITIAL; i<SMALL_RING_SIZE; i++) {
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_0:
   \   000002   3F901000     CMP.W   #0x10, R15
   \   000006   0434         JGE     ??Init_Serial_UCA1_2
     42          	RX_Char[i] = INITIALIZE_CHAR;
   \   000008   CF43....     MOV.B   #0x0, RX_Char(R15)
     43          }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??Init_Serial_UCA1_0
     44          
     45          rxWrite = INITIAL;
   \                     ??Init_Serial_UCA1_2:
   \   000010   8243....     MOV.W   #0x0, &rxWrite
     46          rxRead = INITIAL;
   \   000014   8243....     MOV.W   #0x0, &rxRead
     47          
     48          // Initial TX Array
     49          for (i=INITIAL; i<SMALL_RING_SIZE; i++) {
   \   000018   0F43         MOV.W   #0x0, R15
   \                     ??Init_Serial_UCA1_1:
   \   00001A   3F901000     CMP.W   #0x10, R15
   \   00001E   0434         JGE     ??Init_Serial_UCA1_3
     50          	TX_Char[i] = INITIALIZE_CHAR;
   \   000020   CF43....     MOV.B   #0x0, TX_Char(R15)
     51          }
   \   000024   1F53         ADD.W   #0x1, R15
   \   000026   F93F         JMP     ??Init_Serial_UCA1_1
     52          
     53          txWrite = INITIAL;
   \                     ??Init_Serial_UCA1_3:
   \   000028   8243....     MOV.W   #0x0, &txWrite
     54          txRead = INITIAL;
   \   00002C   8243....     MOV.W   #0x0, &txRead
     55          
     56          // Configure UART 0
     57          UCA1CTLW0 = INITIAL;			// Use Word register
   \   000030   8243E005     MOV.W   #0x0, &0x5e0
     58          UCA1CTLW0 |= UCSSEL__SMCLK;
   \   000034   B2D08000E005 BIS.W   #0x80, &0x5e0
     59          UCA1CTL1 |= UCSWRST;			// Set Software reset enable
   \   00003A   D2D3E005     BIS.B   #0x1, &0x5e0
     60          
     61          //UCA1CTLW0 |= UCPEN;
     62          //UCA1CTLW0 &= ~UCPAR;
     63          //UCA1CTLW0 &= ~UCMSB;
     64          //UCA1CTLW0 &= ~UC7BIT;
     65          //UCA1CTLW0 |= UCSPB;
     66          //UCA1CTLW0 &= ~UCMODE0;
     67          //UCA1CTLW0 &= ~UCMODE1;
     68          //UCA1CTLW0 &= ~UCSYNC;
     69          //UCA1CTLW0 |= UCSSEL0;
     70          //UCA1CTLW0 |= UCSSEL1;
     71          //UCA1CTLW0 &= ~UCRXEIE;
     72          //UCA1CTLW0 &= ~UCBRKIE;
     73          //UCA1CTLW0 &= ~UCDORM;
     74          //UCA1CTLW0 &= ~UCTXADDR;
     75          //UCA1CTLW0 &= ~UCTXBRK;
     76          //
     77          //UCA1CTLW1 &= ~UCGLIT0;
     78          //UCA1CTLW1 &= ~UCGLIT1;
     79          
     80          if (lowBaud)
   \   00003E   4C93         CMP.B   #0x0, R12
   \   000040   0724         JEQ     ??Init_Serial_UCA1_4
     81            {
     82              UCA1BRW = BRW9600;
   \   000042   B2403400E605 MOV.W   #0x34, &0x5e6
     83              UCA1MCTLW = BAUD_9600;     // Set Baud Rate to 9600
   \   000048   B2401149E805 MOV.W   #0x4911, &0x5e8
   \   00004E   053C         JMP     ??Init_Serial_UCA1_5
     84            }
     85          else 
     86            { 
     87              UCA1BRW = BRW115200;
   \                     ??Init_Serial_UCA1_4:
   \   000050   A242E605     MOV.W   #0x4, &0x5e6
     88              UCA1MCTLW = BAUD_115200;   // Set Baud Rate to 115200
   \   000054   B2405155E805 MOV.W   #0x5551, &0x5e8
     89            }
     90          
     91          //UCA1STATW &= ~UCLISTEN; 
     92          //UCA1STATW &= ~UCFE;
     93          //UCA1STATW &= ~UCOE;
     94          //UCA1STATW &= ~UCPE;
     95          //UCA1STATW &= ~UCBRK;
     96          //UCA1STATW &= ~UCRXERR;
     97          //UCA1STATW &= ~UCADDR;
     98          //UCA1STATW &= ~UCIDLE;
     99          //
    100          //UCA1ABCTL &= ~UCDELIM0;
    101          //UCA1ABCTL &= ~UCDELIM1;
    102          //UCA1ABCTL &= ~UCSTOE;
    103          //UCA1ABCTL &= ~UCBTOE;
    104          //UCA1ABCTL &= ~UCABDEN;
    105          //
    106          //UCA1IRCTL &= ~UCIRRXFL0;
    107          //UCA1IRCTL &= ~UCIRRXFL1;
    108          //UCA1IRCTL &= ~UCIRRXFL2;
    109          //UCA1IRCTL &= ~UCIRRXFL3;
    110          //UCA1IRCTL &= ~UCIRRXFL4;
    111          //UCA1IRCTL &= ~UCIRRXFL5;
    112          //UCA1IRCTL &= ~UCIRRXPL;
    113          //UCA1IRCTL &= ~UCIRRXFE;
    114          //UCA1IRCTL &= ~UCIRTXPL0;
    115          //UCA1IRCTL &= ~UCIRTXPL1;
    116          //UCA1IRCTL &= ~UCIRTXPL2;
    117          //UCA1IRCTL &= ~UCIRTXPL3;
    118          //UCA1IRCTL &= ~UCIRTXPL4;
    119          //UCA1IRCTL &= ~UCIRTXPL5;
    120          //UCA1IRCTL &= ~UCIRTXCLK;
    121          //UCA1IRCTL &= ~UCIREN;
    122          //
    123          //UCA1IE &= ~UCTXCPTIE;
    124          //UCA1IE &= ~UCSTTIE;
    125          //UCA1IE |= UCTXIE;
    126          //UCA1IE |= UCRXIE;
    127          //
    128          //UCA1IFG &= ~UCTXCPTIFG;
    129          //UCA1IFG &= ~UCSTTIFG;
    130          //UCA1IFG |= UCTXIFG;
    131          //UCA1IFG &= ~UCRXIFG;
    132          //
    133          //UCA1IV = INITIAL;
    134          
    135            // CPU_TXD Initialization
    136            P2SEL0 &= ~CPU_TXD;                   // P2SEL0 ->    0
   \                     ??Init_Serial_UCA1_5:
   \   00005A   F2C020000B02 BIC.B   #0x20, &0x20b
    137            P2SEL1 |= CPU_TXD;                    // P2SEL1 ->    1
   \   000060   F2D020000D02 BIS.B   #0x20, &0x20d
    138            P2OUT |= CPU_TXD;                    // P2OUT ->      1
   \   000066   F2D020000302 BIS.B   #0x20, &0x203
    139            P2DIR |= CPU_TXD;                     // P2DIR ->     1
   \   00006C   F2D020000502 BIS.B   #0x20, &0x205
    140            
    141            // CPU_RXD Initialization
    142            P2SEL0 &= ~CPU_RXD;                   // P2SEL0 ->    0
   \   000072   F2C040000B02 BIC.B   #0x40, &0x20b
    143            P2SEL1 |= CPU_RXD;                    // P2SEL1 ->    1
   \   000078   F2D040000D02 BIS.B   #0x40, &0x20d
    144            P2OUT &= ~CPU_RXD;                    // P2OUT ->     0
   \   00007E   F2C040000302 BIC.B   #0x40, &0x203
    145            P2DIR  &= ~CPU_RXD;                   // P2DIR ->     0
   \   000084   F2C040000502 BIC.B   #0x40, &0x205
    146            
    147          UCA1CTLW0 &= ~UCSWRST;			// Release from reset
   \   00008A   92C3E005     BIC.W   #0x1, &0x5e0
    148          
    149          UCA1IE |= UCTXIE;
   \   00008E   A2D3FA05     BIS.W   #0x2, &0x5fa
    150          UCA1IE |= UCRXIE;	        // Enable  RX  interrupt
   \   000092   92D3FA05     BIS.W   #0x1, &0x5fa
    151          }
   \   000096   1001         RETA
   \   000098                REQUIRE _A_UCA1CTLW0_L
   \   000098                REQUIRE _A_UCA1BRW_L
   \   000098                REQUIRE _A_UCA1MCTLW_L
   \   000098                REQUIRE _A_PASEL0_L
   \   000098                REQUIRE _A_PASEL1_L
   \   000098                REQUIRE _A_PAOUT_L
   \   000098                REQUIRE _A_PADIR_L
   \   000098                REQUIRE _A_UCA1IE_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Serial_UCA1


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     152  Init_Serial_UCA1
       2  _A_PADIR_L
       2  _A_PAOUT_L
       2  _A_PASEL0_L
       2  _A_PASEL1_L
       2  _A_UCA1BRW_L
       2  _A_UCA1CTLW0_L
       2  _A_UCA1IE_L
       2  _A_UCA1MCTLW_L

 
 152 bytes in segment CODE
  16 bytes in segment DATA16_AN
 
 152 bytes of CODE memory
   0 bytes of DATA memory (+ 16 bytes shared)

Errors: none
Warnings: none
