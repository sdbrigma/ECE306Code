###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  17:54:45
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Christopher\Documents\ECE 306\Project_06\hw7.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\hw7.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\hw7.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\hw7.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\hw7.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file is used to implement the test code for project 4
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          

   \                                 In  segment CODE, align 2
     18          void Homework_7(void){
   \                     Homework_7:
   \   000000   0A12         PUSH.W  R10
     19          //******************************************************************************
     20          //
     21          //  Description: This file is used to implement the test code for project 4
     22          //
     23          //
     24          //  Christopher Woedy
     25          //  Sept 2015
     26          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     27          //
     28          // Globals: display_1, display_2, display_3, display_4, posL1, posL2, posL3, 
     29          // posL4, Time_Sequence, A0_time_count, buadToggle, transmitEnable, 
     30          // receiveEnable, TX_Char[], RX_Char[], Time_Sequence, A0_Time_Count
     31          //
     32          // Passed: 
     33          //
     34          // Local: temp
     35          //
     36          // Return: VOID
     37          //
     38          //****************************************************************************** 
     39          
     40            unsigned int temp = INITIAL;
   \   000002   0A43         MOV.W   #0x0, R10
     41            
     42          // Initial Display Set
     43            display_1 = "Switch Two";
   \   000004   B240........ MOV.W   #`?<Constant "Switch Two">`, &display_1
     44            posL1 = LINE_POS_L0;
   \   00000A   C243....     MOV.B   #0x0, &posL1
     45            display_2 = "  toggles ";
   \   00000E   B240........ MOV.W   #`?<Constant "  toggles ">`, &display_2
     46            posL2 = LINE_POS_L0;
   \   000014   C243....     MOV.B   #0x0, &posL2
     47            display_3 = "Baud Rates";
   \   000018   B240........ MOV.W   #`?<Constant "Baud Rates">`, &display_3
     48            posL3 = LINE_POS_L0;
   \   00001E   C243....     MOV.B   #0x0, &posL3
     49            display_4 = "__________";
   \   000022   B240........ MOV.W   #`?<Constant "__________">`, &display_4
     50            posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
     51            big = INITIAL;
   \   00002C   C243....     MOV.B   #0x0, &big
     52            Display_Process();
   \   000030   ........     CALLA   #Display_Process
     53            
     54            A0_time_count = INITIAL;  
   \   000034   8243....     MOV.W   #0x0, &A0_time_count
     55            // Pause
     56            while(A0_time_count <= THREE_HALF_SEC_COUNT);
   \                     ??Homework_7_0:
   \   000038   B290AD0D.... CMP.W   #0xdad, &A0_time_count
   \   00003E   FC2B         JNC     ??Homework_7_0
     57            A0_time_count = INITIAL;
   \   000040   8243....     MOV.W   #0x0, &A0_time_count
     58          
     59            display_1 = "          ";
   \   000044   B240........ MOV.W   #`?<Constant "          ">`, &display_1
     60            posL1 = LINE_POS_L0;
   \   00004A   C243....     MOV.B   #0x0, &posL1
     61            display_2 = "          ";
   \   00004E   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     62            posL2 = LINE_POS_L0;
   \   000054   C243....     MOV.B   #0x0, &posL2
     63            display_3 = "   Baud:  ";
   \   000058   B240........ MOV.W   #`?<Constant "   Baud:  ">`, &display_3
     64            posL3 = LINE_POS_L0;
   \   00005E   C243....     MOV.B   #0x0, &posL3
     65            display_4 = "          ";
   \   000062   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     66            posL4 = LINE_POS_L0;
   \   000068   C243....     MOV.B   #0x0, &posL4
     67            Display_Process();
   \   00006C   ........     CALLA   #Display_Process
     68          
     69            while (ALWAYS)  {
     70            
     71            if (!(P4IN & SW1)){
   \                     ??Homework_7_2:
   \   000070   D2B32102     BIT.B   #0x1, &0x221
   \   000074   CC28         JNC     ??Homework_7_4
     72                    return;								// Leave Function
     73              }
     74            if (!(P4IN & SW2)) {
   \   000076   E2B32102     BIT.B   #0x2, &0x221
   \   00007A   352C         JC      ??Homework_7_5
     75              Five_msec_Delay(LIL_SW_DELAY);      // 'debounce' delay
   \   00007C   3C401F00     MOV.W   #0x1f, R12
   \   000080   ........     CALLA   #Five_msec_Delay
     76              transmitEnable = FALSE;				// Disable TX
   \   000084   C243....     MOV.B   #0x0, &transmitEnable
     77              baudToggle ^= TRUE;					// 9600 or 115200
   \   000088   5E42....     MOV.B   &baudToggle, R14
   \   00008C   5EE3         XOR.B   #0x1, R14
   \   00008E   4E93         CMP.B   #0x0, R14
   \   000090   0224         JEQ     ??Homework_7_6
   \   000092   5E43         MOV.B   #0x1, R14
   \   000094   013C         JMP     ??Homework_7_7
   \                     ??Homework_7_6:
   \   000096   4E43         MOV.B   #0x0, R14
   \                     ??Homework_7_7:
   \   000098   C24E....     MOV.B   R14, &baudToggle
     78              Init_Serial_UCA1(baudToggle);       // Initialize USCI-Baud Rate
   \   00009C   5C42....     MOV.B   &baudToggle, R12
   \   0000A0   ........     CALLA   #Init_Serial_UCA1
     79           
     80              if (baudToggle) {
   \   0000A4   C293....     CMP.B   #0x0, &baudToggle
   \   0000A8   0B24         JEQ     ??Homework_7_8
     81                display_3 = "   Baud:  ";
   \   0000AA   B240........ MOV.W   #`?<Constant "   Baud:  ">`, &display_3
     82                posL3 = LINE_POS_L0;
   \   0000B0   C243....     MOV.B   #0x0, &posL3
     83                display_4 = "   9600   ";
   \   0000B4   B240........ MOV.W   #`?<Constant "   9600   ">`, &display_4
     84                posL4 = LINE_POS_L0;
   \   0000BA   C243....     MOV.B   #0x0, &posL4
   \   0000BE   0A3C         JMP     ??Homework_7_9
     85              }
     86              else {
     87                display_3 = "   Baud:  ";
   \                     ??Homework_7_8:
   \   0000C0   B240........ MOV.W   #`?<Constant "   Baud:  ">`, &display_3
     88                posL3 = LINE_POS_L0;
   \   0000C6   C243....     MOV.B   #0x0, &posL3
     89                display_4 = "  115200  ";
   \   0000CA   B240........ MOV.W   #`?<Constant "  115200  ">`, &display_4
     90                posL4 = LINE_POS_L0;      
   \   0000D0   C243....     MOV.B   #0x0, &posL4
     91              }
     92                
     93                display_1[LINE_POS_L9] = ' ';      
   \                     ??Homework_7_9:
   \   0000D4   1F42....     MOV.W   &display_1, R15
   \   0000D8   FF4020000900 MOV.B   #0x20, 0x9(R15)
     94                
     95          // Re-Enable TX
     96            transmitEnable = TRUE;
   \   0000DE   D243....     MOV.B   #0x1, &transmitEnable
     97            Display_Process();
   \   0000E2   ........     CALLA   #Display_Process
     98            }
     99          
    100                if (transmitEnable) { 
   \                     ??Homework_7_5:
   \   0000E6   C293....     CMP.B   #0x0, &transmitEnable
   \   0000EA   5C24         JEQ     ??Homework_7_10
    101                  // Transmit
    102                    temp = txWrite++;
   \   0000EC   1F42....     MOV.W   &txWrite, R15
   \   0000F0   0E4F         MOV.W   R15, R14
   \   0000F2   1E53         ADD.W   #0x1, R14
   \   0000F4   824E....     MOV.W   R14, &txWrite
   \   0000F8   0A4F         MOV.W   R15, R10
    103                    UCA1TXBUF = TX_Char[temp];
   \   0000FA   5F4A....     MOV.B   TX_Char(R10), R15
   \   0000FE   4F4F         MOV.B   R15, R15
   \   000100   824FEE05     MOV.W   R15, &0x5ee
    104                    if (txWrite >= (SW_SEL_8)) {
   \   000104   B292....     CMP.W   #0x8, &txWrite
   \   000108   0228         JNC     ??Homework_7_11
    105                      txWrite = INITIAL;
   \   00010A   8243....     MOV.W   #0x0, &txWrite
    106                    }
    107                    
    108          		// Display with Marquee Shift
    109                    display_1[LINE_POS_L0] = display_1[LINE_POS_L1];
   \                     ??Homework_7_11:
   \   00010E   1F42....     MOV.W   &display_1, R15
   \   000112   1E42....     MOV.W   &display_1, R14
   \   000116   DE4F01000000 MOV.B   0x1(R15), 0(R14)
    110                    display_1[LINE_POS_L1] = display_1[LINE_POS_L2];
   \   00011C   1F42....     MOV.W   &display_1, R15
   \   000120   1E42....     MOV.W   &display_1, R14
   \   000124   DE4F02000100 MOV.B   0x2(R15), 0x1(R14)
    111                    display_1[LINE_POS_L2] = display_1[LINE_POS_L3];
   \   00012A   1F42....     MOV.W   &display_1, R15
   \   00012E   1E42....     MOV.W   &display_1, R14
   \   000132   DE4F03000200 MOV.B   0x3(R15), 0x2(R14)
    112                    display_1[LINE_POS_L3] = display_1[LINE_POS_L4];
   \   000138   1F42....     MOV.W   &display_1, R15
   \   00013C   1E42....     MOV.W   &display_1, R14
   \   000140   DE4F04000300 MOV.B   0x4(R15), 0x3(R14)
    113                    display_1[LINE_POS_L4] = display_1[LINE_POS_L5];
   \   000146   1F42....     MOV.W   &display_1, R15
   \   00014A   1E42....     MOV.W   &display_1, R14
   \   00014E   DE4F05000400 MOV.B   0x5(R15), 0x4(R14)
    114                    display_1[LINE_POS_L5] = display_1[LINE_POS_L6];
   \   000154   1F42....     MOV.W   &display_1, R15
   \   000158   1E42....     MOV.W   &display_1, R14
   \   00015C   DE4F06000500 MOV.B   0x6(R15), 0x5(R14)
    115                    display_1[LINE_POS_L6] = display_1[LINE_POS_L7];
   \   000162   1F42....     MOV.W   &display_1, R15
   \   000166   1E42....     MOV.W   &display_1, R14
   \   00016A   DE4F07000600 MOV.B   0x7(R15), 0x6(R14)
    116                    display_1[LINE_POS_L7] = display_1[LINE_POS_L8];
   \   000170   1F42....     MOV.W   &display_1, R15
   \   000174   1E42....     MOV.W   &display_1, R14
   \   000178   DE4F08000700 MOV.B   0x8(R15), 0x7(R14)
    117                    display_1[LINE_POS_L8] = display_1[LINE_POS_L9];
   \   00017E   1F42....     MOV.W   &display_1, R15
   \   000182   1E42....     MOV.W   &display_1, R14
   \   000186   DE4F09000800 MOV.B   0x9(R15), 0x8(R14)
    118                    display_1[LINE_POS_L9] = RX_Char[LINE_POS_L0];
   \   00018C   1F42....     MOV.W   &display_1, R15
   \   000190   DF42....0900 MOV.B   &RX_Char, 0x9(R15)
    119                    
    120                      display_2 = "          ";
   \   000196   B240........ MOV.W   #`?<Constant "          ">`, &display_2
    121                      posL2 = LINE_POS_L0;
   \   00019C   C243....     MOV.B   #0x0, &posL2
    122                      
    123          			// Receive continuously re-enabled by USCI A1 ISR
    124                      receiveEnable = FALSE;
   \   0001A0   C243....     MOV.B   #0x0, &receiveEnable
    125                }
    126          	  
    127          Display_Process();        		// Update LCD Display
   \                     ??Homework_7_10:
   \   0001A4   ........     CALLA   #Display_Process
    128                
    129            TX_Char[LINE_POS_L0] = 'N';
   \   0001A8   F2404E00.... MOV.B   #0x4e, &TX_Char
    130            TX_Char[LINE_POS_L1] = 'C';
   \   0001AE   F2404300.... MOV.B   #0x43, &TX_Char + 1
    131            TX_Char[LINE_POS_L2] = 'S';
   \   0001B4   F2405300.... MOV.B   #0x53, &TX_Char + 2
    132            TX_Char[LINE_POS_L3] = 'U';
   \   0001BA   F2405500.... MOV.B   #0x55, &TX_Char + 3
    133            TX_Char[LINE_POS_L4] = ' ';
   \   0001C0   F2402000.... MOV.B   #0x20, &TX_Char + 4
    134            TX_Char[LINE_POS_L5] = ' ';
   \   0001C6   F2402000.... MOV.B   #0x20, &TX_Char + 5
    135            TX_Char[LINE_POS_L6] = '#';
   \   0001CC   F2402300.... MOV.B   #0x23, &TX_Char + 6
    136            TX_Char[LINE_POS_L7] = '1';
   \   0001D2   F2403100.... MOV.B   #0x31, &TX_Char + 7
    137          
    138            if (!receiveEnable) {
   \   0001D8   C293....     CMP.B   #0x0, &receiveEnable
   \   0001DC   0320         JNE     ??Homework_7_12
    139            RX_Char[LINE_POS_L0] = ' ';
   \   0001DE   F2402000.... MOV.B   #0x20, &RX_Char
    140            }
    141             
    142            if(Time_Sequence > CASE250){                  // Fail-safe for clock
   \                     ??Homework_7_12:
   \   0001E4   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   0001EA   0228         JNC     ??Homework_7_13
    143              Time_Sequence = INITIAL;
   \   0001EC   8243....     MOV.W   #0x0, &Time_Sequence
    144            }
    145            if (A0_time_count > FIVE_SEC_COUNT) {
   \                     ??Homework_7_13:
   \   0001F0   B2908913.... CMP.W   #0x1389, &A0_time_count
   \   0001F6   0228         JNC     ??Homework_7_14
    146              A0_time_count = INITIAL;
   \   0001F8   8243....     MOV.W   #0x0, &A0_time_count
    147            }
    148          
    149                A0_time_count = INITIAL;
   \                     ??Homework_7_14:
   \   0001FC   8243....     MOV.W   #0x0, &A0_time_count
    150                while(A0_time_count <= HALF_SEC_COUNT);
   \                     ??Homework_7_1:
   \   000200   B290F501.... CMP.W   #0x1f5, &A0_time_count
   \   000206   FC2B         JNC     ??Homework_7_1
    151                A0_time_count = INITIAL;	  
   \   000208   8243....     MOV.W   #0x0, &A0_time_count
   \   00020C   313F         JMP     ??Homework_7_2
    152          }
   \                     ??Homework_7_4:
   \   00020E   3A41         POP.W   R10
   \   000210   1001         RETA
   \   000212                REQUIRE _A_PBIN_L
   \   000212                REQUIRE _A_UCA1TXBUF_L
    153          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Switch Two">`:
   \   000000   537769746368 DC8 "Switch Two"
   \            2054776F00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  toggles ">`:
   \   000000   2020746F6767 DC8 "  toggles "
   \            6C65732000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Baud Rates">`:
   \   000000   426175642052 DC8 "Baud Rates"
   \            6174657300  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "__________">`:
   \   000000   5F5F5F5F5F5F DC8 "__________"
   \            5F5F5F5F00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   Baud:  ">`:
   \   000000   202020426175 DC8 "   Baud:  "
   \            643A202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   9600   ">`:
   \   000000   202020393630 DC8 "   9600   "
   \            3020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  115200  ">`:
   \   000000   202031313532 DC8 "  115200  "
   \            3030202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Homework_7
        6   -> Display_Process
        6   -> Five_msec_Delay
        6   -> Init_Serial_UCA1


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "   9600   ">
      11  ?<Constant "   Baud:  ">
      11  ?<Constant "  115200  ">
      11  ?<Constant "  toggles ">
      11  ?<Constant "Baud Rates">
      11  ?<Constant "Switch Two">
      11  ?<Constant "__________">
     530  Homework_7
       2  _A_PBIN_L
       2  _A_UCA1TXBUF_L

 
 530 bytes in segment CODE
   4 bytes in segment DATA16_AN
  88 bytes in segment DATA16_C
 
 530 bytes of CODE  memory
  88 bytes of CONST memory
   0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
