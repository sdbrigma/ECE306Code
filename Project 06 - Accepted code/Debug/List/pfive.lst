###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  17:54:47
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Christopher\Documents\ECE 306\Project_06\pfive.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\pfive.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\pfive.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\pfive.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\pfive.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the ADC detection routine module
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //Points to Header files for Preprocessing
     12          #include  "msp430.h"
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          

   \                                 In  segment CODE, align 2
     16          void P_Five_Drive(void){
   \                     P_Five_Drive:
   \   000000   3B15         PUSHM.W #0x4, R11
     17          //******************************************************************************
     18          //
     19          //  Description: This file contains the ADC detection routine module
     20          //
     21          //
     22          //  Christopher Woedy
     23          //  Sept 2015
     24          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     25          //
     26          // Globals: 
     27          //
     28          // Passed:
     29          //
     30          // Local: reverseTime
     31          //
     32          // Return: VOID
     33          //
     34          //****************************************************************************** 
     35            
     36                // Initialize
     37                unsigned int reverseTime = INITIAL;
   \   000002   0A43         MOV.W   #0x0, R10
     38                unsigned int forwardTime = INITIAL;
   \   000004   0B43         MOV.W   #0x0, R11
     39              
     40                adc_RD_Enable = FALSE;
   \   000006   C243....     MOV.B   #0x0, &adc_RD_Enable
     41                adc_LD_Enable = FALSE; 
   \   00000A   C243....     MOV.B   #0x0, &adc_LD_Enable
     42                thumbEnable = FALSE;
   \   00000E   C243....     MOV.B   #0x0, &thumbEnable
     43                tempEnable = FALSE;
   \   000012   C243....     MOV.B   #0x0, &tempEnable
     44                batEnable  = FALSE; 
   \   000016   C243....     MOV.B   #0x0, &batEnable
     45                
     46          	// Display GUI
     47                lcd_BIG_mid();
   \   00001A   ........     CALLA   #lcd_BIG_mid
     48            
     49                display_1 = "----------";
   \   00001E   B240........ MOV.W   #`?<Constant "----------">`, &display_1
     50                posL1 = LINE_POS_L0;
   \   000024   C243....     MOV.B   #0x0, &posL1
     51                display_2 = "FORWARD";
   \   000028   B240........ MOV.W   #`?<Constant "FORWARD">`, &display_2
     52                posL2 = LINE_POS_L2;
   \   00002E   E243....     MOV.B   #0x2, &posL2
     53                display_3 = "----------";
   \   000032   B240........ MOV.W   #`?<Constant "----------">`, &display_3
     54                posL3 = LINE_POS_L0;
   \   000038   C243....     MOV.B   #0x0, &posL3
     55                display_4 =  "";
   \   00003C   B240........ MOV.W   #`?<Constant "">`, &display_4
     56                posL4 = LINE_POS_L0;
   \   000042   C243....     MOV.B   #0x0, &posL4
     57                
     58                Display_Process();
   \   000046   ........     CALLA   #Display_Process
     59                
     60                int i= TEN_ITERATIONS;
   \   00004A   38400A00     MOV.W   #0xa, R8
     61                while(i) {
   \                     ??P_Five_Drive_0:
   \   00004E   0893         CMP.W   #0x0, R8
   \   000050   0424         JEQ     ??P_Five_Drive_11
     62                ADC10_Process();
   \   000052   ........     CALLA   #ADC10_Process
     63                  i--;
   \   000056   3853         ADD.W   #0xffff, R8
   \   000058   FA3F         JMP     ??P_Five_Drive_0
     64                }
     65                
     66                Right_Forward_Off();
   \                     ??P_Five_Drive_11:
   \   00005A   ........     CALLA   #Right_Forward_Off
     67                Left_Forward_Off();
   \   00005E   ........     CALLA   #Left_Forward_Off
     68                Right_Reverse_Off();
   \   000062   ........     CALLA   #Right_Reverse_Off
     69                Left_Reverse_Off();
   \   000066   ........     CALLA   #Left_Reverse_Off
     70                
     71                // Forward  
     72                Time_Sequence = INITIAL;
   \   00006A   8243....     MOV.W   #0x0, &Time_Sequence
     73                A0_time_count = INITIAL;
   \   00006E   8243....     MOV.W   #0x0, &A0_time_count
     74                
     75            while(ALWAYS) {                            
     76                
     77                 ADC10_Process(); ADC10_Process(); ADC10_Process(); ADC10_Process(); ADC10_Process();
   \                     ??P_Five_Drive_1:
   \   000072   ........     CALLA   #ADC10_Process
   \   000076   ........     CALLA   #ADC10_Process
   \   00007A   ........     CALLA   #ADC10_Process
   \   00007E   ........     CALLA   #ADC10_Process
   \   000082   ........     CALLA   #ADC10_Process
     78                // Stop if blackline is detected
     79                if ((ADC_Left_Detector >= (blackLineLeft - TOLERANCE))
     80                    && (ADC_Right_Detector >= (blackLineRight - TOLERANCE))) break;
   \   000086   1F42....     MOV.W   &blackLineLeft, R15
   \   00008A   3F5090FE     ADD.W   #0xfe90, R15
   \   00008E   829F....     CMP.W   R15, &ADC_Left_Detector
   \   000092   1928         JNC     ??P_Five_Drive_12
   \   000094   1F42....     MOV.W   &blackLineRight, R15
   \   000098   3F5090FE     ADD.W   #0xfe90, R15
   \   00009C   829F....     CMP.W   R15, &ADC_Right_Detector
   \   0000A0   1228         JNC     ??P_Five_Drive_12
     81              
     82                Left_Forward_On(MOTOR_ENABLE);
     83                Left_Forward_Off();
     84                Right_Forward_On(MOTOR_ENABLE);
     85                Right_Forward_Off();
     86          
     87              }
     88            
     89                Right_Forward_Off();
   \   0000A2   ........     CALLA   #Right_Forward_Off
     90                Left_Forward_Off();
   \   0000A6   ........     CALLA   #Left_Forward_Off
     91                Right_Reverse_Off();
   \   0000AA   ........     CALLA   #Right_Reverse_Off
     92                Left_Reverse_Off();
   \   0000AE   ........     CALLA   #Left_Reverse_Off
     93            
     94               // Pause
     95                display_2 =  "WAIT...";
   \   0000B2   B240........ MOV.W   #`?<Constant "WAIT...">`, &display_2
     96                Display_Process();
   \   0000B8   ........     CALLA   #Display_Process
     97                Time_Sequence = INITIAL;
   \   0000BC   8243....     MOV.W   #0x0, &Time_Sequence
     98                A0_time_count = INITIAL;
   \   0000C0   8243....     MOV.W   #0x0, &A0_time_count
   \   0000C4   0B3C         JMP     ??P_Five_Drive_2
   \                     ??P_Five_Drive_12:
   \   0000C6   1C43         MOV.W   #0x1, R12
   \   0000C8   ........     CALLA   #Left_Forward_On
   \   0000CC   ........     CALLA   #Left_Forward_Off
   \   0000D0   1C43         MOV.W   #0x1, R12
   \   0000D2   ........     CALLA   #Right_Forward_On
   \   0000D6   ........     CALLA   #Right_Forward_Off
   \   0000DA   CB3F         JMP     ??P_Five_Drive_1
     99          
    100                while(A0_time_count <= HALF_SEC_COUNT) {                            
   \                     ??P_Five_Drive_2:
   \   0000DC   B290F501.... CMP.W   #0x1f5, &A0_time_count
   \   0000E2   FC2B         JNC     ??P_Five_Drive_2
    101          
    102                 }
    103            
    104              // Reverse  
    105                display_2 =  "REVERSE";
   \   0000E4   B240........ MOV.W   #`?<Constant "REVERSE">`, &display_2
    106                Display_Process();
   \   0000EA   ........     CALLA   #Display_Process
    107                Time_Sequence = INITIAL;
   \   0000EE   8243....     MOV.W   #0x0, &Time_Sequence
    108                A0_time_count = INITIAL;
   \   0000F2   8243....     MOV.W   #0x0, &A0_time_count
    109                
    110            while(ALWAYS) {                            
    111                
    112                 ADC10_Process(); ADC10_Process(); ADC10_Process(); ADC10_Process(); ADC10_Process();
   \                     ??P_Five_Drive_3:
   \   0000F6   ........     CALLA   #ADC10_Process
   \   0000FA   ........     CALLA   #ADC10_Process
   \   0000FE   ........     CALLA   #ADC10_Process
   \   000102   ........     CALLA   #ADC10_Process
   \   000106   ........     CALLA   #ADC10_Process
    113                reverseTime++;
   \   00010A   1A53         ADD.W   #0x1, R10
    114                // Stop if blackline is detected
    115                if ((ADC_Left_Detector >= (blackLineLeft - TOLERANCE))
    116                    && (ADC_Right_Detector >= (blackLineRight - TOLERANCE))
    117                      && (A0_time_count >= ONE_SEC_COUNT)) break;
   \   00010C   1F42....     MOV.W   &blackLineLeft, R15
   \   000110   3F5090FE     ADD.W   #0xfe90, R15
   \   000114   829F....     CMP.W   R15, &ADC_Left_Detector
   \   000118   1D28         JNC     ??P_Five_Drive_13
   \   00011A   1F42....     MOV.W   &blackLineRight, R15
   \   00011E   3F5090FE     ADD.W   #0xfe90, R15
   \   000122   829F....     CMP.W   R15, &ADC_Right_Detector
   \   000126   1628         JNC     ??P_Five_Drive_13
   \   000128   B290E803.... CMP.W   #0x3e8, &A0_time_count
   \   00012E   1228         JNC     ??P_Five_Drive_13
    118              
    119                Left_Reverse_On(MOTOR_ENABLE);
    120                Left_Reverse_Off();
    121                Right_Reverse_On(MOTOR_ENABLE);
    122                Right_Reverse_Off();
    123          
    124              }
    125            
    126                Right_Forward_Off();
   \   000130   ........     CALLA   #Right_Forward_Off
    127                Left_Forward_Off();
   \   000134   ........     CALLA   #Left_Forward_Off
    128                Right_Reverse_Off();
   \   000138   ........     CALLA   #Right_Reverse_Off
    129                Left_Reverse_Off();
   \   00013C   ........     CALLA   #Left_Reverse_Off
    130            
    131               // Pause
    132                display_2 =  "WAIT...";
   \   000140   B240........ MOV.W   #`?<Constant "WAIT...">`, &display_2
    133                Display_Process();
   \   000146   ........     CALLA   #Display_Process
    134                Time_Sequence = INITIAL;
   \   00014A   8243....     MOV.W   #0x0, &Time_Sequence
    135                A0_time_count = INITIAL;
   \   00014E   8243....     MOV.W   #0x0, &A0_time_count
   \   000152   0B3C         JMP     ??P_Five_Drive_4
   \                     ??P_Five_Drive_13:
   \   000154   1C43         MOV.W   #0x1, R12
   \   000156   ........     CALLA   #Left_Reverse_On
   \   00015A   ........     CALLA   #Left_Reverse_Off
   \   00015E   1C43         MOV.W   #0x1, R12
   \   000160   ........     CALLA   #Right_Reverse_On
   \   000164   ........     CALLA   #Right_Reverse_Off
   \   000168   C63F         JMP     ??P_Five_Drive_3
    136          
    137                while(A0_time_count <= HALF_SEC_COUNT) {                            
   \                     ??P_Five_Drive_4:
   \   00016A   B290F501.... CMP.W   #0x1f5, &A0_time_count
   \   000170   FC2B         JNC     ??P_Five_Drive_4
    138          
    139                 }
    140                reverseTime >>= TRUE;
   \   000172   5A03         RRUM.W  #0x1, R10
    141                
    142                // Forward  
    143                display_2 =  "FORWARD";
   \   000174   B240........ MOV.W   #`?<Constant "FORWARD">`, &display_2
    144                Display_Process();
   \   00017A   ........     CALLA   #Display_Process
    145                Time_Sequence = INITIAL;
   \   00017E   8243....     MOV.W   #0x0, &Time_Sequence
    146                A0_time_count = INITIAL;
   \   000182   8243....     MOV.W   #0x0, &A0_time_count
    147            
    148              while(forwardTime <= reverseTime) {                            
   \                     ??P_Five_Drive_5:
   \   000186   0A9B         CMP.W   R11, R10
   \   000188   0E28         JNC     ??P_Five_Drive_14
    149                ADC10_Process();
   \   00018A   ........     CALLA   #ADC10_Process
    150                forwardTime++;
   \   00018E   1B53         ADD.W   #0x1, R11
    151                
    152                Left_Forward_On(MOTOR_ENABLE);
   \   000190   1C43         MOV.W   #0x1, R12
   \   000192   ........     CALLA   #Left_Forward_On
    153                Left_Forward_Off();
   \   000196   ........     CALLA   #Left_Forward_Off
    154                Right_Forward_On(MOTOR_ENABLE);
   \   00019A   1C43         MOV.W   #0x1, R12
   \   00019C   ........     CALLA   #Right_Forward_On
    155                Right_Forward_Off();
   \   0001A0   ........     CALLA   #Right_Forward_Off
   \   0001A4   F03F         JMP     ??P_Five_Drive_5
    156              }
    157              
    158                Right_Forward_Off();
   \                     ??P_Five_Drive_14:
   \   0001A6   ........     CALLA   #Right_Forward_Off
    159                Left_Forward_Off();
   \   0001AA   ........     CALLA   #Left_Forward_Off
    160                Right_Reverse_Off();
   \   0001AE   ........     CALLA   #Right_Reverse_Off
    161                Left_Reverse_Off();
   \   0001B2   ........     CALLA   #Left_Reverse_Off
    162            
    163               // Pause
    164                display_2 =  "WAIT...";
   \   0001B6   B240........ MOV.W   #`?<Constant "WAIT...">`, &display_2
    165                Display_Process();
   \   0001BC   ........     CALLA   #Display_Process
    166                Time_Sequence = INITIAL;
   \   0001C0   8243....     MOV.W   #0x0, &Time_Sequence
    167                A0_time_count = INITIAL;
   \   0001C4   8243....     MOV.W   #0x0, &A0_time_count
    168          
    169                while(A0_time_count <= HALF_SEC_COUNT) {                            
   \                     ??P_Five_Drive_6:
   \   0001C8   B290F501.... CMP.W   #0x1f5, &A0_time_count
   \   0001CE   FC2B         JNC     ??P_Five_Drive_6
    170          
    171                 }
    172                
    173                // Clockwise  
    174                display_2 =  "CLOCKWISE";
   \   0001D0   B240........ MOV.W   #`?<Constant "CLOCKWISE">`, &display_2
    175                posL2 = LINE_POS_L1;
   \   0001D6   D243....     MOV.B   #0x1, &posL2
    176                Display_Process();
   \   0001DA   ........     CALLA   #Display_Process
    177                Time_Sequence = INITIAL;
   \   0001DE   8243....     MOV.W   #0x0, &Time_Sequence
    178                A0_time_count = INITIAL;
   \   0001E2   8243....     MOV.W   #0x0, &A0_time_count
    179            
    180              while(A0_time_count <= TWO_SEC_COUNT) {                            
   \                     ??P_Five_Drive_7:
   \   0001E6   B290D107.... CMP.W   #0x7d1, &A0_time_count
   \   0001EC   0B2C         JC      ??P_Five_Drive_15
    181                
    182                Left_Forward_On(MOTOR_ENABLE);
   \   0001EE   1C43         MOV.W   #0x1, R12
   \   0001F0   ........     CALLA   #Left_Forward_On
    183                Left_Forward_Off();
   \   0001F4   ........     CALLA   #Left_Forward_Off
    184                Right_Reverse_On(MOTOR_ENABLE);
   \   0001F8   1C43         MOV.W   #0x1, R12
   \   0001FA   ........     CALLA   #Right_Reverse_On
    185                Right_Reverse_Off();
   \   0001FE   ........     CALLA   #Right_Reverse_Off
   \   000202   F13F         JMP     ??P_Five_Drive_7
    186          
    187              }
    188              
    189               Right_Forward_Off();
   \                     ??P_Five_Drive_15:
   \   000204   ........     CALLA   #Right_Forward_Off
    190                Left_Forward_Off();
   \   000208   ........     CALLA   #Left_Forward_Off
    191                Right_Reverse_Off();
   \   00020C   ........     CALLA   #Right_Reverse_Off
    192                Left_Reverse_Off();
   \   000210   ........     CALLA   #Left_Reverse_Off
    193            
    194               // Pause
    195                display_2 =  "WAIT...";
   \   000214   B240........ MOV.W   #`?<Constant "WAIT...">`, &display_2
    196                Display_Process();
   \   00021A   ........     CALLA   #Display_Process
    197                Time_Sequence = INITIAL;
   \   00021E   8243....     MOV.W   #0x0, &Time_Sequence
    198                A0_time_count = INITIAL;
   \   000222   8243....     MOV.W   #0x0, &A0_time_count
    199          
    200                while(A0_time_count <= HALF_SEC_COUNT) {                            
   \                     ??P_Five_Drive_8:
   \   000226   B290F501.... CMP.W   #0x1f5, &A0_time_count
   \   00022C   FC2B         JNC     ??P_Five_Drive_8
    201          
    202                 }
    203                
    204                // Counter-clockwise  
    205                display_1 =  "COUNTER";
   \   00022E   B240........ MOV.W   #`?<Constant "COUNTER">`, &display_1
    206                posL1 = LINE_POS_L2;
   \   000234   E243....     MOV.B   #0x2, &posL1
    207                display_2 =  "CLOCKWISE";
   \   000238   B240........ MOV.W   #`?<Constant "CLOCKWISE">`, &display_2
    208                posL2 = LINE_POS_L1;
   \   00023E   D243....     MOV.B   #0x1, &posL2
    209                Display_Process();
   \   000242   ........     CALLA   #Display_Process
    210                Time_Sequence = INITIAL;
   \   000246   8243....     MOV.W   #0x0, &Time_Sequence
    211                A0_time_count = INITIAL;
   \   00024A   8243....     MOV.W   #0x0, &A0_time_count
    212            
    213              while(A0_time_count <= THREE_HALF_SEC_COUNT) {                            
   \                     ??P_Five_Drive_9:
   \   00024E   B290AD0D.... CMP.W   #0xdad, &A0_time_count
   \   000254   0B2C         JC      ??P_Five_Drive_16
    214                
    215                Left_Reverse_On(MOTOR_ENABLE);
   \   000256   1C43         MOV.W   #0x1, R12
   \   000258   ........     CALLA   #Left_Reverse_On
    216                Left_Reverse_Off();
   \   00025C   ........     CALLA   #Left_Reverse_Off
    217                Right_Forward_On(MOTOR_ENABLE);
   \   000260   1C43         MOV.W   #0x1, R12
   \   000262   ........     CALLA   #Right_Forward_On
    218                Right_Forward_Off();
   \   000266   ........     CALLA   #Right_Forward_Off
   \   00026A   F13F         JMP     ??P_Five_Drive_9
    219          
    220              }
    221          
    222                Right_Forward_Off();
   \                     ??P_Five_Drive_16:
   \   00026C   ........     CALLA   #Right_Forward_Off
    223                Left_Forward_Off();
   \   000270   ........     CALLA   #Left_Forward_Off
    224                Right_Reverse_Off();
   \   000274   ........     CALLA   #Right_Reverse_Off
    225                Left_Reverse_Off();
   \   000278   ........     CALLA   #Left_Reverse_Off
    226              
    227                // Pause
    228                display_1 =  "----------";
   \   00027C   B240........ MOV.W   #`?<Constant "----------">`, &display_1
    229                posL1 = LINE_POS_L0;
   \   000282   C243....     MOV.B   #0x0, &posL1
    230                display_2 =  "WAIT...";
   \   000286   B240........ MOV.W   #`?<Constant "WAIT...">`, &display_2
    231                Display_Process();
   \   00028C   ........     CALLA   #Display_Process
    232                Time_Sequence = INITIAL;
   \   000290   8243....     MOV.W   #0x0, &Time_Sequence
    233                A0_time_count = INITIAL;
   \   000294   8243....     MOV.W   #0x0, &A0_time_count
    234          
    235            while(A0_time_count <= HALF_SEC_COUNT) {                            
   \                     ??P_Five_Drive_10:
   \   000298   B290F501.... CMP.W   #0x1f5, &A0_time_count
   \   00029E   FC2B         JNC     ??P_Five_Drive_10
    236               
    237              }
    238              
    239          	// Finalize Function
    240                Time_Sequence = INITIAL;
   \   0002A0   8243....     MOV.W   #0x0, &Time_Sequence
    241                Right_Forward_Off();
   \   0002A4   ........     CALLA   #Right_Forward_Off
    242                Left_Forward_Off();
   \   0002A8   ........     CALLA   #Left_Forward_Off
    243                Right_Reverse_Off();
   \   0002AC   ........     CALLA   #Right_Reverse_Off
    244                Left_Reverse_Off();
   \   0002B0   ........     CALLA   #Left_Reverse_Off
    245                
    246                display_1 = "P. Five";
   \   0002B4   B240........ MOV.W   #`?<Constant "P. Five">`, &display_1
    247                posL1 = LINE_POS_L2;
   \   0002BA   E243....     MOV.B   #0x2, &posL1
    248                display_2 = "Complete!";
   \   0002BE   B240........ MOV.W   #`?<Constant "Complete!">`, &display_2
    249                posL2 = LINE_POS_L1;
   \   0002C4   D243....     MOV.B   #0x1, &posL2
    250                display_3 = "Push";
   \   0002C8   B240........ MOV.W   #`?<Constant "Push">`, &display_3
    251                posL3 = LINE_POS_L3;
   \   0002CE   F2400300.... MOV.B   #0x3, &posL3
    252                display_4 =  "Select";
   \   0002D4   B240........ MOV.W   #`?<Constant "Select">`, &display_4
    253                posL4 = LINE_POS_L2;
   \   0002DA   E243....     MOV.B   #0x2, &posL4
    254          
    255                lcd_4line();      
   \   0002DE   ........     CALLA   #lcd_4line
    256                Display_Process();
   \   0002E2   ........     CALLA   #Display_Process
    257            
    258          }
   \   0002E6   3817         POPM.W  #0x4, R11
   \   0002E8   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "FORWARD">`:
   \   000000   464F52574152 DC8 "FORWARD"
   \            4400        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WAIT...">`:
   \   000000   574149542E2E DC8 "WAIT..."
   \            2E00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "REVERSE">`:
   \   000000   524556455253 DC8 "REVERSE"
   \            4500        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CLOCKWISE">`:
   \   000000   434C4F434B57 DC8 "CLOCKWISE"
   \            49534500    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "COUNTER">`:
   \   000000   434F554E5445 DC8 "COUNTER"
   \            5200        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "P. Five">`:
   \   000000   502E20466976 DC8 "P. Five"
   \            6500        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Complete!">`:
   \   000000   436F6D706C65 DC8 "Complete!"
   \            74652100    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Push">`:
   \   000000   5075736800   DC8 "Push"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Select">`:
   \   000000   53656C656374 DC8 "Select"
   \            00          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   P_Five_Drive
       12   -> ADC10_Process
       12   -> Display_Process
       12   -> Left_Forward_Off
       12   -> Left_Forward_On
       12   -> Left_Reverse_Off
       12   -> Left_Reverse_On
       12   -> Right_Forward_Off
       12   -> Right_Forward_On
       12   -> Right_Reverse_Off
       12   -> Right_Reverse_On
       12   -> lcd_4line
       12   -> lcd_BIG_mid


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      11  ?<Constant "----------">
      10  ?<Constant "CLOCKWISE">
       8  ?<Constant "COUNTER">
      10  ?<Constant "Complete!">
       8  ?<Constant "FORWARD">
       8  ?<Constant "P. Five">
       5  ?<Constant "Push">
       8  ?<Constant "REVERSE">
       7  ?<Constant "Select">
       8  ?<Constant "WAIT...">
     746  P_Five_Drive

 
 746 bytes in segment CODE
  84 bytes in segment DATA16_C
 
 746 bytes of CODE  memory
  84 bytes of CONST memory

Errors: none
Warnings: none
