###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           02/Nov/2015  17:54:46
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Christopher\Documents\ECE 306\Project_06\main.c
#    Command line  =  
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\main.c" -lC
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\" -o
#        "C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "D:\IAR Embedded
#        Workbench\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Christopher\Documents\ECE 306\Project_06\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Christopher\Documents\ECE 306\Project_06\main.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Christopher Woedy
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          //Points to Header files for Preprocessing
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          
     18          // Initialize Global Variables from macros.h

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1
     23          extern char display_line_1[display_line_array];
     24          extern char display_line_2[display_line_array];
     25          extern char display_line_3[display_line_array];
     26          extern char display_line_4[display_line_array];
     27          extern char *display_1;
     28          extern char *display_2;
     29          extern char *display_3;
     30          extern char *display_4;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          char posL1;
   \                     posL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          char posL2;
   \                     posL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          char posL3;
   \                     posL3:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          char posL4;
   \                     posL4:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          char size_count;
   \                     size_count:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          char big;
   \                     big:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char switch_select;
   \                     switch_select:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          volatile unsigned int A0_time_count;
   \                     A0_time_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          volatile unsigned int ADC_Right_Detector;
   \                     ADC_Right_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          volatile unsigned int ADC_Left_Detector;
   \                     ADC_Left_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          volatile unsigned int ADC_Thumb;
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          volatile unsigned int ADC_Temp;
   \                     ADC_Temp:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          volatile unsigned int ADC_Bat;
   \                     ADC_Bat:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          volatile unsigned int ADC_Channel;
   \                     ADC_Channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          _Bool adc_RD_Enable;
   \                     adc_RD_Enable:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          _Bool adc_LD_Enable;
   \                     adc_LD_Enable:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          _Bool thumbEnable;
   \                     thumbEnable:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          _Bool tempEnable;
   \                     tempEnable:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          _Bool batEnable;
   \                     batEnable:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          unsigned int blackLineLeft;
   \                     blackLineLeft:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          unsigned int blackLineRight;
   \                     blackLineRight:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     52          volatile unsigned int rxRead;
   \                     rxRead:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     53          volatile unsigned int rxWrite;
   \                     rxWrite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     54          volatile unsigned int txRead;
   \                     txRead:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     55          volatile unsigned int txWrite;
   \                     txWrite:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     56          volatile char RX_Char[SMALL_RING_SIZE];
   \                     RX_Char:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     57          volatile char TX_Char[SMALL_RING_SIZE];
   \                     TX_Char:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     58          volatile _Bool transmitEnable;
   \                     transmitEnable:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     59          volatile _Bool receiveEnable;
   \                     receiveEnable:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     60          volatile _Bool baudToggle;
   \                     baudToggle:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     61          unsigned int tempCount;
   \                     tempCount:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     62          unsigned int tempDisplay[SW_SEL_10];
   \                     tempDisplay:
   \   000000                DS8 20
     63          

   \                                 In  segment CODE, align 2
     64          void main(void){
   \                     main:
     65          
     66          //******************************************************************************
     67          //
     68          //  Description: This file contains the Main Routine - "While" Operating System
     69          //
     70          //
     71          //  Christopher Woedy
     72          //  Sept 2015
     73          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     74          //
     75          // GLOBALS Declared  
     76          // control_state[CNTL_STATE_INDEX]
     77          // Time_Sequence
     78          // led_smclk
     79          // one_time
     80          // display_line_1[display_line_array]
     81          // display_line_2[display_line_array]
     82          // display_line_3[display_line_array]
     83          // display_line_4[display_line_array]
     84          // *display_1
     85          // *display_2
     86          // *display_3
     87          // *display_4
     88          // posL1
     89          // posL2
     90          // posL3
     91          // posL4
     92          // size_count
     93          // big
     94          // switch_select
     95          // A0_time_count
     96          // ADC_Right_Detector
     97          // ADC_Left_Detector
     98          // ADC_Thumb
     99          // ADC_Temp
    100          // ADC_Bat
    101          // ADC_Channel
    102          // adc_RD_Enable
    103          // adc_LD_Enable
    104          // thumbEnable
    105          // tempEnable
    106          // batEnable
    107          // blackLineLeft
    108          // blackLineRight
    109          // rxRead
    110          // rxWrite
    111          // txRead
    112          // txWrite
    113          // RX_Char[SMALL_RING_SIZE]
    114          // TX_Char[SMALL_RING_SIZE]
    115          // transmitEnable
    116          // receiveEnable
    117          // 
    118          // Global: Time_Sequence, switch_select, display_1, display_2, display_3,
    119          // display_4,  posL1, posL2, posL3, posL4, big, switch_select, A0_time_count,
    120          // ADC_Out, rxRead, rxWrite, txRead, txWrite, RX_Char[SMALL_RING_SIZE],
    121          // TX_Char[SMALL_RING_SIZE], transmitEnable, receiveEnable
    122          //
    123          // Passed:
    124          //
    125          // Local: temp
    126          //
    127          // Return:  VOID
    128          //
    129          //******************************************************************************
    130          
    131            Init_Ports();                             // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
    132            Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
    133            Init_Conditions();                        // Sets initial conditions for the LCD
   \   000008   ........     CALLA   #Init_Conditions
    134            PJOUT |= BLINK_LED;                       // Turn LED 1 on to indicate boot
   \   00000C   92D32203     BIS.W   #0x1, &0x322
    135            Time_Sequence = INITIAL;                  // Sets Time_Sequence to 0
   \   000010   8243....     MOV.W   #0x0, &Time_Sequence
    136            Init_Timers();                            // Initialize Timers
   \   000014   ........     CALLA   #Init_Timers
    137            Five_msec_Delay(LIL_DELAY);               // Delay for the clock to settle
   \   000018   3C401900     MOV.W   #0x19, R12
   \   00001C   ........     CALLA   #Five_msec_Delay
    138            PJOUT &= ~BLINK_LED;                      // Disable LED from boot wink
   \   000020   92C32203     BIC.W   #0x1, &0x322
    139            Init_LEDs();                              // Initialize LEDs
   \   000024   ........     CALLA   #Init_LEDs
    140            Init_LCD();                               // Initialize LCD
   \   000028   ........     CALLA   #Init_LCD
    141            Init_ADC();                               // Initialize ADC
   \   00002C   ........     CALLA   #Init_ADC
    142            Init_Serial_UCA1(TRUE);                   // Initialize USCI-Baud Rate 9600
   \   000030   5C43         MOV.B   #0x1, R12
   \   000032   ........     CALLA   #Init_Serial_UCA1
    143            blackLineLeft = ADC_Left_Detector;
   \   000036   9242........ MOV.W   &ADC_Left_Detector, &blackLineLeft
    144            blackLineRight = ADC_Right_Detector;
   \   00003C   9242........ MOV.W   &ADC_Right_Detector, &blackLineRight
    145            switch_select = INITIAL;
   \   000042   C243....     MOV.B   #0x0, &switch_select
    146            A0_time_count = INITIAL;
   \   000046   8243....     MOV.W   #0x0, &A0_time_count
    147            
    148          // Initial Display Set
    149            display_1 = "NCSU";
   \   00004A   B240........ MOV.W   #`?<Constant "NCSU">`, &display_1
    150            posL1 = LINE_POS_L3;
   \   000050   F2400300.... MOV.B   #0x3, &posL1
    151            display_2 = "WOLFPACK";
   \   000056   B240........ MOV.W   #`?<Constant "WOLFPACK">`, &display_2
    152            posL2 = LINE_POS_L1;
   \   00005C   D243....     MOV.B   #0x1, &posL2
    153            display_3 = "ECE306";
   \   000060   B240........ MOV.W   #`?<Constant "ECE306">`, &display_3
    154            posL3 = LINE_POS_L2;
   \   000066   E243....     MOV.B   #0x2, &posL3
    155            display_4 = "Ck.Woedy";
   \   00006A   B240........ MOV.W   #`?<Constant "Ck.Woedy">`, &display_4
    156            posL4 = LINE_POS_L1;
   \   000070   D243....     MOV.B   #0x1, &posL4
    157            big = INITIAL;
   \   000074   C243....     MOV.B   #0x0, &big
    158            Display_Process();
   \   000078   ........     CALLA   #Display_Process
    159            
    160          //------------------------------------------------------------------------------
    161          // Beginning of the "While" Operating System
    162          //------------------------------------------------------------------------------
    163           while(ALWAYS) {                // Can the Operating system run
    164            
    165               switch(Time_Sequence){
   \                     ??main_0:
   \   00007C   1F42....     MOV.W   &Time_Sequence, R15
   \   000080   3F803200     SUB.W   #0x32, R15
   \   000084   2224         JEQ     ??main_3
   \   000086   3F803200     SUB.W   #0x32, R15
   \   00008A   1A24         JEQ     ??main_4
   \   00008C   3F803200     SUB.W   #0x32, R15
   \   000090   1224         JEQ     ??main_5
   \   000092   3F803200     SUB.W   #0x32, R15
   \   000096   0A24         JEQ     ??main_6
   \   000098   3F803200     SUB.W   #0x32, R15
   \   00009C   1D20         JNE     ??main_1
    166              case CASE250:                               // 1000 msec  
    167                if(one_time){
   \   00009E   C293....     CMP.B   #0x0, &one_time
   \   0000A2   0224         JEQ     ??main_7
    168                  one_time = INITIAL;
   \   0000A4   C243....     MOV.B   #0x0, &one_time
    169                }
    170                Time_Sequence = INITIAL;                  // Resets clock
   \                     ??main_7:
   \   0000A8   8243....     MOV.W   #0x0, &Time_Sequence
    171              case CASE200:                               // 1000 msec  
    172                if(one_time){
   \                     ??main_6:
   \   0000AC   C293....     CMP.B   #0x0, &one_time
   \   0000B0   0224         JEQ     ??main_5
    173                  one_time = INITIAL;
   \   0000B2   C243....     MOV.B   #0x0, &one_time
    174                }
    175              case CASE150:                               // 750 msec  
    176                if(one_time){
   \                     ??main_5:
   \   0000B6   C293....     CMP.B   #0x0, &one_time
   \   0000BA   0224         JEQ     ??main_4
    177                  one_time = INITIAL;
   \   0000BC   C243....     MOV.B   #0x0, &one_time
    178                }
    179              case CASE100:                               // 500 msec  
    180                if(one_time){
   \                     ??main_4:
   \   0000C0   C293....     CMP.B   #0x0, &one_time
   \   0000C4   0224         JEQ     ??main_3
    181                  one_time = INITIAL;
   \   0000C6   C243....     MOV.B   #0x0, &one_time
    182                }
    183              case  CASE50:                               // 250 msec  
    184                if(one_time){
   \                     ??main_3:
   \   0000CA   C293....     CMP.B   #0x0, &one_time
   \   0000CE   0224         JEQ     ??main_8
    185                  one_time = INITIAL;
   \   0000D0   C243....     MOV.B   #0x0, &one_time
    186                }
    187                Display_Process();        		// Update LCD Display
   \                     ??main_8:
   \   0000D4   ........     CALLA   #Display_Process
    188                break;                                
    189              default: break;  
    190            }
    191            ADC10_Process();
   \                     ??main_1:
   \   0000D8   ........     CALLA   #ADC10_Process
    192            Switches_Process();                           // Check for switch state change 
   \   0000DC   ........     CALLA   #Switches_Process
    193            if(Time_Sequence > CASE250){                  // Fail-safe for clock
   \   0000E0   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   0000E6   0228         JNC     ??main_9
    194              Time_Sequence = INITIAL;
   \   0000E8   8243....     MOV.W   #0x0, &Time_Sequence
    195            }
    196            if (A0_time_count > FIVE_SEC_COUNT) {
   \                     ??main_9:
   \   0000EC   B2908913.... CMP.W   #0x1389, &A0_time_count
   \   0000F2   C42B         JNC     ??main_0
    197              A0_time_count = INITIAL;
   \   0000F4   8243....     MOV.W   #0x0, &A0_time_count
   \   0000F8   C13F         JMP     ??main_0
   \   0000FA   0343         NOP
   \   0000FC                REQUIRE _A_PJOUT_L
    198            }
    199           }
    200          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Ck.Woedy">`:
   \   000000   436B2E576F65 DC8 "Ck.Woedy"
   \            647900      

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> ADC10_Process
        4   -> Display_Process
        4   -> Five_msec_Delay
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Serial_UCA1
        4   -> Init_Timers
        4   -> Switches_Process


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant "Ck.Woedy">
       7  ?<Constant "ECE306">
       5  ?<Constant "NCSU">
       9  ?<Constant "WOLFPACK">
       2  A0_time_count
       2  ADC_Bat
       2  ADC_Channel
       2  ADC_Left_Detector
       2  ADC_Right_Detector
       2  ADC_Temp
       2  ADC_Thumb
      16  RX_Char
      16  TX_Char
       2  Time_Sequence
       2  _A_PJOUT_L
       1  adc_LD_Enable
       1  adc_RD_Enable
       1  batEnable
       1  baudToggle
       1  big
       2  blackLineLeft
       2  blackLineRight
       3  control_state
       1  led_smclk
     252  main
       1  one_time
       1  posL1
       1  posL2
       1  posL3
       1  posL4
       1  receiveEnable
       2  rxRead
       2  rxWrite
       1  size_count
       1  switch_select
       2  tempCount
      20  tempDisplay
       1  tempEnable
       1  thumbEnable
       1  transmitEnable
       2  txRead
       2  txWrite

 
 252 bytes in segment CODE
   2 bytes in segment DATA16_AN
  30 bytes in segment DATA16_C
 102 bytes in segment DATA16_Z
 
 252 bytes of CODE  memory
  30 bytes of CONST memory
 102 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
