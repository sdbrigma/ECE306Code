###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           16/Nov/2015  15:36:44
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\display.c
#    Command line  =  
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\display.c" -lC
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\display.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\display.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\display.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Dispaly Process function controlling
      4          //  the LCD.
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          #include  "macros.h"
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          

   \                                 In  segment CODE, align 2
     17          void Display_Process(void){
   \                     Display_Process:
     18          // Function that initialezes LCD display
     19            ClrDisplay();
   \   000000   ........     CALLA   #ClrDisplay
     20            lcd_out(display_1, LCD_HOME_L1, posL1);
   \   000004   5E42....     MOV.B   &posL1, R14
   \   000008   7D408000     MOV.B   #0x80, R13
   \   00000C   1C42....     MOV.W   &display_1, R12
   \   000010   ........     CALLA   #lcd_out
     21            lcd_out(display_2, LCD_HOME_L2, posL2);
   \   000014   5E42....     MOV.B   &posL2, R14
   \   000018   7D40A000     MOV.B   #0xa0, R13
   \   00001C   1C42....     MOV.W   &display_2, R12
   \   000020   ........     CALLA   #lcd_out
     22            lcd_out(display_3, LCD_HOME_L3, posL3);
   \   000024   5E42....     MOV.B   &posL3, R14
   \   000028   7D40C000     MOV.B   #0xc0, R13
   \   00002C   1C42....     MOV.W   &display_3, R12
   \   000030   ........     CALLA   #lcd_out
     23            lcd_out(display_4, LCD_HOME_L4, posL4);
   \   000034   5E42....     MOV.B   &posL4, R14
   \   000038   7D40E000     MOV.B   #0xe0, R13
   \   00003C   1C42....     MOV.W   &display_4, R12
   \   000040   ........     BRA     #lcd_out
     24          }
     25          

   \                                 In  segment CODE, align 2
     26          void setLCD(const char display1[], int pos1, const char display2[], int pos2,// ONLY TAKES STRINGS
   \                     setLCD:
     27                      const char display3[], int pos3, const char display4[], int pos4){
   \   000000   7B15         PUSHM.W #0x8, R11
   \   000002   0D12         PUSH.W  R13
   \   000004   0A4C         MOV.W   R12, R10
   \   000006   0B4E         MOV.W   R14, R11
   \   000008   084F         MOV.W   R15, R8
   \   00000A   19411600     MOV.W   0x16(SP), R9
   \   00000E   16411800     MOV.W   0x18(SP), R6
   \   000012   17411A00     MOV.W   0x1a(SP), R7
   \   000016   15411C00     MOV.W   0x1c(SP), R5
     28            int i = ZERO;
   \   00001A   0443         MOV.W   #0x0, R4
     29            posL1 = pos1;
   \   00001C   E241....     MOV.B   @SP, &posL1
     30            posL2 = pos2;
   \   000020   C248....     MOV.B   R8, &posL2
     31            posL3 = pos3;
   \   000024   C246....     MOV.B   R6, &posL3
     32            posL4 = pos4;
   \   000028   C245....     MOV.B   R5, &posL4
     33            while(display1[i] != ORIGINAL){
   \                     ??setLCD_0:
   \   00002C   0F4A         MOV.W   R10, R15
   \   00002E   0F54         ADD.W   R4, R15
   \   000030   CF930000     CMP.B   #0x0, 0(R15)
   \   000034   0924         JEQ     ??setLCD_8
     34              display_1[i] = display1[i];
   \   000036   0F4A         MOV.W   R10, R15
   \   000038   0F54         ADD.W   R4, R15
   \   00003A   1E42....     MOV.W   &display_1, R14
   \   00003E   0E54         ADD.W   R4, R14
   \   000040   EE4F0000     MOV.B   @R15, 0(R14)
     35              i++;
   \   000044   1453         ADD.W   #0x1, R4
   \   000046   F23F         JMP     ??setLCD_0
     36            }
     37            if(i != 9){
   \                     ??setLCD_8:
   \   000048   34900900     CMP.W   #0x9, R4
   \   00004C   0A24         JEQ     ??setLCD_9
     38                while(i < 9){
   \                     ??setLCD_1:
   \   00004E   34900900     CMP.W   #0x9, R4
   \   000052   0734         JGE     ??setLCD_9
     39                  display_1[i] = ORIGINAL;
   \   000054   1F42....     MOV.W   &display_1, R15
   \   000058   0F54         ADD.W   R4, R15
   \   00005A   CF430000     MOV.B   #0x0, 0(R15)
     40                  i++;
   \   00005E   1453         ADD.W   #0x1, R4
   \   000060   F63F         JMP     ??setLCD_1
     41                }
     42              }
     43            
     44            i = ZERO;
   \                     ??setLCD_9:
   \   000062   0443         MOV.W   #0x0, R4
     45            while(display2[i] != ORIGINAL){
   \                     ??setLCD_2:
   \   000064   0F4B         MOV.W   R11, R15
   \   000066   0F54         ADD.W   R4, R15
   \   000068   CF930000     CMP.B   #0x0, 0(R15)
   \   00006C   0924         JEQ     ??setLCD_10
     46              display_2[i] = display2[i];
   \   00006E   0F4B         MOV.W   R11, R15
   \   000070   0F54         ADD.W   R4, R15
   \   000072   1E42....     MOV.W   &display_2, R14
   \   000076   0E54         ADD.W   R4, R14
   \   000078   EE4F0000     MOV.B   @R15, 0(R14)
     47              i++;
   \   00007C   1453         ADD.W   #0x1, R4
   \   00007E   F23F         JMP     ??setLCD_2
     48            }
     49            
     50              if(i != 9){
   \                     ??setLCD_10:
   \   000080   34900900     CMP.W   #0x9, R4
   \   000084   0A24         JEQ     ??setLCD_11
     51                while(i < 9){
   \                     ??setLCD_3:
   \   000086   34900900     CMP.W   #0x9, R4
   \   00008A   0734         JGE     ??setLCD_11
     52                  display_2[i] = ORIGINAL;
   \   00008C   1F42....     MOV.W   &display_2, R15
   \   000090   0F54         ADD.W   R4, R15
   \   000092   CF430000     MOV.B   #0x0, 0(R15)
     53                  i++;
   \   000096   1453         ADD.W   #0x1, R4
   \   000098   F63F         JMP     ??setLCD_3
     54                }
     55              }
     56            
     57            i = ZERO;
   \                     ??setLCD_11:
   \   00009A   0443         MOV.W   #0x0, R4
     58            while(display3[i] != ORIGINAL){
   \                     ??setLCD_4:
   \   00009C   0F49         MOV.W   R9, R15
   \   00009E   0F54         ADD.W   R4, R15
   \   0000A0   CF930000     CMP.B   #0x0, 0(R15)
   \   0000A4   0924         JEQ     ??setLCD_12
     59              display_3[i] = display3[i];
   \   0000A6   0F49         MOV.W   R9, R15
   \   0000A8   0F54         ADD.W   R4, R15
   \   0000AA   1E42....     MOV.W   &display_3, R14
   \   0000AE   0E54         ADD.W   R4, R14
   \   0000B0   EE4F0000     MOV.B   @R15, 0(R14)
     60              i++;
   \   0000B4   1453         ADD.W   #0x1, R4
   \   0000B6   F23F         JMP     ??setLCD_4
     61            }
     62            
     63              if(i != 9){
   \                     ??setLCD_12:
   \   0000B8   34900900     CMP.W   #0x9, R4
   \   0000BC   0A24         JEQ     ??setLCD_13
     64                while(i < 9){
   \                     ??setLCD_5:
   \   0000BE   34900900     CMP.W   #0x9, R4
   \   0000C2   0734         JGE     ??setLCD_13
     65                  display_3[i] = ORIGINAL;
   \   0000C4   1F42....     MOV.W   &display_3, R15
   \   0000C8   0F54         ADD.W   R4, R15
   \   0000CA   CF430000     MOV.B   #0x0, 0(R15)
     66                  i++;
   \   0000CE   1453         ADD.W   #0x1, R4
   \   0000D0   F63F         JMP     ??setLCD_5
     67                }
     68              }
     69            
     70            i = ZERO;
   \                     ??setLCD_13:
   \   0000D2   0443         MOV.W   #0x0, R4
     71            while(display4[i] != ORIGINAL){
   \                     ??setLCD_6:
   \   0000D4   0F47         MOV.W   R7, R15
   \   0000D6   0F54         ADD.W   R4, R15
   \   0000D8   CF930000     CMP.B   #0x0, 0(R15)
   \   0000DC   0924         JEQ     ??setLCD_14
     72              display_4[i] = display4[i];
   \   0000DE   0F47         MOV.W   R7, R15
   \   0000E0   0F54         ADD.W   R4, R15
   \   0000E2   1E42....     MOV.W   &display_4, R14
   \   0000E6   0E54         ADD.W   R4, R14
   \   0000E8   EE4F0000     MOV.B   @R15, 0(R14)
     73              i++;
   \   0000EC   1453         ADD.W   #0x1, R4
   \   0000EE   F23F         JMP     ??setLCD_6
     74            }
     75            
     76              if(i != 9){
   \                     ??setLCD_14:
   \   0000F0   34900900     CMP.W   #0x9, R4
   \   0000F4   0A24         JEQ     ??setLCD_15
     77                while(i < 9){
   \                     ??setLCD_7:
   \   0000F6   34900900     CMP.W   #0x9, R4
   \   0000FA   0734         JGE     ??setLCD_15
     78                  display_4[i] = ORIGINAL;
   \   0000FC   1F42....     MOV.W   &display_4, R15
   \   000100   0F54         ADD.W   R4, R15
   \   000102   CF430000     MOV.B   #0x0, 0(R15)
     79                  i++;
   \   000106   1453         ADD.W   #0x1, R4
   \   000108   F63F         JMP     ??setLCD_7
     80                }
     81              }
     82            
     83            i = ZERO;
   \                     ??setLCD_15:
   \   00010A   0443         MOV.W   #0x0, R4
     84            Display_Process();
   \   00010C   ........     CALLA   #Display_Process
     85            Five_msec_Delay(30);
   \   000110   3C401E00     MOV.W   #0x1e, R12
   \   000114   ........     CALLA   #Five_msec_Delay
     86          }
   \   000118   2153         ADD.W   #0x2, SP
   \   00011A   7417         POPM.W  #0x8, R11
   \   00011C   1001         RETA
     87          

   \                                 In  segment CODE, align 2
     88          void clearLCD(void){
   \                     clearLCD:
   \   000000   0A12         PUSH.W  R10
     89            int i = ZERO;
   \   000002   0A43         MOV.W   #0x0, R10
     90            posL1 = ZERO;
   \   000004   C243....     MOV.B   #0x0, &posL1
     91            posL2 = ZERO;
   \   000008   C243....     MOV.B   #0x0, &posL2
     92            posL3 = ZERO;
   \   00000C   C243....     MOV.B   #0x0, &posL3
     93            posL4 = ZERO;
   \   000010   C243....     MOV.B   #0x0, &posL4
     94            while(i<10){
   \                     ??clearLCD_0:
   \   000014   3A900A00     CMP.W   #0xa, R10
   \   000018   1634         JGE     ??clearLCD_1
     95              display_1[i] = ORIGINAL;
   \   00001A   1F42....     MOV.W   &display_1, R15
   \   00001E   0F5A         ADD.W   R10, R15
   \   000020   CF430000     MOV.B   #0x0, 0(R15)
     96              display_2[i] = ORIGINAL;
   \   000024   1F42....     MOV.W   &display_2, R15
   \   000028   0F5A         ADD.W   R10, R15
   \   00002A   CF430000     MOV.B   #0x0, 0(R15)
     97              display_3[i] = ORIGINAL;
   \   00002E   1F42....     MOV.W   &display_3, R15
   \   000032   0F5A         ADD.W   R10, R15
   \   000034   CF430000     MOV.B   #0x0, 0(R15)
     98              display_4[i] = ORIGINAL;
   \   000038   1F42....     MOV.W   &display_4, R15
   \   00003C   0F5A         ADD.W   R10, R15
   \   00003E   CF430000     MOV.B   #0x0, 0(R15)
     99              i++;
   \   000042   1A53         ADD.W   #0x1, R10
   \   000044   E73F         JMP     ??clearLCD_0
    100            }
    101            Display_Process();
   \                     ??clearLCD_1:
   \   000046   ........     CALLA   #Display_Process
    102            Five_msec_Delay(30);
   \   00004A   3C401E00     MOV.W   #0x1e, R12
   \   00004E   ........     CALLA   #Five_msec_Delay
    103          }
   \   000052   3A41         POP.W   R10
   \   000054   1001         RETA
    104          

   \                                 In  segment CODE, align 2
    105          void displayLine1(const char display1[], int pos1){
   \                     displayLine1:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   0A4D         MOV.W   R13, R10
    106            int i = ZERO;
   \   000006   0843         MOV.W   #0x0, R8
    107            posL1 = pos1;
   \   000008   C24A....     MOV.B   R10, &posL1
    108            while(i<10){
   \                     ??displayLine1_0:
   \   00000C   38900A00     CMP.W   #0xa, R8
   \   000010   0934         JGE     ??displayLine1_1
    109              display_1[i] = display1[i];
   \   000012   0F4B         MOV.W   R11, R15
   \   000014   0F58         ADD.W   R8, R15
   \   000016   1E42....     MOV.W   &display_1, R14
   \   00001A   0E58         ADD.W   R8, R14
   \   00001C   EE4F0000     MOV.B   @R15, 0(R14)
    110              i++;
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   F43F         JMP     ??displayLine1_0
    111            }
    112            Display_Process();
   \                     ??displayLine1_1:
   \   000024   ........     CALLA   #Display_Process
    113            Five_msec_Delay(30);
   \   000028   3C401E00     MOV.W   #0x1e, R12
   \   00002C   ........     CALLA   #Five_msec_Delay
    114          }
   \   000030   3817         POPM.W  #0x4, R11
   \   000032   1001         RETA
    115          

   \                                 In  segment CODE, align 2
    116          void displayLine2(const char display2[], int pos2){
   \                     displayLine2:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   0A4D         MOV.W   R13, R10
    117            int i = ZERO;
   \   000006   0843         MOV.W   #0x0, R8
    118            posL2 = pos2;
   \   000008   C24A....     MOV.B   R10, &posL2
    119            while(i<10){
   \                     ??displayLine2_0:
   \   00000C   38900A00     CMP.W   #0xa, R8
   \   000010   0934         JGE     ??displayLine2_1
    120              display_2[i] = display2[i];
   \   000012   0F4B         MOV.W   R11, R15
   \   000014   0F58         ADD.W   R8, R15
   \   000016   1E42....     MOV.W   &display_2, R14
   \   00001A   0E58         ADD.W   R8, R14
   \   00001C   EE4F0000     MOV.B   @R15, 0(R14)
    121              i++;
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   F43F         JMP     ??displayLine2_0
    122            }
    123            Display_Process();
   \                     ??displayLine2_1:
   \   000024   ........     CALLA   #Display_Process
    124            Five_msec_Delay(30);
   \   000028   3C401E00     MOV.W   #0x1e, R12
   \   00002C   ........     CALLA   #Five_msec_Delay
    125          }
   \   000030   3817         POPM.W  #0x4, R11
   \   000032   1001         RETA
    126          

   \                                 In  segment CODE, align 2
    127          void displayLine3(const char display3[], int pos3){
   \                     displayLine3:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   0A4D         MOV.W   R13, R10
    128            int i = ZERO;
   \   000006   0843         MOV.W   #0x0, R8
    129            posL3 = pos3;
   \   000008   C24A....     MOV.B   R10, &posL3
    130            while(i<10){
   \                     ??displayLine3_0:
   \   00000C   38900A00     CMP.W   #0xa, R8
   \   000010   0934         JGE     ??displayLine3_1
    131              display_3[i] = display3[i];
   \   000012   0F4B         MOV.W   R11, R15
   \   000014   0F58         ADD.W   R8, R15
   \   000016   1E42....     MOV.W   &display_3, R14
   \   00001A   0E58         ADD.W   R8, R14
   \   00001C   EE4F0000     MOV.B   @R15, 0(R14)
    132              i++;
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   F43F         JMP     ??displayLine3_0
    133            }
    134            Display_Process();
   \                     ??displayLine3_1:
   \   000024   ........     CALLA   #Display_Process
    135            Five_msec_Delay(30);
   \   000028   3C401E00     MOV.W   #0x1e, R12
   \   00002C   ........     CALLA   #Five_msec_Delay
    136          }
   \   000030   3817         POPM.W  #0x4, R11
   \   000032   1001         RETA
    137          

   \                                 In  segment CODE, align 2
    138          void displayLine4(const char display4[], int pos4){
   \                     displayLine4:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   0A4D         MOV.W   R13, R10
    139            int i = ZERO;
   \   000006   0843         MOV.W   #0x0, R8
    140            posL4 = pos4;
   \   000008   C24A....     MOV.B   R10, &posL4
    141            while(i<10){
   \                     ??displayLine4_0:
   \   00000C   38900A00     CMP.W   #0xa, R8
   \   000010   0934         JGE     ??displayLine4_1
    142              display_4[i] = display4[i];
   \   000012   0F4B         MOV.W   R11, R15
   \   000014   0F58         ADD.W   R8, R15
   \   000016   1E42....     MOV.W   &display_4, R14
   \   00001A   0E58         ADD.W   R8, R14
   \   00001C   EE4F0000     MOV.B   @R15, 0(R14)
    143              i++;
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   F43F         JMP     ??displayLine4_0
    144            }
    145            Display_Process();
   \                     ??displayLine4_1:
   \   000024   ........     CALLA   #Display_Process
    146            Five_msec_Delay(30);
   \   000028   3C401E00     MOV.W   #0x1e, R12
   \   00002C   ........     CALLA   #Five_msec_Delay
    147          }
   \   000030   3817         POPM.W  #0x4, R11
   \   000032   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Display_Process
        4   -> ClrDisplay
        0   -> lcd_out
        4   -> lcd_out
      6   clearLCD
        6   -> Display_Process
        6   -> Five_msec_Delay
     12   displayLine1
       12   -> Display_Process
       12   -> Five_msec_Delay
     12   displayLine2
       12   -> Display_Process
       12   -> Five_msec_Delay
     12   displayLine3
       12   -> Display_Process
       12   -> Five_msec_Delay
     12   displayLine4
       12   -> Display_Process
       12   -> Five_msec_Delay
     22   setLCD
       22   -> Display_Process
       22   -> Five_msec_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      68  Display_Process
      86  clearLCD
      52  displayLine1
      52  displayLine2
      52  displayLine3
      52  displayLine4
     286  setLCD

 
 648 bytes in segment CODE
 
 648 bytes of CODE memory

Errors: none
Warnings: none
