###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           13/Nov/2015  23:09:22
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\display.c
#    Command line  =  
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\display.c" -lC
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\display.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\display.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\display.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Dispaly Process function controlling
      4          //  the LCD.
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          #include  "macros.h"
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          

   \                                 In  segment CODE, align 2
     17          void Display_Process(void){
   \                     Display_Process:
     18          // Function that initialezes LCD display
     19            ClrDisplay();
   \   000000   ........     CALLA   #ClrDisplay
     20            lcd_out(display_1, LCD_HOME_L1, posL1);
   \   000004   5E42....     MOV.B   &posL1, R14
   \   000008   7D408000     MOV.B   #0x80, R13
   \   00000C   1C42....     MOV.W   &display_1, R12
   \   000010   ........     CALLA   #lcd_out
     21            lcd_out(display_2, LCD_HOME_L2, posL2);
   \   000014   5E42....     MOV.B   &posL2, R14
   \   000018   7D40A000     MOV.B   #0xa0, R13
   \   00001C   1C42....     MOV.W   &display_2, R12
   \   000020   ........     CALLA   #lcd_out
     22            lcd_out(display_3, LCD_HOME_L3, posL3);
   \   000024   5E42....     MOV.B   &posL3, R14
   \   000028   7D40C000     MOV.B   #0xc0, R13
   \   00002C   1C42....     MOV.W   &display_3, R12
   \   000030   ........     CALLA   #lcd_out
     23            lcd_out(display_4, LCD_HOME_L4, posL4);
   \   000034   5E42....     MOV.B   &posL4, R14
   \   000038   7D40E000     MOV.B   #0xe0, R13
   \   00003C   1C42....     MOV.W   &display_4, R12
   \   000040   ........     BRA     #lcd_out
     24          }
     25          

   \                                 In  segment CODE, align 2
     26          void setLCD(char display1[], int pos1, char display2[], int pos2,
   \                     setLCD:
     27                      char display3[], int pos3, char display4[], int pos4){
   \   000000   7B15         PUSHM.W #0x8, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
   \   000008   094F         MOV.W   R15, R9
   \   00000A   16411400     MOV.W   0x14(SP), R6
   \   00000E   17411600     MOV.W   0x16(SP), R7
   \   000012   14411800     MOV.W   0x18(SP), R4
   \   000016   15411A00     MOV.W   0x1a(SP), R5
     28            display_1 = display1;
   \   00001A   824A....     MOV.W   R10, &display_1
     29            posL1 = pos1;
   \   00001E   C24B....     MOV.B   R11, &posL1
     30            display_2 = display2;
   \   000022   8248....     MOV.W   R8, &display_2
     31            posL2 = pos2;
   \   000026   C249....     MOV.B   R9, &posL2
     32            display_3 = display3;
   \   00002A   8246....     MOV.W   R6, &display_3
     33            posL3 = pos3;
   \   00002E   C247....     MOV.B   R7, &posL3
     34            display_4 = display4;
   \   000032   8244....     MOV.W   R4, &display_4
     35            posL4 = pos4;
   \   000036   C245....     MOV.B   R5, &posL4
     36            Display_Process();
   \   00003A   ........     CALLA   #Display_Process
     37            Five_msec_Delay(15);
   \   00003E   3C400F00     MOV.W   #0xf, R12
   \   000042   ........     CALLA   #Five_msec_Delay
     38          }
   \   000046   7417         POPM.W  #0x8, R11
   \   000048   1001         RETA
     39          

   \                                 In  segment CODE, align 2
     40          void clearLCD(void){
   \                     clearLCD:
     41            setLCD("          ",ZERO,"          ",ZERO,"          ",ZERO,"          ",ZERO);
   \   000000   0312         PUSH.W  #0x0
   \   000002   3012....     PUSH.W  #`?<Constant "          ">`
   \   000006   0312         PUSH.W  #0x0
   \   000008   3012....     PUSH.W  #`?<Constant "          ">`
   \   00000C   0F43         MOV.W   #0x0, R15
   \   00000E   3E40....     MOV.W   #`?<Constant "          ">`, R14
   \   000012   0D43         MOV.W   #0x0, R13
   \   000014   3C40....     MOV.W   #`?<Constant "          ">`, R12
   \   000018   ........     CALLA   #setLCD
     42          }
   \   00001C   3152         ADD.W   #0x8, SP
   \   00001E   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Display_Process
        4   -> ClrDisplay
        0   -> lcd_out
        4   -> lcd_out
     12   clearLCD
       12   -> setLCD
     20   setLCD
       20   -> Display_Process
       20   -> Five_msec_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      68  Display_Process
      32  clearLCD
      74  setLCD

 
 174 bytes in segment CODE
  11 bytes in segment DATA16_C
 
 174 bytes of CODE  memory
  11 bytes of CONST memory

Errors: none
Warnings: none
