###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           14/Nov/2015  01:55:28
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\song_menu.c
#    Command line  =  
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\song_menu.c" -lC
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\song_menu.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\song_menu.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\song_menu.c
      1          #include  "macros.h"
      2          #include  "msp430.h"
      3          #include  "functions.h"
      4          

   \                                 In  segment CODE, align 2
      5          void getSongMenu(unsigned int adc_value){
   \                     getSongMenu:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   3180EA00     SUB.W   #0xea, SP
   \   000006   0A4C         MOV.W   R12, R10
      6            unsigned int color = ALWAYS;
   \   000008   1B43         MOV.W   #0x1, R11
      7            ADC_Process();
   \   00000A   ........     CALLA   #ADC_Process
      8            char HW9_String[233] = "We're the Red and White from State And we know we are the best. A hand behind our back, We can take on all the rest. Come over the hill, Carolina. Devils and Deacs stand in line. The Red and White from N.C. State. Go State!";
   \   00000E   0C41         MOV.W   SP, R12
   \   000010   3E40....     MOV.W   #`?<Constant "We\\'re the Red and Whi...">`, R14
   \   000014   3D40E900     MOV.W   #0xe9, R13
   \   000018   ........     CALLA   #?CopyMemoryBytes
      9            lcd_BIG_mid();
   \   00001C   ........     CALLA   #lcd_BIG_mid
     10            //clearLCD();
     11              display_2[LINE_POS_L0] = HW9_String[inc];
   \   000020   1F42....     MOV.W   &`inc`, R15
   \   000024   0F51         ADD.W   SP, R15
   \   000026   1E42....     MOV.W   &display_2, R14
   \   00002A   EE4F0000     MOV.B   @R15, 0(R14)
     12              display_2[LINE_POS_L1] = HW9_String[inc + LINE_POS_L1];
   \   00002E   0F41         MOV.W   SP, R15
   \   000030   1F52....     ADD.W   &`inc`, R15
   \   000034   1E42....     MOV.W   &display_2, R14
   \   000038   DE4F01000100 MOV.B   0x1(R15), 0x1(R14)
     13              display_2[LINE_POS_L2] = HW9_String[inc + LINE_POS_L2];
   \   00003E   0F41         MOV.W   SP, R15
   \   000040   1F52....     ADD.W   &`inc`, R15
   \   000044   1E42....     MOV.W   &display_2, R14
   \   000048   DE4F02000200 MOV.B   0x2(R15), 0x2(R14)
     14              display_2[LINE_POS_L3] = HW9_String[inc + LINE_POS_L3];
   \   00004E   0F41         MOV.W   SP, R15
   \   000050   1F52....     ADD.W   &`inc`, R15
   \   000054   1E42....     MOV.W   &display_2, R14
   \   000058   DE4F03000300 MOV.B   0x3(R15), 0x3(R14)
     15              display_2[LINE_POS_L4] = HW9_String[inc + LINE_POS_L4];
   \   00005E   0F41         MOV.W   SP, R15
   \   000060   1F52....     ADD.W   &`inc`, R15
   \   000064   1E42....     MOV.W   &display_2, R14
   \   000068   DE4F04000400 MOV.B   0x4(R15), 0x4(R14)
     16              display_2[LINE_POS_L5] = HW9_String[inc + LINE_POS_L5];
   \   00006E   0F41         MOV.W   SP, R15
   \   000070   1F52....     ADD.W   &`inc`, R15
   \   000074   1E42....     MOV.W   &display_2, R14
   \   000078   DE4F05000500 MOV.B   0x5(R15), 0x5(R14)
     17              display_2[LINE_POS_L6] = HW9_String[inc + LINE_POS_L6];
   \   00007E   0F41         MOV.W   SP, R15
   \   000080   1F52....     ADD.W   &`inc`, R15
   \   000084   1E42....     MOV.W   &display_2, R14
   \   000088   DE4F06000600 MOV.B   0x6(R15), 0x6(R14)
     18              display_2[LINE_POS_L7] = HW9_String[inc + LINE_POS_L7];
   \   00008E   0F41         MOV.W   SP, R15
   \   000090   1F52....     ADD.W   &`inc`, R15
   \   000094   1E42....     MOV.W   &display_2, R14
   \   000098   DE4F07000700 MOV.B   0x7(R15), 0x7(R14)
     19              display_2[LINE_POS_L8] = HW9_String[inc + LINE_POS_L8];
   \   00009E   0F41         MOV.W   SP, R15
   \   0000A0   1F52....     ADD.W   &`inc`, R15
   \   0000A4   1E42....     MOV.W   &display_2, R14
   \   0000A8   DE4F08000800 MOV.B   0x8(R15), 0x8(R14)
     20              display_2[LINE_POS_L9] = HW9_String[inc + LINE_POS_L9];
   \   0000AE   0F41         MOV.W   SP, R15
   \   0000B0   1F52....     ADD.W   &`inc`, R15
   \   0000B4   1E42....     MOV.W   &display_2, R14
   \   0000B8   DE4F09000900 MOV.B   0x9(R15), 0x9(R14)
     21              display_1 = "Red";
   \   0000BE   B240........ MOV.W   #`?<Constant "Red">`, &display_1
     22              display_3 = "White";
   \   0000C4   B240........ MOV.W   #`?<Constant "White">`, &display_3
     23              posL3 = 3;
   \   0000CA   F2400300.... MOV.B   #0x3, &posL3
     24              posL1 = 4;
   \   0000D0   E242....     MOV.B   #0x4, &posL1
     25              Display_Process();
   \   0000D4   ........     CALLA   #Display_Process
     26            if(adc_value>ADC_Thumb){
   \   0000D8   829A....     CMP.W   R10, &ADC_Thumb
   \   0000DC   812C         JC      ??getSongMenu_0
     27              clearLCD();
   \   0000DE   ........     CALLA   #clearLCD
     28              display_2[LINE_POS_L0] = HW9_String[inc];
   \   0000E2   1F42....     MOV.W   &`inc`, R15
   \   0000E6   0F51         ADD.W   SP, R15
   \   0000E8   1E42....     MOV.W   &display_2, R14
   \   0000EC   EE4F0000     MOV.B   @R15, 0(R14)
     29              display_2[LINE_POS_L1] = HW9_String[inc + LINE_POS_L1];
   \   0000F0   0F41         MOV.W   SP, R15
   \   0000F2   1F52....     ADD.W   &`inc`, R15
   \   0000F6   1E42....     MOV.W   &display_2, R14
   \   0000FA   DE4F01000100 MOV.B   0x1(R15), 0x1(R14)
     30              display_2[LINE_POS_L2] = HW9_String[inc + LINE_POS_L2];
   \   000100   0F41         MOV.W   SP, R15
   \   000102   1F52....     ADD.W   &`inc`, R15
   \   000106   1E42....     MOV.W   &display_2, R14
   \   00010A   DE4F02000200 MOV.B   0x2(R15), 0x2(R14)
     31              display_2[LINE_POS_L3] = HW9_String[inc + LINE_POS_L3];
   \   000110   0F41         MOV.W   SP, R15
   \   000112   1F52....     ADD.W   &`inc`, R15
   \   000116   1E42....     MOV.W   &display_2, R14
   \   00011A   DE4F03000300 MOV.B   0x3(R15), 0x3(R14)
     32              display_2[LINE_POS_L4] = HW9_String[inc + LINE_POS_L4];
   \   000120   0F41         MOV.W   SP, R15
   \   000122   1F52....     ADD.W   &`inc`, R15
   \   000126   1E42....     MOV.W   &display_2, R14
   \   00012A   DE4F04000400 MOV.B   0x4(R15), 0x4(R14)
     33              display_2[LINE_POS_L5] = HW9_String[inc + LINE_POS_L5];
   \   000130   0F41         MOV.W   SP, R15
   \   000132   1F52....     ADD.W   &`inc`, R15
   \   000136   1E42....     MOV.W   &display_2, R14
   \   00013A   DE4F05000500 MOV.B   0x5(R15), 0x5(R14)
     34              display_2[LINE_POS_L6] = HW9_String[inc + LINE_POS_L6];
   \   000140   0F41         MOV.W   SP, R15
   \   000142   1F52....     ADD.W   &`inc`, R15
   \   000146   1E42....     MOV.W   &display_2, R14
   \   00014A   DE4F06000600 MOV.B   0x6(R15), 0x6(R14)
     35              display_2[LINE_POS_L7] = HW9_String[inc + LINE_POS_L7];
   \   000150   0F41         MOV.W   SP, R15
   \   000152   1F52....     ADD.W   &`inc`, R15
   \   000156   1E42....     MOV.W   &display_2, R14
   \   00015A   DE4F07000700 MOV.B   0x7(R15), 0x7(R14)
     36              display_2[LINE_POS_L8] = HW9_String[inc + LINE_POS_L8];
   \   000160   0F41         MOV.W   SP, R15
   \   000162   1F52....     ADD.W   &`inc`, R15
   \   000166   1E42....     MOV.W   &display_2, R14
   \   00016A   DE4F08000800 MOV.B   0x8(R15), 0x8(R14)
     37              display_2[LINE_POS_L9] = HW9_String[inc + LINE_POS_L9];
   \   000170   0F41         MOV.W   SP, R15
   \   000172   1F52....     ADD.W   &`inc`, R15
   \   000176   1E42....     MOV.W   &display_2, R14
   \   00017A   DE4F09000900 MOV.B   0x9(R15), 0x9(R14)
     38              if(color == ZERO){
   \   000180   0B93         CMP.W   #0x0, R11
   \   000182   1320         JNE     ??getSongMenu_1
     39                display_3 = "White";
   \   000184   B240........ MOV.W   #`?<Constant "White">`, &display_3
     40                display_1 = "Red";
   \   00018A   B240........ MOV.W   #`?<Constant "Red">`, &display_1
     41                posL3 = 3;
   \   000190   F2400300.... MOV.B   #0x3, &posL3
     42                posL1 = 4;
   \   000196   E242....     MOV.B   #0x4, &posL1
     43                color = ALWAYS;
   \   00019A   1B43         MOV.W   #0x1, R11
     44                Display_Process();
   \   00019C   ........     CALLA   #Display_Process
     45                Five_msec_Delay(90);
   \   0001A0   3C405A00     MOV.W   #0x5a, R12
   \   0001A4   ........     CALLA   #Five_msec_Delay
   \   0001A8   123C         JMP     ??getSongMenu_2
     46              }
     47              else {
     48                display_3 = "Red";
   \                     ??getSongMenu_1:
   \   0001AA   B240........ MOV.W   #`?<Constant "Red">`, &display_3
     49                display_1 = "White";
   \   0001B0   B240........ MOV.W   #`?<Constant "White">`, &display_1
     50                posL3 = 3;
   \   0001B6   F2400300.... MOV.B   #0x3, &posL3
     51                posL1 = 4;
   \   0001BC   E242....     MOV.B   #0x4, &posL1
     52                color = ZERO;
   \   0001C0   0B43         MOV.W   #0x0, R11
     53                Display_Process();
   \   0001C2   ........     CALLA   #Display_Process
     54                Five_msec_Delay(90);
   \   0001C6   3C405A00     MOV.W   #0x5a, R12
   \   0001CA   ........     CALLA   #Five_msec_Delay
     55              }
     56              unsigned int tmp = adc_value-ADC_Thumb;
   \                     ??getSongMenu_2:
   \   0001CE   0F4A         MOV.W   R10, R15
   \   0001D0   1F82....     SUB.W   &ADC_Thumb, R15
     57              if(tmp>10){
   \   0001D4   3F900B00     CMP.W   #0xb, R15
   \   0001D8   0328         JNC     ??getSongMenu_0
     58                inc = inc + 10;
   \   0001DA   B2500A00.... ADD.W   #0xa, &`inc`
     59              }
     60            }
     61          }
   \                     ??getSongMenu_0:
   \   0001E0   3150EA00     ADD.W   #0xea, SP
   \   0001E4   1A17         POPM.W  #0x2, R11
   \   0001E6   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "We\\'re the Red and Whi...">`:
   \   000000   576527726520 DC8 57H, 65H, 27H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000008   652052656420 DC8 65H, 20H, 52H, 65H, 64H, 20H, 61H, 6EH
   \            616E        
   \   000010   642057686974 DC8 64H, 20H, 57H, 68H, 69H, 74H, 65H, 20H
   \            6520        
   \   000018   66726F6D2053 DC8 66H, 72H, 6FH, 6DH, 20H, 53H, 74H, 61H
   \            7461        
   \   000020   746520416E64 DC8 74H, 65H, 20H, 41H, 6EH, 64H, 20H, 77H
   \            2077        
   \   000028   65206B6E6F77 DC8 65H, 20H, 6BH, 6EH, 6FH, 77H, 20H, 77H
   \            2077        
   \   000030   652061726520 DC8 65H, 20H, 61H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000038   652062657374 DC8 65H, 20H, 62H, 65H, 73H, 74H, 2EH, 20H
   \            2E20        
   \   000040   412068616E64 DC8 41H, 20H, 68H, 61H, 6EH, 64H, 20H, 62H
   \            2062        
   \   000048   6568696E6420 DC8 65H, 68H, 69H, 6EH, 64H, 20H, 6FH, 75H
   \            6F75        
   \   000050   72206261636B DC8 72H, 20H, 62H, 61H, 63H, 6BH, 2CH, 20H
   \            2C20        
   \   000058   57652063616E DC8 57H, 65H, 20H, 63H, 61H, 6EH, 20H, 74H
   \            2074        
   \   000060   616B65206F6E DC8 61H, 6BH, 65H, 20H, 6FH, 6EH, 20H, 61H
   \            2061        
   \   000068   6C6C20746865 DC8 6CH, 6CH, 20H, 74H, 68H, 65H, 20H, 72H
   \            2072        
   \   000070   6573742E2043 DC8 65H, 73H, 74H, 2EH, 20H, 43H, 6FH, 6DH
   \            6F6D        
   \   000078   65206F766572 DC8 65H, 20H, 6FH, 76H, 65H, 72H, 20H, 74H
   \            2074        
   \   000080   68652068696C DC8 68H, 65H, 20H, 68H, 69H, 6CH, 6CH, 2CH
   \            6C2C        
   \   000088   204361726F6C DC8 20H, 43H, 61H, 72H, 6FH, 6CH, 69H, 6EH
   \            696E        
   \   000090   612E20446576 DC8 61H, 2EH, 20H, 44H, 65H, 76H, 69H, 6CH
   \            696C        
   \   000098   7320616E6420 DC8 73H, 20H, 61H, 6EH, 64H, 20H, 44H, 65H
   \            4465        
   \   0000A0   616373207374 DC8 61H, 63H, 73H, 20H, 73H, 74H, 61H, 6EH
   \            616E        
   \   0000A8   6420696E206C DC8 64H, 20H, 69H, 6EH, 20H, 6CH, 69H, 6EH
   \            696E        
   \   0000B0   652E20546865 DC8 65H, 2EH, 20H, 54H, 68H, 65H, 20H, 52H
   \            2052        
   \   0000B8   656420616E64 DC8 65H, 64H, 20H, 61H, 6EH, 64H, 20H, 57H
   \            2057        
   \   0000C0   686974652066 DC8 68H, 69H, 74H, 65H, 20H, 66H, 72H, 6FH
   \            726F        
   \   0000C8   6D204E2E432E DC8 6DH, 20H, 4EH, 2EH, 43H, 2EH, 20H, 53H
   \            2053        
   \   0000D0   746174652E20 DC8 74H, 61H, 74H, 65H, 2EH, 20H, 47H, 6FH
   \            476F        
   \   0000D8   205374617465 DC8 20H, 53H, 74H, 61H, 74H, 65H, 21H, 0
   \            2100        
   \   0000E0   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Red">`:
   \   000000   52656400     DC8 "Red"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "White">`:
   \   000000   576869746500 DC8 "White"

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
    242   getSongMenu
      242   -> ADC_Process
      242   -> Display_Process
      242   -> Five_msec_Delay
      242   -> clearLCD
      242   -> lcd_BIG_mid
      242 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "Red">
     233  ?<Constant "We\'re the Red and Whi...">
       6  ?<Constant "White">
     488  getSongMenu

 
 488 bytes in segment CODE
 243 bytes in segment DATA16_C
 
 488 bytes of CODE  memory
 243 bytes of CONST memory

Errors: none
Warnings: none
