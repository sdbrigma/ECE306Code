###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           13/Nov/2015  22:09:22
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\song_menu.c
#    Command line  =  
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\song_menu.c" -lC
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\song_menu.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\song_menu.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\song_menu.c
      1          #include  "macros.h"
      2          #include  "msp430.h"
      3          #include  "functions.h"
      4          

   \                                 In  segment CODE, align 2
      5          void getSongMenu(unsigned int adc_value){
   \                     getSongMenu:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   3180EA00     SUB.W   #0xea, SP
   \   000006   0A4C         MOV.W   R12, R10
      6            ADC_Process();
   \   000008   ........     CALLA   #ADC_Process
      7            //ClrDisplay();
      8            //Display_Process();
      9            char HW9_String[233] = "We're the Red and White from State And we know we are the best. A hand behind our back, We can take on all the rest. Come over the hill, Carolina. Devils and Deacs stand in line. The Red and White from N.C. State. Go State!";
   \   00000C   0C41         MOV.W   SP, R12
   \   00000E   3E40....     MOV.W   #`?<Constant "We\\'re the Red and Whi...">`, R14
   \   000012   3D40E900     MOV.W   #0xe9, R13
   \   000016   ........     CALLA   #?CopyMemoryBytes
     10            lcd_BIG_mid();
   \   00001A   ........     CALLA   #lcd_BIG_mid
     11            unsigned int tmp;
                                ^
Warning[Pe550]: variable "tmp" was set but never used
     12            setLCD("----------",LINE_POS_L0,"          ",LINE_POS_L0,"----------",LINE_POS_L1,"----------",LINE_POS_L0);
   \   00001E   0312         PUSH.W  #0x0
   \   000020   3012....     PUSH.W  #`?<Constant "----------">`
   \   000024   1312         PUSH.W  #0x1
   \   000026   3012....     PUSH.W  #`?<Constant "----------">`
   \   00002A   0F43         MOV.W   #0x0, R15
   \   00002C   3E40....     MOV.W   #`?<Constant "          ">`, R14
   \   000030   0D43         MOV.W   #0x0, R13
   \   000032   3C40....     MOV.W   #`?<Constant "----------">`, R12
   \   000036   ........     CALLA   #setLCD
     13            if(adc_value>ADC_Thumb){
   \   00003A   3152         ADD.W   #0x8, SP
   \   00003C   829A....     CMP.W   R10, &ADC_Thumb
   \   000040   622C         JC      ??getSongMenu_0
     14              tmp = (1023-adc_value) / 70;
   \   000042   3C40FF03     MOV.W   #0x3ff, R12
   \   000046   0C8A         SUB.W   R10, R12
   \   000048   3E404600     MOV.W   #0x46, R14
   \   00004C   ........     CALLA   #?DivMod16u
   \   000050   0B4C         MOV.W   R12, R11
     15              display_2[LINE_POS_L0] = HW9_String[inc++];
   \   000052   1F42....     MOV.W   &`inc`, R15
   \   000056   0F51         ADD.W   SP, R15
   \   000058   1E42....     MOV.W   &display_2, R14
   \   00005C   EE4F0000     MOV.B   @R15, 0(R14)
   \   000060   9253....     ADD.W   #0x1, &`inc`
     16              display_2[LINE_POS_L1] = HW9_String[inc++];
   \   000064   1F42....     MOV.W   &`inc`, R15
   \   000068   0F51         ADD.W   SP, R15
   \   00006A   1E42....     MOV.W   &display_2, R14
   \   00006E   EE4F0100     MOV.B   @R15, 0x1(R14)
   \   000072   9253....     ADD.W   #0x1, &`inc`
     17              display_2[LINE_POS_L2] = HW9_String[inc++];
   \   000076   1F42....     MOV.W   &`inc`, R15
   \   00007A   0F51         ADD.W   SP, R15
   \   00007C   1E42....     MOV.W   &display_2, R14
   \   000080   EE4F0200     MOV.B   @R15, 0x2(R14)
   \   000084   9253....     ADD.W   #0x1, &`inc`
     18              display_2[LINE_POS_L3] = HW9_String[inc++];
   \   000088   1F42....     MOV.W   &`inc`, R15
   \   00008C   0F51         ADD.W   SP, R15
   \   00008E   1E42....     MOV.W   &display_2, R14
   \   000092   EE4F0300     MOV.B   @R15, 0x3(R14)
   \   000096   9253....     ADD.W   #0x1, &`inc`
     19              display_2[LINE_POS_L4] = HW9_String[inc++];
   \   00009A   1F42....     MOV.W   &`inc`, R15
   \   00009E   0F51         ADD.W   SP, R15
   \   0000A0   1E42....     MOV.W   &display_2, R14
   \   0000A4   EE4F0400     MOV.B   @R15, 0x4(R14)
   \   0000A8   9253....     ADD.W   #0x1, &`inc`
     20              display_2[LINE_POS_L5] = HW9_String[inc++];
   \   0000AC   1F42....     MOV.W   &`inc`, R15
   \   0000B0   0F51         ADD.W   SP, R15
   \   0000B2   1E42....     MOV.W   &display_2, R14
   \   0000B6   EE4F0500     MOV.B   @R15, 0x5(R14)
   \   0000BA   9253....     ADD.W   #0x1, &`inc`
     21              display_2[LINE_POS_L6] = HW9_String[inc++];
   \   0000BE   1F42....     MOV.W   &`inc`, R15
   \   0000C2   0F51         ADD.W   SP, R15
   \   0000C4   1E42....     MOV.W   &display_2, R14
   \   0000C8   EE4F0600     MOV.B   @R15, 0x6(R14)
   \   0000CC   9253....     ADD.W   #0x1, &`inc`
     22              display_2[LINE_POS_L7] = HW9_String[inc++];
   \   0000D0   1F42....     MOV.W   &`inc`, R15
   \   0000D4   0F51         ADD.W   SP, R15
   \   0000D6   1E42....     MOV.W   &display_2, R14
   \   0000DA   EE4F0700     MOV.B   @R15, 0x7(R14)
   \   0000DE   9253....     ADD.W   #0x1, &`inc`
     23              display_2[LINE_POS_L8] = HW9_String[inc++];
   \   0000E2   1F42....     MOV.W   &`inc`, R15
   \   0000E6   0F51         ADD.W   SP, R15
   \   0000E8   1E42....     MOV.W   &display_2, R14
   \   0000EC   EE4F0800     MOV.B   @R15, 0x8(R14)
   \   0000F0   9253....     ADD.W   #0x1, &`inc`
     24              display_2[LINE_POS_L9] = HW9_String[inc++];
   \   0000F4   1F42....     MOV.W   &`inc`, R15
   \   0000F8   0F51         ADD.W   SP, R15
   \   0000FA   1E42....     MOV.W   &display_2, R14
   \   0000FE   EE4F0900     MOV.B   @R15, 0x9(R14)
   \   000102   9253....     ADD.W   #0x1, &`inc`
     25            }
     26            Five_msec_Delay(15);
   \                     ??getSongMenu_0:
   \   000106   3C400F00     MOV.W   #0xf, R12
   \   00010A   ........     CALLA   #Five_msec_Delay
     27            Display_Process();
   \   00010E   ........     CALLA   #Display_Process
     28            ADC_Process();
   \   000112   ........     CALLA   #ADC_Process
     29          }
   \   000116   3150EA00     ADD.W   #0xea, SP
   \   00011A   1A17         POPM.W  #0x2, R11
   \   00011C   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "We\\'re the Red and Whi...">`:
   \   000000   576527726520 DC8 57H, 65H, 27H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000008   652052656420 DC8 65H, 20H, 52H, 65H, 64H, 20H, 61H, 6EH
   \            616E        
   \   000010   642057686974 DC8 64H, 20H, 57H, 68H, 69H, 74H, 65H, 20H
   \            6520        
   \   000018   66726F6D2053 DC8 66H, 72H, 6FH, 6DH, 20H, 53H, 74H, 61H
   \            7461        
   \   000020   746520416E64 DC8 74H, 65H, 20H, 41H, 6EH, 64H, 20H, 77H
   \            2077        
   \   000028   65206B6E6F77 DC8 65H, 20H, 6BH, 6EH, 6FH, 77H, 20H, 77H
   \            2077        
   \   000030   652061726520 DC8 65H, 20H, 61H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000038   652062657374 DC8 65H, 20H, 62H, 65H, 73H, 74H, 2EH, 20H
   \            2E20        
   \   000040   412068616E64 DC8 41H, 20H, 68H, 61H, 6EH, 64H, 20H, 62H
   \            2062        
   \   000048   6568696E6420 DC8 65H, 68H, 69H, 6EH, 64H, 20H, 6FH, 75H
   \            6F75        
   \   000050   72206261636B DC8 72H, 20H, 62H, 61H, 63H, 6BH, 2CH, 20H
   \            2C20        
   \   000058   57652063616E DC8 57H, 65H, 20H, 63H, 61H, 6EH, 20H, 74H
   \            2074        
   \   000060   616B65206F6E DC8 61H, 6BH, 65H, 20H, 6FH, 6EH, 20H, 61H
   \            2061        
   \   000068   6C6C20746865 DC8 6CH, 6CH, 20H, 74H, 68H, 65H, 20H, 72H
   \            2072        
   \   000070   6573742E2043 DC8 65H, 73H, 74H, 2EH, 20H, 43H, 6FH, 6DH
   \            6F6D        
   \   000078   65206F766572 DC8 65H, 20H, 6FH, 76H, 65H, 72H, 20H, 74H
   \            2074        
   \   000080   68652068696C DC8 68H, 65H, 20H, 68H, 69H, 6CH, 6CH, 2CH
   \            6C2C        
   \   000088   204361726F6C DC8 20H, 43H, 61H, 72H, 6FH, 6CH, 69H, 6EH
   \            696E        
   \   000090   612E20446576 DC8 61H, 2EH, 20H, 44H, 65H, 76H, 69H, 6CH
   \            696C        
   \   000098   7320616E6420 DC8 73H, 20H, 61H, 6EH, 64H, 20H, 44H, 65H
   \            4465        
   \   0000A0   616373207374 DC8 61H, 63H, 73H, 20H, 73H, 74H, 61H, 6EH
   \            616E        
   \   0000A8   6420696E206C DC8 64H, 20H, 69H, 6EH, 20H, 6CH, 69H, 6EH
   \            696E        
   \   0000B0   652E20546865 DC8 65H, 2EH, 20H, 54H, 68H, 65H, 20H, 52H
   \            2052        
   \   0000B8   656420616E64 DC8 65H, 64H, 20H, 61H, 6EH, 64H, 20H, 57H
   \            2057        
   \   0000C0   686974652066 DC8 68H, 69H, 74H, 65H, 20H, 66H, 72H, 6FH
   \            726F        
   \   0000C8   6D204E2E432E DC8 6DH, 20H, 4EH, 2EH, 43H, 2EH, 20H, 53H
   \            2053        
   \   0000D0   746174652E20 DC8 74H, 61H, 74H, 65H, 2EH, 20H, 47H, 6FH
   \            476F        
   \   0000D8   205374617465 DC8 20H, 53H, 74H, 61H, 74H, 65H, 21H, 0
   \            2100        
   \   0000E0   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
    250   getSongMenu
      242   -> ADC_Process
      242   -> Display_Process
      242   -> Five_msec_Delay
      242   -> lcd_BIG_mid
      250   -> setLCD
      242 ?CopyMemoryBytes
      242 ?DivMod16u


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "----------">
     233  ?<Constant "We\'re the Red and Whi...">
     286  getSongMenu

 
 286 bytes in segment CODE
 255 bytes in segment DATA16_C
 
 286 bytes of CODE  memory
 255 bytes of CONST memory

Errors: none
Warnings: 1
