###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           13/Nov/2015  20:05:47
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"

   \                                 In  segment CODE, align 2
     16          void Switches_Process(void){
   \                     Switches_Process:
     17          //******************************************************************************
     18          //
     19          //  Description: This functions sets code for switch 1 and 2 upon being pressed
     20          //
     21          //  Steffon Brigman
     22          //  Sept 2015
     23          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
     24          //******************************************************************************
     25            if (!(P4IN & SW1)){ 
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   762C         JC      ??Switches_Process_5
     26              ADC_Process();
   \   000006   ........     CALLA   #ADC_Process
     27              while(ALWAYS){
     28                if (!(P4IN & SW2)){break;}
   \                     ??Switches_Process_0:
   \   00000A   E2B32102     BIT.B   #0x2, &0x221
   \   00000E   7128         JNC     ??Switches_Process_5
     29                ADC_Process(); // read ADC value for thumbwheel
   \   000010   ........     CALLA   #ADC_Process
     30                if(ADC_Thumb <= 340){// Divides range of ADC values into three for main menu
   \   000014   B2905501.... CMP.W   #0x155, &ADC_Thumb
   \   00001A   222C         JC      ??Switches_Process_7
     31                  setLCD("Resistors",LINE_POS_L0," ",LINE_POS_L0," ",LINE_POS_L0," ",LINE_POS_L0);
   \   00001C   0312         PUSH.W  #0x0
   \   00001E   3012....     PUSH.W  #`?<Constant " ">`
   \   000022   0312         PUSH.W  #0x0
   \   000024   3012....     PUSH.W  #`?<Constant " ">`
   \   000028   0F43         MOV.W   #0x0, R15
   \   00002A   3E40....     MOV.W   #`?<Constant " ">`, R14
   \   00002E   0D43         MOV.W   #0x0, R13
   \   000030   3C40....     MOV.W   #`?<Constant "Resistors">`, R12
   \   000034   ........     CALLA   #setLCD
     32                  ADC_Process();
   \   000038   ........     CALLA   #ADC_Process
     33                  Five_msec_Delay(30);
   \   00003C   3C401E00     MOV.W   #0x1e, R12
   \   000040   ........     CALLA   #Five_msec_Delay
     34                  
     35                  // RESISTOR CODES
     36                  if(!(P4IN & SW1)){
   \   000044   3152         ADD.W   #0x8, SP
   \   000046   D2B32102     BIT.B   #0x1, &0x221
   \   00004A   DF2F         JC      ??Switches_Process_0
     37                    while(ALWAYS){
     38                      ADC_Process();
   \                     ??Switches_Process_1:
   \   00004C   ........     CALLA   #ADC_Process
     39                      getResistorMenu(ADC_Thumb);
   \   000050   1C42....     MOV.W   &ADC_Thumb, R12
   \   000054   ........     CALLA   #getResistorMenu
     40                      if (!(P4IN & SW1)){break;}
   \   000058   D2B32102     BIT.B   #0x1, &0x221
   \   00005C   F72F         JC      ??Switches_Process_1
   \   00005E   D53F         JMP     ??Switches_Process_0
     41                    }
     42                  }
     43                } 
     44                
     45                else if(ADC_Thumb >= 681){ // this range the last third of the full range of values for the ADC
   \                     ??Switches_Process_7:
   \   000060   B290A902.... CMP.W   #0x2a9, &ADC_Thumb
   \   000066   2328         JNC     ??Switches_Process_8
     46                  setLCD("Song",LINE_POS_L3," ",LINE_POS_L0," ",LINE_POS_L0," ",LINE_POS_L0);
   \   000068   0312         PUSH.W  #0x0
   \   00006A   3012....     PUSH.W  #`?<Constant " ">`
   \   00006E   0312         PUSH.W  #0x0
   \   000070   3012....     PUSH.W  #`?<Constant " ">`
   \   000074   0F43         MOV.W   #0x0, R15
   \   000076   3E40....     MOV.W   #`?<Constant " ">`, R14
   \   00007A   3D400300     MOV.W   #0x3, R13
   \   00007E   3C40....     MOV.W   #`?<Constant "Song">`, R12
   \   000082   ........     CALLA   #setLCD
     47                  ADC_Process();
   \   000086   ........     CALLA   #ADC_Process
     48                  Five_msec_Delay(30);
   \   00008A   3C401E00     MOV.W   #0x1e, R12
   \   00008E   ........     CALLA   #Five_msec_Delay
     49                  
     50                  // SONG CODE
     51                  if(!(P4IN & SW1)){
   \   000092   3152         ADD.W   #0x8, SP
   \   000094   D2B32102     BIT.B   #0x1, &0x221
   \   000098   B82F         JC      ??Switches_Process_0
     52                    while(ALWAYS){
     53                      ADC_Process();
   \                     ??Switches_Process_2:
   \   00009A   ........     CALLA   #ADC_Process
     54                      getResistorMenu(ADC_Thumb);
   \   00009E   1C42....     MOV.W   &ADC_Thumb, R12
   \   0000A2   ........     CALLA   #getResistorMenu
     55                      if (!(P4IN & SW1)){break;}
   \   0000A6   D2B32102     BIT.B   #0x1, &0x221
   \   0000AA   F72F         JC      ??Switches_Process_2
   \   0000AC   AE3F         JMP     ??Switches_Process_0
     56                    }
     57                  }
     58                }
     59                
     60                else{ // If it's not in the lower or upper third it's in the middle
     61                  setLCD("Shapes",LINE_POS_L2," ",LINE_POS_L0," ",LINE_POS_L0," ",LINE_POS_L0);
   \                     ??Switches_Process_8:
   \   0000AE   0312         PUSH.W  #0x0
   \   0000B0   3012....     PUSH.W  #`?<Constant " ">`
   \   0000B4   0312         PUSH.W  #0x0
   \   0000B6   3012....     PUSH.W  #`?<Constant " ">`
   \   0000BA   0F43         MOV.W   #0x0, R15
   \   0000BC   3E40....     MOV.W   #`?<Constant " ">`, R14
   \   0000C0   2D43         MOV.W   #0x2, R13
   \   0000C2   3C40....     MOV.W   #`?<Constant "Shapes">`, R12
   \   0000C6   ........     CALLA   #setLCD
     62                  ADC_Process();
   \   0000CA   ........     CALLA   #ADC_Process
     63                  Five_msec_Delay(30);
   \   0000CE   3C401E00     MOV.W   #0x1e, R12
   \   0000D2   ........     CALLA   #Five_msec_Delay
     64                  
     65                  //SHAPES
     66                  if(!(P4IN & SW1)){
   \   0000D6   3152         ADD.W   #0x8, SP
   \   0000D8   D2B32102     BIT.B   #0x1, &0x221
   \   0000DC   962F         JC      ??Switches_Process_0
     67                   while(ALWAYS){
     68                      if (!(P4IN & SW2)){break;}
   \                     ??Switches_Process_3:
   \   0000DE   E2B32102     BIT.B   #0x2, &0x221
   \   0000E2   932B         JNC     ??Switches_Process_0
     69                      ADC_Process();
   \   0000E4   ........     CALLA   #ADC_Process
     70                      getShapesMenu(ADC_Thumb);
   \   0000E8   1C42....     MOV.W   &ADC_Thumb, R12
   \   0000EC   ........     CALLA   #getShapesMenu
   \   0000F0   F63F         JMP     ??Switches_Process_3
     71                    } 
     72                  }
     73                }
     74              }
     75              
     76              
     77                /*while(ALWAYS){
     78                  if (!(P4IN & SW2)) { break; }
     79                  UCA1TXBUF = HW8_String[cpu_rx_ring_wr];
     80                  display_1[LINE_POS_L9] = display_1[LINE_POS_L8];
     81                  display_1[LINE_POS_L8] = display_1[LINE_POS_L7];
     82                  display_1[LINE_POS_L7] = display_1[LINE_POS_L6];
     83                  display_1[LINE_POS_L6] = display_1[LINE_POS_L5];
     84                  display_1[LINE_POS_L5] = display_1[LINE_POS_L4];
     85                  display_1[LINE_POS_L4] = display_1[LINE_POS_L3];
     86                  display_1[LINE_POS_L3] = display_1[LINE_POS_L2];
     87                  display_1[LINE_POS_L2] = display_1[LINE_POS_L1];
     88                  display_1[LINE_POS_L1] = display_1[LINE_POS_L0];
     89                  display_1[LINE_POS_L0] = UCA1RXBUF;
     90                  posL1 = ZERO;
     91                  display_2 = "          ";
     92                  posL2 = ZERO;
     93                  display_3 = " Baud Rate";
     94                  posL3 = ZERO;
     95                  display_4 = "  9600  ";
     96                  posL4 = ZERO;
     97                  Display_Process();
     98                  Five_msec_Delay(transmit_delay);
     99                }*/
    100            }
    101            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_5:
   \   0000F2   E2B32102     BIT.B   #0x2, &0x221
   \   0000F6   102C         JC      ??Switches_Process_9
    102             setLCD("NCSU",SW1_posL1,"WOLFPACK",SW1_posL2,"ECE306",SW1_posL3,"S Brigman",SW1_posL4);
   \   0000F8   1312         PUSH.W  #0x1
   \   0000FA   3012....     PUSH.W  #`?<Constant "S Brigman">`
   \   0000FE   2312         PUSH.W  #0x2
   \   000100   3012....     PUSH.W  #`?<Constant "ECE306">`
   \   000104   1F43         MOV.W   #0x1, R15
   \   000106   3E40....     MOV.W   #`?<Constant "WOLFPACK">`, R14
   \   00010A   3D400300     MOV.W   #0x3, R13
   \   00010E   3C40....     MOV.W   #`?<Constant "NCSU">`, R12
   \   000112   ........     CALLA   #setLCD
   \   000116   3152         ADD.W   #0x8, SP
    103          
    104          }
    105          //------------------------------------------------------------------------------
    106          }
   \                     ??Switches_Process_9:
   \   000118   1001         RETA
   \   00011A                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Resistors">`:
   \   000000   526573697374 DC8 "Resistors"
   \            6F727300    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " ">`:
   \   000000   2000         DC8 " "

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Song">`:
   \   000000   536F6E6700   DC8 "Song"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Shapes">`:
   \   000000   536861706573 DC8 "Shapes"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Switches_Process
       12   -> ADC_Process
        4   -> ADC_Process
       12   -> Five_msec_Delay
        4   -> getResistorMenu
        4   -> getShapesMenu
       12   -> setLCD


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant " ">
       7  ?<Constant "ECE306">
       5  ?<Constant "NCSU">
      10  ?<Constant "Resistors">
      10  ?<Constant "S Brigman">
       7  ?<Constant "Shapes">
       5  ?<Constant "Song">
       9  ?<Constant "WOLFPACK">
     282  Switches_Process
       2  _A_PBIN_L

 
 282 bytes in segment CODE
   2 bytes in segment DATA16_AN
  55 bytes in segment DATA16_C
 
 282 bytes of CODE  memory
  55 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
