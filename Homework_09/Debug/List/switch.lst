###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           13/Nov/2015  17:31:07
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"

   \                                 In  segment CODE, align 2
     16          void Switches_Process(void){
   \                     Switches_Process:
     17          //******************************************************************************
     18          //
     19          //  Description: This functions sets code for switch 1 and 2 upon being pressed
     20          //
     21          //  Steffon Brigman
     22          //  Sept 2015
     23          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
     24          //******************************************************************************
     25            if (!(P4IN & SW1)){ 
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   6D2C         JC      ??Switches_Process_4
     26              ADC_Process();
   \   000006   ........     CALLA   #ADC_Process
     27              while(ALWAYS){
     28                if (!(P4IN & SW1)){break;}
   \                     ??Switches_Process_0:
   \   00000A   D2B32102     BIT.B   #0x1, &0x221
   \   00000E   6828         JNC     ??Switches_Process_4
     29                ADC_Process(); // read ADC value for thumbwheel
   \   000010   ........     CALLA   #ADC_Process
     30                if(ADC_Thumb <= 340){// Divides range of ADC values into three for main menu
   \   000014   B2905501.... CMP.W   #0x155, &ADC_Thumb
   \   00001A   232C         JC      ??Switches_Process_7
     31                  display_1 = "Resistors";
   \   00001C   B240........ MOV.W   #`?<Constant "Resistors">`, &display_1
     32                  posL1 = LINE_POS_L0;
   \   000022   C243....     MOV.B   #0x0, &posL1
     33                  display_2 = "          ";
   \   000026   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     34                  posL2 = LINE_POS_L0;
   \   00002C   C243....     MOV.B   #0x0, &posL2
     35                  display_3 = "          ";
   \   000030   B240........ MOV.W   #`?<Constant "          ">`, &display_3
     36                  posL3 = LINE_POS_L0;
   \   000036   C243....     MOV.B   #0x0, &posL3
     37                  display_4 = "          ";
   \   00003A   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     38                  posL4 = LINE_POS_L0;
   \   000040   C243....     MOV.B   #0x0, &posL4
     39                  ADC_Process();
   \   000044   ........     CALLA   #ADC_Process
     40                  
     41                  // RESISTOR CODES
     42                  if(!(P4IN & SW1)){
   \   000048   D2B32102     BIT.B   #0x1, &0x221
   \   00004C   DE2F         JC      ??Switches_Process_0
     43                    while(ALWAYS){
     44                      if (!(P4IN & SW2)){break;}
   \                     ??Switches_Process_1:
   \   00004E   E2B32102     BIT.B   #0x2, &0x221
   \   000052   DB2B         JNC     ??Switches_Process_0
     45                      ADC_Process();
   \   000054   ........     CALLA   #ADC_Process
     46                      getResistorMenu(ADC_Thumb);
   \   000058   1C42....     MOV.W   &ADC_Thumb, R12
   \   00005C   ........     CALLA   #getResistorMenu
   \   000060   F63F         JMP     ??Switches_Process_1
     47                    }
     48                  }
     49                } 
     50                
     51                else if(ADC_Thumb >= 681){ // this range the last third of the full range of values for the ADC
   \                     ??Switches_Process_7:
   \   000062   B290A902.... CMP.W   #0x2a9, &ADC_Thumb
   \   000068   1828         JNC     ??Switches_Process_8
     52                  display_1 = "Song";
   \   00006A   B240........ MOV.W   #`?<Constant "Song">`, &display_1
     53                  posL1 = LINE_POS_L3;
   \   000070   F2400300.... MOV.B   #0x3, &posL1
     54                  display_2 = "          ";
   \   000076   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     55                  posL2 = LINE_POS_L0;
   \   00007C   C243....     MOV.B   #0x0, &posL2
     56                  display_3 = "          ";
   \   000080   B240........ MOV.W   #`?<Constant "          ">`, &display_3
     57                  posL3 = LINE_POS_L0;
   \   000086   C243....     MOV.B   #0x0, &posL3
     58                  display_4 = "          ";
   \   00008A   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     59                  posL4 = LINE_POS_L0;
   \   000090   C243....     MOV.B   #0x0, &posL4
     60                  ADC_Process();
   \   000094   ........     CALLA   #ADC_Process
   \   000098   B83F         JMP     ??Switches_Process_0
     61                }
     62                
     63                else{ // If it's not in the lower or upper third it's in the middle
     64                  display_1 = "Shapes";
   \                     ??Switches_Process_8:
   \   00009A   B240........ MOV.W   #`?<Constant "Shapes">`, &display_1
     65                  posL1 = LINE_POS_L2;
   \   0000A0   E243....     MOV.B   #0x2, &posL1
     66                  display_2 = "          ";
   \   0000A4   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     67                  posL2 = LINE_POS_L0;
   \   0000AA   C243....     MOV.B   #0x0, &posL2
     68                  display_3 = "          ";
   \   0000AE   B240........ MOV.W   #`?<Constant "          ">`, &display_3
     69                  posL3 = LINE_POS_L0;
   \   0000B4   C243....     MOV.B   #0x0, &posL3
     70                  display_4 = "          ";
   \   0000B8   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     71                  posL4 = LINE_POS_L0;
   \   0000BE   C243....     MOV.B   #0x0, &posL4
     72                  ADC_Process();
   \   0000C2   ........     CALLA   #ADC_Process
     73                  
     74                  //SHAPES
     75                  if(!(P4IN & SW1)){
   \   0000C6   D2B32102     BIT.B   #0x1, &0x221
   \   0000CA   9F2F         JC      ??Switches_Process_0
     76                   while(ALWAYS){
     77                      if (!(P4IN & SW2)){break;}
   \                     ??Switches_Process_2:
   \   0000CC   E2B32102     BIT.B   #0x2, &0x221
   \   0000D0   9C2B         JNC     ??Switches_Process_0
     78                      ADC_Process();
   \   0000D2   ........     CALLA   #ADC_Process
     79                      getShapesMenu(ADC_Thumb);
   \   0000D6   1C42....     MOV.W   &ADC_Thumb, R12
   \   0000DA   ........     CALLA   #getShapesMenu
   \   0000DE   F63F         JMP     ??Switches_Process_2
     80                    } 
     81                  }
     82                }
     83              }
     84              
     85              
     86                /*while(ALWAYS){
     87                  if (!(P4IN & SW2)) { break; }
     88                  UCA1TXBUF = HW8_String[cpu_rx_ring_wr];
     89                  display_1[LINE_POS_L9] = display_1[LINE_POS_L8];
     90                  display_1[LINE_POS_L8] = display_1[LINE_POS_L7];
     91                  display_1[LINE_POS_L7] = display_1[LINE_POS_L6];
     92                  display_1[LINE_POS_L6] = display_1[LINE_POS_L5];
     93                  display_1[LINE_POS_L5] = display_1[LINE_POS_L4];
     94                  display_1[LINE_POS_L4] = display_1[LINE_POS_L3];
     95                  display_1[LINE_POS_L3] = display_1[LINE_POS_L2];
     96                  display_1[LINE_POS_L2] = display_1[LINE_POS_L1];
     97                  display_1[LINE_POS_L1] = display_1[LINE_POS_L0];
     98                  display_1[LINE_POS_L0] = UCA1RXBUF;
     99                  posL1 = ZERO;
    100                  display_2 = "          ";
    101                  posL2 = ZERO;
    102                  display_3 = " Baud Rate";
    103                  posL3 = ZERO;
    104                  display_4 = "  9600  ";
    105                  posL4 = ZERO;
    106                  Display_Process();
    107                  Five_msec_Delay(transmit_delay);
    108                }*/
    109            }
    110            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_4:
   \   0000E0   E2B32102     BIT.B   #0x2, &0x221
   \   0000E4   152C         JC      ??Switches_Process_9
    111            display_1 = "NCSU";
   \   0000E6   B240........ MOV.W   #`?<Constant "NCSU">`, &display_1
    112            posL1 = SW1_posL1;
   \   0000EC   F2400300.... MOV.B   #0x3, &posL1
    113            display_2 = "WOLFPACK";
   \   0000F2   B240........ MOV.W   #`?<Constant "WOLFPACK">`, &display_2
    114            posL2 = SW1_posL2;
   \   0000F8   D243....     MOV.B   #0x1, &posL2
    115            display_3 = "ECE306";
   \   0000FC   B240........ MOV.W   #`?<Constant "ECE306">`, &display_3
    116            posL3 = SW1_posL3;
   \   000102   E243....     MOV.B   #0x2, &posL3
    117            display_4 = "S Brigman";
   \   000106   B240........ MOV.W   #`?<Constant "S Brigman">`, &display_4
    118            posL4 = SW1_posL4;
   \   00010C   D243....     MOV.B   #0x1, &posL4
    119          }
    120          //------------------------------------------------------------------------------
    121          }
   \                     ??Switches_Process_9:
   \   000110   1001         RETA
   \   000112                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Resistors">`:
   \   000000   526573697374 DC8 "Resistors"
   \            6F727300    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Song">`:
   \   000000   536F6E6700   DC8 "Song"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Shapes">`:
   \   000000   536861706573 DC8 "Shapes"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Switches_Process
        4   -> ADC_Process
        4   -> getResistorMenu
        4   -> getShapesMenu


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       7  ?<Constant "ECE306">
       5  ?<Constant "NCSU">
      10  ?<Constant "Resistors">
      10  ?<Constant "S Brigman">
       7  ?<Constant "Shapes">
       5  ?<Constant "Song">
       9  ?<Constant "WOLFPACK">
     274  Switches_Process
       2  _A_PBIN_L

 
 274 bytes in segment CODE
   2 bytes in segment DATA16_AN
  64 bytes in segment DATA16_C
 
 274 bytes of CODE  memory
  64 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
