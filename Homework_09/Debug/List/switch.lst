###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           16/Nov/2015  15:15:41
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"

   \                                 In  segment CODE, align 2
     16          void Switches_Process(void){
   \                     Switches_Process:
     17          //******************************************************************************
     18          //
     19          //  Description: This functions sets code for switch 1 and 2 upon being pressed
     20          //
     21          //  Steffon Brigman
     22          //  Sept 2015
     23          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
     24          //******************************************************************************
     25            if (!(P4IN & SW1)){
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   832C         JC      ??Switches_Process_5
     26              Five_msec_Delay(switch_delay);
   \   000006   3C400F00     MOV.W   #0xf, R12
   \   00000A   ........     CALLA   #Five_msec_Delay
     27              while(ALWAYS){
     28                if (!(P4IN & SW2)){break;}
   \                     ??Switches_Process_0:
   \   00000E   E2B32102     BIT.B   #0x2, &0x221
   \   000012   7C28         JNC     ??Switches_Process_5
     29                ADC_Process(); // read ADC value for thumbwheel
   \   000014   ........     CALLA   #ADC_Process
     30                if(ADC_Thumb <= topMenu1){// Divides range of ADC values into three for main menu
   \   000018   B2905501.... CMP.W   #0x155, &ADC_Thumb
   \   00001E   202C         JC      ??Switches_Process_6
     31                  setLCD("Resistor",LINE_POS_L0,"",LINE_POS_L0,"",LINE_POS_L0,"",LINE_POS_L0);
   \   000020   0312         PUSH.W  #0x0
   \   000022   3012....     PUSH.W  #`?<Constant "">`
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0F43         MOV.W   #0x0, R15
   \   00002E   3E40....     MOV.W   #`?<Constant "">`, R14
   \   000032   0D43         MOV.W   #0x0, R13
   \   000034   3C40....     MOV.W   #`?<Constant "Resistor">`, R12
   \   000038   ........     CALLA   #setLCD
     32                  //ADC_Process();        
     33                  // RESISTOR CODES
     34                  if(!(P4IN & SW1)){
   \   00003C   3152         ADD.W   #0x8, SP
   \   00003E   D2B32102     BIT.B   #0x1, &0x221
   \   000042   E52F         JC      ??Switches_Process_0
     35                    while(ALWAYS){
     36                      ADC_Process();
   \                     ??Switches_Process_1:
   \   000044   ........     CALLA   #ADC_Process
     37                      getResistorMenu(ADC_Thumb);
   \   000048   1C42....     MOV.W   &ADC_Thumb, R12
   \   00004C   ........     CALLA   #getResistorMenu
     38                      if (!(P4IN & SW2)){Five_msec_Delay(switch_delay);break;}
   \   000050   E2B32102     BIT.B   #0x2, &0x221
   \   000054   F72F         JC      ??Switches_Process_1
   \   000056   3C400F00     MOV.W   #0xf, R12
   \   00005A   ........     CALLA   #Five_msec_Delay
   \   00005E   D73F         JMP     ??Switches_Process_0
     39                    }
     40                  }
     41                } 
     42                
     43                else if(ADC_Thumb >= topMenu3){ // this range the last third of the full range of values for the ADC
   \                     ??Switches_Process_6:
   \   000060   B290A902.... CMP.W   #0x2a9, &ADC_Thumb
   \   000066   2F28         JNC     ??Switches_Process_7
     44                  setLCD("Song",LINE_POS_L3,"",LINE_POS_L0,"",LINE_POS_L0,"",LINE_POS_L0);
   \   000068   0312         PUSH.W  #0x0
   \   00006A   3012....     PUSH.W  #`?<Constant "">`
   \   00006E   0312         PUSH.W  #0x0
   \   000070   3012....     PUSH.W  #`?<Constant "">`
   \   000074   0F43         MOV.W   #0x0, R15
   \   000076   3E40....     MOV.W   #`?<Constant "">`, R14
   \   00007A   3D400300     MOV.W   #0x3, R13
   \   00007E   3C40....     MOV.W   #`?<Constant "Song">`, R12
   \   000082   ........     CALLA   #setLCD
     45                  lcd_BIG_mid();
   \   000086   ........     CALLA   #lcd_BIG_mid
     46                  // SONG CODE
     47                  if(!(P4IN & SW1)){
   \   00008A   3152         ADD.W   #0x8, SP
   \   00008C   D2B32102     BIT.B   #0x1, &0x221
   \   000090   BE2F         JC      ??Switches_Process_0
     48                    ADC_Process();
   \   000092   ........     CALLA   #ADC_Process
     49                    inc = (RESOLUTION10 - ADC_Thumb) / division_increment;
   \   000096   3C40FF03     MOV.W   #0x3ff, R12
   \   00009A   1C82....     SUB.W   &ADC_Thumb, R12
   \   00009E   3E40D200     MOV.W   #0xd2, R14
   \   0000A2   ........     CALLA   #?DivMod16u
   \   0000A6   824C....     MOV.W   R12, &`inc`
     50                    while(ALWAYS){
     51                      getSongMenu(ADC_Thumb);
   \                     ??Switches_Process_2:
   \   0000AA   1C42....     MOV.W   &ADC_Thumb, R12
   \   0000AE   ........     CALLA   #getSongMenu
     52                      if (!(P4IN & SW2)){Five_msec_Delay(switch_delay);break;}
   \   0000B2   E2B32102     BIT.B   #0x2, &0x221
   \   0000B6   F92F         JC      ??Switches_Process_2
   \   0000B8   3C400F00     MOV.W   #0xf, R12
   \   0000BC   ........     CALLA   #Five_msec_Delay
     53                    }
     54                    clearLCD();
   \   0000C0   ........     CALLA   #clearLCD
   \   0000C4   A43F         JMP     ??Switches_Process_0
     55                  }
     56                }
     57                
     58                else{ // If it's not in the lower or upper third it's in the middle
     59                  setLCD("Shapes",LINE_POS_L2,"",LINE_POS_L0,"",LINE_POS_L0,"",LINE_POS_L0);
   \                     ??Switches_Process_7:
   \   0000C6   0312         PUSH.W  #0x0
   \   0000C8   3012....     PUSH.W  #`?<Constant "">`
   \   0000CC   0312         PUSH.W  #0x0
   \   0000CE   3012....     PUSH.W  #`?<Constant "">`
   \   0000D2   0F43         MOV.W   #0x0, R15
   \   0000D4   3E40....     MOV.W   #`?<Constant "">`, R14
   \   0000D8   2D43         MOV.W   #0x2, R13
   \   0000DA   3C40....     MOV.W   #`?<Constant "Shapes">`, R12
   \   0000DE   ........     CALLA   #setLCD
     60                  Five_msec_Delay(switch_delay);
   \   0000E2   3C400F00     MOV.W   #0xf, R12
   \   0000E6   ........     CALLA   #Five_msec_Delay
     61                  
     62                  //SHAPES
     63                  if(!(P4IN & SW1)){
   \   0000EA   3152         ADD.W   #0x8, SP
   \   0000EC   D2B32102     BIT.B   #0x1, &0x221
   \   0000F0   8E2F         JC      ??Switches_Process_0
     64                   while(ALWAYS){
     65                      if (!(P4IN & SW2)){clearLCD();break;}
   \                     ??Switches_Process_3:
   \   0000F2   E2B32102     BIT.B   #0x2, &0x221
   \   0000F6   032C         JC      ??Switches_Process_8
   \   0000F8   ........     CALLA   #clearLCD
   \   0000FC   883F         JMP     ??Switches_Process_0
     66                      ADC_Process();
   \                     ??Switches_Process_8:
   \   0000FE   ........     CALLA   #ADC_Process
     67                      getShapesMenu(ADC_Thumb);
   \   000102   1C42....     MOV.W   &ADC_Thumb, R12
   \   000106   ........     CALLA   #getShapesMenu
   \   00010A   F33F         JMP     ??Switches_Process_3
     68                    }
     69                  }
     70                }
     71              }
     72              
     73              
     74                /*while(ALWAYS){
     75                  if (!(P4IN & SW2)) { break; }
     76                  UCA1TXBUF = HW8_String[cpu_rx_ring_wr];
     77                  display_1[LINE_POS_L9] = display_1[LINE_POS_L8];
     78                  display_1[LINE_POS_L8] = display_1[LINE_POS_L7];
     79                  display_1[LINE_POS_L7] = display_1[LINE_POS_L6];
     80                  display_1[LINE_POS_L6] = display_1[LINE_POS_L5];
     81                  display_1[LINE_POS_L5] = display_1[LINE_POS_L4];
     82                  display_1[LINE_POS_L4] = display_1[LINE_POS_L3];
     83                  display_1[LINE_POS_L3] = display_1[LINE_POS_L2];
     84                  display_1[LINE_POS_L2] = display_1[LINE_POS_L1];
     85                  display_1[LINE_POS_L1] = display_1[LINE_POS_L0];
     86                  display_1[LINE_POS_L0] = UCA1RXBUF;
     87                  posL1 = ZERO;
     88                  display_2 = "          ";
     89                  posL2 = ZERO;
     90                  display_3 = " Baud Rate";
     91                  posL3 = ZERO;
     92                  display_4 = "  9600  ";
     93                  posL4 = ZERO;
     94                  Display_Process();
     95                  Five_msec_Delay(transmit_delay);
     96                }*/
     97            }
     98            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_5:
   \   00010C   E2B32102     BIT.B   #0x2, &0x221
   \   000110   122C         JC      ??Switches_Process_9
     99              lcd_4line();
   \   000112   ........     CALLA   #lcd_4line
    100             setLCD("Embedded",SW1_posL1,"Systems",SW1_posL2,"Rock!",SW1_posL3,"S Brigman",SW1_posL4);
   \   000116   1312         PUSH.W  #0x1
   \   000118   3012....     PUSH.W  #`?<Constant "S Brigman">`
   \   00011C   2312         PUSH.W  #0x2
   \   00011E   3012....     PUSH.W  #`?<Constant "Rock!">`
   \   000122   1F43         MOV.W   #0x1, R15
   \   000124   3E40....     MOV.W   #`?<Constant "Systems">`, R14
   \   000128   3D400300     MOV.W   #0x3, R13
   \   00012C   3C40....     MOV.W   #`?<Constant "Embedded">`, R12
   \   000130   ........     CALLA   #setLCD
   \   000134   3152         ADD.W   #0x8, SP
    101          
    102          }
    103          //------------------------------------------------------------------------------
    104          }
   \                     ??Switches_Process_9:
   \   000136   1001         RETA
   \   000138                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Resistor">`:
   \   000000   526573697374 DC8 "Resistor"
   \            6F7200      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Song">`:
   \   000000   536F6E6700   DC8 "Song"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Shapes">`:
   \   000000   536861706573 DC8 "Shapes"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Embedded">`:
   \   000000   456D62656464 DC8 "Embedded"
   \            656400      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Systems">`:
   \   000000   53797374656D DC8 "Systems"
   \            7300        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Rock!">`:
   \   000000   526F636B2100 DC8 "Rock!"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Switches_Process
        4   -> ADC_Process
       12   -> Five_msec_Delay
        4   -> Five_msec_Delay
        4   -> clearLCD
        4   -> getResistorMenu
        4   -> getShapesMenu
        4   -> getSongMenu
        4   -> lcd_4line
       12   -> lcd_BIG_mid
       12   -> setLCD
        4 ?DivMod16u


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       9  ?<Constant "Embedded">
       9  ?<Constant "Resistor">
       6  ?<Constant "Rock!">
      10  ?<Constant "S Brigman">
       7  ?<Constant "Shapes">
       5  ?<Constant "Song">
       8  ?<Constant "Systems">
     312  Switches_Process
       2  _A_PBIN_L

 
 312 bytes in segment CODE
   2 bytes in segment DATA16_AN
  55 bytes in segment DATA16_C
 
 312 bytes of CODE  memory
  55 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
