###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           23/Sep/2015  20:56:28
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\motors.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\motors.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 03\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\List\motors.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\Obj\motors.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\motors.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for motor control functions.
      4          //
      5          //
      6          //  Steffon Brigman
      7          //  Seppt 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2
     15          #include  "functions.h"

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int tmp;
   \                     tmp:
   \   000000                DS8 2
     17          //volatile unsigned int Time_Sequence;
     18          

   \                                 In  segment CODE, align 2
     19          void Init_Motors(void){
   \                     Init_Motors:
     20            // Funcetion to turn off motor forward before any code runs.
     21            right_off();
   \   000000   ........     CALLA   #right_off
     22            left_off();
   \   000004   ........     BRA     #left_off
     23          }
     24          

   \                                 In  segment CODE, align 2
     25          void motor_straight(unsigned int time){
   \                     motor_straight:
   \   000000   0E4C         MOV.W   R12, R14
     26            // Function to run both motors to make a straight line for a specified time.
     27            //Time_Sequence = 0;
     28            tmp = time + Time_Sequence;
   \   000002   0F4E         MOV.W   R14, R15
   \   000004   1F52....     ADD.W   &Time_Sequence, R15
   \   000008   824F....     MOV.W   R15, &tmp
     29            int i = 0;
   \   00000C   0D43         MOV.W   #0x0, R13
     30          while(i<60)
   \                     ??motor_straight_0:
   \   00000E   3D903C00     CMP.W   #0x3c, R13
   \   000012   0E34         JGE     ??motor_straight_1
     31            {  
     32              //five_msec_sleep(STRAIGHT_SYNCH);
     33              right_on(3); // On for 500 ms
   \   000014   3C400300     MOV.W   #0x3, R12
   \   000018   ........     CALLA   #right_on
     34              right_off();
   \   00001C   ........     CALLA   #right_off
     35              left_on(5);
   \   000020   3C400500     MOV.W   #0x5, R12
   \   000024   ........     CALLA   #left_on
     36              left_off();
   \   000028   ........     CALLA   #left_off
     37              //five_msec_sleep(1);
     38              //Time_Sequence++;
     39              i++;
   \   00002C   1D53         ADD.W   #0x1, R13
   \   00002E   EF3F         JMP     ??motor_straight_0
     40            }
     41            left_off();
   \                     ??motor_straight_1:
   \   000030   ........     CALLA   #left_off
     42            right_off();
   \   000034   ........     BRA     #right_off
     43          }
     44          

   \                                 In  segment CODE, align 2
     45          void circle(void){
   \                     circle:
     46            //motor_straight(2);
     47            int i = 0;
   \   000000   0E43         MOV.W   #0x0, R14
     48            while(i<80){
   \                     ??circle_0:
   \   000002   3E905000     CMP.W   #0x50, R14
   \   000006   0E34         JGE     ??circle_1
     49              left_on(13);
   \   000008   3C400D00     MOV.W   #0xd, R12
   \   00000C   ........     CALLA   #left_on
     50              //five_msec_sleep(150);
     51              left_off();
   \   000010   ........     CALLA   #left_off
     52              right_on(3);
   \   000014   3C400300     MOV.W   #0x3, R12
   \   000018   ........     CALLA   #right_on
     53              //five_msec_sleep(10);
     54              right_off();
   \   00001C   ........     CALLA   #right_off
     55              i++;
   \   000020   1E53         ADD.W   #0x1, R14
   \   000022   EF3F         JMP     ??circle_0
     56            }
     57          }
   \                     ??circle_1:
   \   000024   1001         RETA
     58          

   \                                 In  segment CODE, align 2
     59          void right_off(void){
   \                     right_off:
     60            // Function to turn off right motor.
     61            P3OUT &= ~R_FORWARD;
   \   000000   F2C010002202 BIC.B   #0x10, &0x222
     62          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PBOUT_L
     63          

   \                                 In  segment CODE, align 2
     64          void left_off(void){
   \                     left_off:
     65            // Function to turn off left motor.
     66              P3OUT &= ~L_FORWARD;
   \   000000   F2C040002202 BIC.B   #0x40, &0x222
     67          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PBOUT_L
     68          

   \                                 In  segment CODE, align 2
     69          void right_on(unsigned int time_synch){
   \                     right_on:
     70            // Function to turn on right motor.
     71              //Time_Sequence = 0;
     72              tmp = time_synch + Time_Sequence + 2;
   \   000000   0F4C         MOV.W   R12, R15
   \   000002   1F52....     ADD.W   &Time_Sequence, R15
   \   000006   2F53         ADD.W   #0x2, R15
   \   000008   824F....     MOV.W   R15, &tmp
     73            while(Time_Sequence<tmp)
   \                     ??right_on_0:
   \   00000C   9292........ CMP.W   &tmp, &Time_Sequence
   \   000012   042C         JC      ??right_on_1
     74            {
     75              P3OUT |= R_FORWARD;
   \   000014   F2D010002202 BIS.B   #0x10, &0x222
   \   00001A   F83F         JMP     ??right_on_0
     76              //five_msec_sleep(1);
     77            }
     78          }
   \                     ??right_on_1:
   \   00001C   1001         RETA
   \   00001E                REQUIRE _A_PBOUT_L
     79          

   \                                 In  segment CODE, align 2
     80          void left_on(unsigned int time_synch){
   \                     left_on:
     81            // Function to turn on left motor.
     82              //Time_Sequence = 0;
     83              tmp = time_synch + Time_Sequence;
   \   000000   0F4C         MOV.W   R12, R15
   \   000002   1F52....     ADD.W   &Time_Sequence, R15
   \   000006   824F....     MOV.W   R15, &tmp
     84            while(Time_Sequence<tmp)
   \                     ??left_on_0:
   \   00000A   9292........ CMP.W   &tmp, &Time_Sequence
   \   000010   042C         JC      ??left_on_1
     85            {
     86              P3OUT |= L_FORWARD;
   \   000012   F2D040002202 BIS.B   #0x40, &0x222
   \   000018   F83F         JMP     ??left_on_0
     87            }
     88          }
   \                     ??left_on_1:
   \   00001A   1001         RETA
   \   00001C                REQUIRE _A_PBOUT_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Motors
        0   -> left_off
        4   -> right_off
      4   circle
        4   -> left_off
        4   -> left_on
        4   -> right_off
        4   -> right_on
      4   left_off
      4   left_on
      4   motor_straight
        4   -> left_off
        4   -> left_on
        0   -> right_off
        4   -> right_off
        4   -> right_on
      4   right_off
      4   right_on


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  Init_Motors
       2  _A_PBOUT_L
      38  circle
       8  left_off
      28  left_on
      56  motor_straight
       8  right_off
      30  right_on
       2  tmp

 
 176 bytes in segment CODE
   2 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
 
 176 bytes of CODE memory
   2 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
