###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           23/Sep/2015  18:11:55
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\switch.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 03\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          extern char *display_1;
     17          extern char *display_2;
     18          extern char *display_3;
     19          extern char *display_4;
     20          extern char posL1;
     21          extern char posL2;
     22          extern char posL3;
     23          extern char posL4;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          int button_counter1 = 0;
   \                     button_counter1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          int button_counter2 = 0;
   \                     button_counter2:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2
     26          void Switches_Process(void){
   \                     Switches_Process:
     27          //------------------------------------------------------------------------------
     28          // Switch proccess sets LCD text when SW1 and SW2 are pressed
     29            if (!(P4IN & SW1)){
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   1D2C         JC      ??Switches_Process_0
     30              /*display_1 = "Shape?";
     31              posL1 = 0;
     32              display_2 = ">1) Circle";
     33              posL2 = 0;
     34              display_3 = ">2) 3Angle";
     35              posL3 = 0;
     36              display_4 = ">3) Figure8";
     37              posL4 = 0;
     38              button_counter1++;*/
     39              display_1 = "NCSU";
   \   000006   B240........ MOV.W   #`?<Constant "NCSU">`, &display_1
     40              posL1 = SW1_posL1;
   \   00000C   F2400300.... MOV.B   #0x3, &posL1
     41              display_2 = "WOLFPACK";
   \   000012   B240........ MOV.W   #`?<Constant "WOLFPACK">`, &display_2
     42              posL2 = SW1_posL2;
   \   000018   D243....     MOV.B   #0x1, &posL2
     43              display_3 = "ECE306";
   \   00001C   B240........ MOV.W   #`?<Constant "ECE306">`, &display_3
     44              posL3 = SW1_posL3;
   \   000022   E243....     MOV.B   #0x2, &posL3
     45              display_4 = "S Brigman";
   \   000026   B240........ MOV.W   #`?<Constant "S Brigman">`, &display_4
     46              posL4 = SW1_posL4;
   \   00002C   D243....     MOV.B   #0x1, &posL4
     47              five_msec_sleep(FULL_SECOND); // wait 3s to run motor
   \   000030   3C40FA00     MOV.W   #0xfa, R12
   \   000034   ........     CALLA   #five_msec_sleep
     48              motor_straight(500); // run motor straigh for 3s
   \   000038   3C40F401     MOV.W   #0x1f4, R12
   \   00003C   ........     CALLA   #motor_straight
     49              
     50            }
     51            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_0:
   \   000040   E2B32102     BIT.B   #0x2, &0x221
   \   000044   1C2C         JC      ??Switches_Process_1
     52              /*while(button_counter2!=0){
     53                button_counter2++;
     54                switch(button_counter2-1){
     55                case 1:
     56                  display_1 = "";
     57                  posL1 = 0;
     58                  display_2 = "Driving";
     59                  posL2 = 0;
     60                  display_3 = "Straight";
     61                  posL3 = 0;
     62                  display_4 = "";
     63                  posL4 = 0;
     64                  Display_Process();
     65                  five_msec_sleep(750);
     66                   motor_straight(5);
     67                   button_counter2 = 0;
     68                   break;
     69                case 2:
     70                  display_1 = "";
     71                  posL1 = 0;
     72                  display_2 = "";
     73                  posL2 = 0;
     74                  display_3 = "Making A Circle";
     75                  posL3 = 0;
     76                  display_4 = "";
     77                  posL4 = 0;
     78                  Display_Process();
     79                  five_msec_sleep(750);
     80                   circle();
     81                   button_counter2 = 0;
     82                   break;
     83                case 3:
     84                  display_1 = "";
     85                  posL1 = 0;
     86                  display_2 = "";
     87                  posL2 = 0;
     88                  display_3 = "Making 3Angle";
     89                  posL3 = 0;
     90                  display_4 = "";
     91                  posL4 = 0;
     92                  Display_Process();
     93                  five_msec_sleep(750);
     94                  motor_straight(5);
     95                  button_counter2 = 0;
     96                  break;
     97                case 4:
     98                display_1 = "";
     99                  posL1 = 0;
    100                  display_2 = "";
    101                  posL2 = 0;
    102                  display_3 = "Figure8";
    103                  posL3 = 0;
    104                  display_4 = "";
    105                  posL4 = 0;
    106                  Display_Process();
    107                  five_msec_sleep(FULL_SECOND);
    108                  motor_straight(5);
    109                  button_counter2 = 0;
    110                  break;
    111                default:
    112                  display_1 = "";
    113                  posL1 = 0;
    114                  display_2 = "No Choice";
    115                  posL2 = 0;
    116                  display_3 = "Was Made!";
    117                  posL3 = 0;
    118                  display_4 = "";
    119                  posL4 = 0;
    120                  Display_Process();
    121                  five_msec_sleep(FULL_SECOND);
    122                  button_counter2 = 0;
    123                  break;
    124                }
    125              }*/
    126              display_1 = "Embedded";
   \   000046   B240........ MOV.W   #`?<Constant "Embedded">`, &display_1
    127              posL1 = SW2_posL1;
   \   00004C   D243....     MOV.B   #0x1, &posL1
    128              display_2 = "Systems";
   \   000050   B240........ MOV.W   #`?<Constant "Systems">`, &display_2
    129              posL2 = SW2_posL1;
   \   000056   D243....     MOV.B   #0x1, &posL2
    130              display_3 = "Rock!";
   \   00005A   B240........ MOV.W   #`?<Constant "Rock!">`, &display_3
    131              posL3 = SW2_posL1;
   \   000060   D243....     MOV.B   #0x1, &posL3
    132              display_4 = "Go Pack!";
   \   000064   B240........ MOV.W   #`?<Constant "Go Pack!">`, &display_4
    133              posL4 = SW2_posL1;
   \   00006A   D243....     MOV.B   #0x1, &posL4
    134              five_msec_sleep(FULL_SECOND); // wait 3s to run motor
   \   00006E   3C40FA00     MOV.W   #0xfa, R12
   \   000072   ........     CALLA   #five_msec_sleep
    135              circle();
   \   000076   ........     CALLA   #circle
    136              button_counter2++;
   \   00007A   9253....     ADD.W   #0x1, &button_counter2
    137            }
    138          //------------------------------------------------------------------------------
    139          }
   \                     ??Switches_Process_1:
   \   00007E   1001         RETA
   \   000080                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Embedded">`:
   \   000000   456D62656464 DC8 "Embedded"
   \            656400      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Systems">`:
   \   000000   53797374656D DC8 "Systems"
   \            7300        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Rock!">`:
   \   000000   526F636B2100 DC8 "Rock!"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Go Pack!">`:
   \   000000   476F20506163 DC8 "Go Pack!"
   \            6B2100      

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Switches_Process
        4   -> circle
        4   -> five_msec_sleep
        4   -> motor_straight


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "ECE306">
       9  ?<Constant "Embedded">
       9  ?<Constant "Go Pack!">
       5  ?<Constant "NCSU">
       6  ?<Constant "Rock!">
      10  ?<Constant "S Brigman">
       8  ?<Constant "Systems">
       9  ?<Constant "WOLFPACK">
     128  Switches_Process
       2  _A_PBIN_L
       2  button_counter1
       2  button_counter2

 
 128 bytes in segment CODE
   2 bytes in segment DATA16_AN
  63 bytes in segment DATA16_C
   4 bytes in segment DATA16_Z
 
 128 bytes of CODE  memory
  63 bytes of CONST memory
   4 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
