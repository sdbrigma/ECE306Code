###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           24/Sep/2015  15:14:50
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\switch.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 03\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          extern char *display_1;
     17          extern char *display_2;
     18          extern char *display_3;
     19          extern char *display_4;
     20          extern char posL1;
     21          extern char posL2;
     22          extern char posL3;
     23          extern char posL4;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          int button_counter1 = 0;
   \                     button_counter1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          int button_counter2 = 0;
   \                     button_counter2:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2
     26          void Switches_Process(void){
   \                     Switches_Process:
     27          //------------------------------------------------------------------------------
     28          // Switch proccess sets LCD text when SW1 and SW2 are pressed
     29            if (!(P4IN & SW1)){
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   1B2C         JC      ??Switches_Process_0
     30              /*display_1 = "Shape?";
     31              posL1 = 0;
     32              display_2 = ">1) Circle";
     33              posL2 = 0;
     34              display_3 = ">2) 3Angle";
     35              posL3 = 0;
     36              display_4 = ">3) Figure8";
     37              posL4 = 0;*/
     38              display_1 = "NCSU";
   \   000006   B240........ MOV.W   #`?<Constant "NCSU">`, &display_1
     39              posL1 = SW1_posL1;
   \   00000C   F2400300.... MOV.B   #0x3, &posL1
     40              display_2 = "WOLFPACK";
   \   000012   B240........ MOV.W   #`?<Constant "WOLFPACK">`, &display_2
     41              posL2 = SW1_posL2;
   \   000018   D243....     MOV.B   #0x1, &posL2
     42              display_3 = "ECE306";
   \   00001C   B240........ MOV.W   #`?<Constant "ECE306">`, &display_3
     43              posL3 = SW1_posL3;
   \   000022   E243....     MOV.B   #0x2, &posL3
     44              display_4 = "S Brigman";
   \   000026   B240........ MOV.W   #`?<Constant "S Brigman">`, &display_4
     45              posL4 = SW1_posL4;
   \   00002C   D243....     MOV.B   #0x1, &posL4
     46              five_msec_sleep(HALF_SECOND); // wait 3s to run motor
   \   000030   3C406400     MOV.W   #0x64, R12
   \   000034   ........     CALLA   #five_msec_sleep
     47              figure_eight();
   \   000038   ........     CALLA   #figure_eight
     48              
     49            }
     50            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_0:
   \   00003C   E2B32102     BIT.B   #0x2, &0x221
   \   000040   242C         JC      ??Switches_Process_1
     51              /*while(button_counter2!=0){
     52                button_counter2++;
     53                switch(button_counter2-1){
     54                case 1:
     55                  display_1 = "";
     56                  posL1 = 0;
     57                  display_2 = "Driving";
     58                  posL2 = 0;
     59                  display_3 = "Straight";
     60                  posL3 = 0;
     61                  display_4 = "";
     62                  posL4 = 0;
     63                  Display_Process();
     64                  five_msec_sleep(750);
     65                   motor_straight(5);
     66                   button_counter2 = 0;
     67                   break;
     68                case 2:
     69                  display_1 = "";
     70                  posL1 = 0;
     71                  display_2 = "";
     72                  posL2 = 0;
     73                  display_3 = "Making A Circle";
     74                  posL3 = 0;
     75                  display_4 = "";
     76                  posL4 = 0;
     77                  Display_Process();
     78                  five_msec_sleep(750);
     79                   circle();
     80                   button_counter2 = 0;
     81                   break;
     82                case 3:
     83                  display_1 = "";
     84                  posL1 = 0;
     85                  display_2 = "";
     86                  posL2 = 0;
     87                  display_3 = "Making 3Angle";
     88                  posL3 = 0;
     89                  display_4 = "";
     90                  posL4 = 0;
     91                  Display_Process();
     92                  five_msec_sleep(750);
     93                  motor_straight(5);
     94                  button_counter2 = 0;
     95                  break;
     96                case 4:
     97                display_1 = "";
     98                  posL1 = 0;
     99                  display_2 = "";
    100                  posL2 = 0;
    101                  display_3 = "Figure8";
    102                  posL3 = 0;
    103                  display_4 = "";
    104                  posL4 = 0;
    105                  Display_Process();
    106                  five_msec_sleep(FULL_SECOND);
    107                  motor_straight(5);
    108                  button_counter2 = 0;
    109                  break;
    110                default:
    111                  display_1 = "";
    112                  posL1 = 0;
    113                  display_2 = "No Choice";
    114                  posL2 = 0;
    115                  display_3 = "Was Made!";
    116                  posL3 = 0;
    117                  display_4 = "";
    118                  posL4 = 0;
    119                  Display_Process();
    120                  five_msec_sleep(FULL_SECOND);
    121                  button_counter2 = 0;
    122                  break;
    123                }
    124              }*/
    125              display_1 = "Embedded";
   \   000042   B240........ MOV.W   #`?<Constant "Embedded">`, &display_1
    126              posL1 = SW2_posL1;
   \   000048   D243....     MOV.B   #0x1, &posL1
    127              display_2 = "Systems";
   \   00004C   B240........ MOV.W   #`?<Constant "Systems">`, &display_2
    128              posL2 = SW2_posL1;
   \   000052   D243....     MOV.B   #0x1, &posL2
    129              display_3 = "Rock!";
   \   000056   B240........ MOV.W   #`?<Constant "Rock!">`, &display_3
    130              posL3 = SW2_posL1;
   \   00005C   D243....     MOV.B   #0x1, &posL3
    131              display_4 = "Go Pack!";
   \   000060   B240........ MOV.W   #`?<Constant "Go Pack!">`, &display_4
    132              posL4 = SW2_posL1;
   \   000066   D243....     MOV.B   #0x1, &posL4
    133              five_msec_sleep(HALF_SECOND); // wait 3s to run motor
   \   00006A   3C406400     MOV.W   #0x64, R12
   \   00006E   ........     CALLA   #five_msec_sleep
    134              if(button_counter2>0){
   \   000072   9293....     CMP.W   #0x1, &button_counter2
   \   000076   0538         JL      ??Switches_Process_2
    135                circle();
   \   000078   ........     CALLA   #circle
    136                button_counter2 = 0;
   \   00007C   8243....     MOV.W   #0x0, &button_counter2
   \   000080   1001         RETA
    137              }
    138              else{
    139                triangle();
   \                     ??Switches_Process_2:
   \   000082   ........     CALLA   #triangle
    140                button_counter2++;
   \   000086   9253....     ADD.W   #0x1, &button_counter2
    141              }
    142            }
    143          //------------------------------------------------------------------------------
    144          }
   \                     ??Switches_Process_1:
   \   00008A   1001         RETA
   \   00008C                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Embedded">`:
   \   000000   456D62656464 DC8 "Embedded"
   \            656400      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Systems">`:
   \   000000   53797374656D DC8 "Systems"
   \            7300        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Rock!">`:
   \   000000   526F636B2100 DC8 "Rock!"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Go Pack!">`:
   \   000000   476F20506163 DC8 "Go Pack!"
   \            6B2100      

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Switches_Process
        4   -> circle
        4   -> figure_eight
        4   -> five_msec_sleep
        4   -> triangle


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "ECE306">
       9  ?<Constant "Embedded">
       9  ?<Constant "Go Pack!">
       5  ?<Constant "NCSU">
       6  ?<Constant "Rock!">
      10  ?<Constant "S Brigman">
       8  ?<Constant "Systems">
       9  ?<Constant "WOLFPACK">
     140  Switches_Process
       2  _A_PBIN_L
       2  button_counter1
       2  button_counter2

 
 140 bytes in segment CODE
   2 bytes in segment DATA16_AN
  63 bytes in segment DATA16_C
   4 bytes in segment DATA16_Z
 
 140 bytes of CODE  memory
  63 bytes of CONST memory
   4 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
