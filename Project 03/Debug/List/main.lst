###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           24/Sep/2015  00:34:50
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\main.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\main.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 03\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\List\main.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        03\Debug\Obj\main.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 03\main.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "macros.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          
     16          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1
     21          extern char display_line_1[DISPLAY_LENGTH];
     22          extern char display_line_2[DISPLAY_LENGTH];
     23          extern char display_line_3[DISPLAY_LENGTH];
     24          extern char display_line_4[DISPLAY_LENGTH];
     25          extern char *display_1;
     26          extern char *display_2;
     27          extern char *display_3;
     28          extern char *display_4;
     29          extern char posL1;
     30          extern char posL2;
     31          extern char posL3;
     32          extern char posL4;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          char size_count;
   \                     size_count:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          char big;
   \                     big:
   \   000000                DS8 1
     35          

   \                                 In  segment CODE, align 2
     36          void main(void){
   \                     main:
     37          //------------------------------------------------------------------------------
     38          // Main Program
     39          // This is the main routine for the program. Execution of code starts here.
     40          // The operating system is Back Ground Fore Ground.
     41          // 
     42          //------------------------------------------------------------------------------
     43            Init_Ports();
   \   000000   ........     CALLA   #Init_Ports
     44            Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
     45            Init_Conditions();
   \   000008   ........     CALLA   #Init_Conditions
     46            PJOUT |= LED1;                            // Turn LED 1 on to indicate boot
   \   00000C   92D32203     BIS.W   #0x1, &0x322
     47            Time_Sequence = ZERO;                        // 
   \   000010   8243....     MOV.W   #0x0, &Time_Sequence
     48            Init_Timers();                            // Initialize Timers
   \   000014   ........     CALLA   #Init_Timers
     49            five_msec_sleep(QUARTER_SECOND);          // 250 msec delay for the clock to settle
   \   000018   3C403200     MOV.W   #0x32, R12
   \   00001C   ........     CALLA   #five_msec_sleep
     50            Init_LEDs();                              // Initialize LEDs
   \   000020   ........     CALLA   #Init_LEDs
     51            Init_LCD();                               // Initialize LCD
   \   000024   ........     CALLA   #Init_LCD
     52            Init_Motors();                            // Turns off both motors
   \   000028   ........     CALLA   #Init_Motors
     53            
     54          //             1234567890
     55            display_1 = "NCSU";
   \   00002C   B240........ MOV.W   #`?<Constant "NCSU">`, &display_1
     56            posL1 = SW1_posL1;
   \   000032   F2400300.... MOV.B   #0x3, &posL1
     57            display_2 = "WOLFPACK";
   \   000038   B240........ MOV.W   #`?<Constant "WOLFPACK">`, &display_2
     58            posL2 = SW1_posL2;
   \   00003E   D243....     MOV.B   #0x1, &posL2
     59            display_3 = "ECE306";
   \   000042   B240........ MOV.W   #`?<Constant "ECE306">`, &display_3
     60            posL3 = SW1_posL3;
   \   000048   E243....     MOV.B   #0x2, &posL3
     61            display_4 = "S Brigman";
   \   00004C   B240........ MOV.W   #`?<Constant "S Brigman">`, &display_4
     62            posL4 = SW1_posL4;
   \   000052   D243....     MOV.B   #0x1, &posL4
     63            big = ZERO;
   \   000056   C243....     MOV.B   #0x0, &big
     64            Display_Process();
   \   00005A   ........     CALLA   #Display_Process
     65          //------------------------------------------------------------------------------
     66          // Begining of the "While" Operating System
     67          //------------------------------------------------------------------------------
     68           while(ALWAYS) {                            // Can the Operating system run
     69            switch(Time_Sequence){
   \                     ??main_0:
   \   00005E   1F42....     MOV.W   &Time_Sequence, R15
   \   000062   3F803200     SUB.W   #0x32, R15
   \   000066   2B24         JEQ     ??main_3
   \   000068   3F803200     SUB.W   #0x32, R15
   \   00006C   2124         JEQ     ??main_4
   \   00006E   3F803200     SUB.W   #0x32, R15
   \   000072   1424         JEQ     ??main_5
   \   000074   3F803200     SUB.W   #0x32, R15
   \   000078   0C24         JEQ     ??main_6
   \   00007A   3F803200     SUB.W   #0x32, R15
   \   00007E   2D20         JNE     ??main_1
     70              case FULL_SECOND:                               // 1000 msec  
     71                if(one_time){
   \   000080   C293....     CMP.B   #0x0, &one_time
   \   000084   0424         JEQ     ??main_7
     72                  Init_LEDs();                        // Initialize LEDs
   \   000086   ........     CALLA   #Init_LEDs
     73                  one_time = ZERO;
   \   00008A   C243....     MOV.B   #0x0, &one_time
     74                }
     75                Time_Sequence = ZERO;                    // 
   \                     ??main_7:
   \   00008E   8243....     MOV.W   #0x0, &Time_Sequence
     76              case THOU_MS:                               // 1000 msec  
     77                if(one_time){
   \                     ??main_6:
   \   000092   C293....     CMP.B   #0x0, &one_time
   \   000096   0224         JEQ     ??main_5
     78                  //P3OUT |= LED5;                      // Change State of LED 5
     79                  one_time = ZERO;
   \   000098   C243....     MOV.B   #0x0, &one_time
     80                }
     81              case THIRD_SECOND:                               // 750 msec  
     82                if(one_time){
   \                     ??main_5:
   \   00009C   C293....     CMP.B   #0x0, &one_time
   \   0000A0   0724         JEQ     ??main_4
     83                  PJOUT |= LED3;                      // Change State of LED 3
   \   0000A2   A2D22203     BIS.W   #0x4, &0x322
     84                  P3OUT |= LED6;                      // Change State of LED 6
   \   0000A6   F2D020002202 BIS.B   #0x20, &0x222
     85                  one_time = ZERO;
   \   0000AC   C243....     MOV.B   #0x0, &one_time
     86                }
     87              case HALF_SECOND:                               // 500 msec  
     88                if(one_time){
   \                     ??main_4:
   \   0000B0   C293....     CMP.B   #0x0, &one_time
   \   0000B4   0424         JEQ     ??main_3
     89                  PJOUT |= LED2;                      // Change State of LED 2
   \   0000B6   A2D32203     BIS.W   #0x2, &0x322
     90                  //P3OUT |= LED7;                      // Change State of LED 7
     91                  one_time = ZERO;
   \   0000BA   C243....     MOV.B   #0x0, &one_time
     92                }
     93              case  QUARTER_SECOND:                               // 250 msec  
     94                if(one_time){
   \                     ??main_3:
   \   0000BE   C293....     CMP.B   #0x0, &one_time
   \   0000C2   0724         JEQ     ??main_8
     95                  PJOUT |= LED1;                      // Change State of LED 1
   \   0000C4   92D32203     BIS.W   #0x1, &0x322
     96                  P3OUT |= LED8;                      // Change State of LED 8
   \   0000C8   F2D080002202 BIS.B   #0x80, &0x222
     97                  one_time = ZERO;
   \   0000CE   C243....     MOV.B   #0x0, &one_time
     98                }
     99                size_count++;
   \                     ??main_8:
   \   0000D2   D253....     ADD.B   #0x1, &size_count
    100                /*if(size_count > BIG_LETTERS){
    101                  size_count = ZERO;
    102                  if(big){
    103                    lcd_BIG_mid();
    104                    big = ZERO;
    105                  }else{
    106                    lcd_4line();
    107                    big = ONE;
    108                  }
    109                }*/
    110                Display_Process();
   \   0000D6   ........     CALLA   #Display_Process
    111                break;                                // 
    112              default: break; 
    113            }
    114            Switches_Process();                       // Check for switch state change 
   \                     ??main_1:
   \   0000DA   ........     CALLA   #Switches_Process
    115            if(Time_Sequence > 250){ // 1000 msec
   \   0000DE   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   0000E4   BC2B         JNC     ??main_0
    116              Time_Sequence = ZERO;
   \   0000E6   8243....     MOV.W   #0x0, &Time_Sequence
   \   0000EA   B93F         JMP     ??main_0
   \   0000EC   0343         NOP
   \   0000EE                REQUIRE _A_PJOUT_L
   \   0000EE                REQUIRE _A_PBOUT_L
    117            }
    118           }
    119          //------------------------------------------------------------------------------
    120          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Motors
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Switches_Process
        4   -> five_msec_sleep


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "ECE306">
       5  ?<Constant "NCSU">
      10  ?<Constant "S Brigman">
       9  ?<Constant "WOLFPACK">
       2  Time_Sequence
       2  _A_PBOUT_L
       2  _A_PJOUT_L
       1  big
       3  control_state
       1  led_smclk
     238  main
       1  one_time
       1  size_count

 
 238 bytes in segment CODE
   4 bytes in segment DATA16_AN
  31 bytes in segment DATA16_C
   9 bytes in segment DATA16_Z
 
 238 bytes of CODE  memory
  31 bytes of CONST memory
   9 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
