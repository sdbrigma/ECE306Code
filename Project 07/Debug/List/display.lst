###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           16/Nov/2015  17:14:08
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\display.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\display.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 07\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\display.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\display.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\display.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Dispaly Process function controlling
      4          //  the LCD.
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          
     13          #include  "macros.h"
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          

   \                                 In  segment CODE, align 2
     17          void Display_Process(void){
   \                     Display_Process:
     18          // Function that initialezes LCD display
     19            ClrDisplay();
   \   000000   ........     CALLA   #ClrDisplay
     20            lcd_out(display_1, LCD_HOME_L1, posL1);
   \   000004   5E42....     MOV.B   &posL1, R14
   \   000008   7D408000     MOV.B   #0x80, R13
   \   00000C   1C42....     MOV.W   &display_1, R12
   \   000010   ........     CALLA   #lcd_out
     21            lcd_out(display_2, LCD_HOME_L2, posL2);
   \   000014   5E42....     MOV.B   &posL2, R14
   \   000018   7D40A000     MOV.B   #0xa0, R13
   \   00001C   1C42....     MOV.W   &display_2, R12
   \   000020   ........     CALLA   #lcd_out
     22            lcd_out(display_3, LCD_HOME_L3, posL3);
   \   000024   5E42....     MOV.B   &posL3, R14
   \   000028   7D40C000     MOV.B   #0xc0, R13
   \   00002C   1C42....     MOV.W   &display_3, R12
   \   000030   ........     CALLA   #lcd_out
     23            lcd_out(display_4, LCD_HOME_L4, posL4);
   \   000034   5E42....     MOV.B   &posL4, R14
   \   000038   7D40E000     MOV.B   #0xe0, R13
   \   00003C   1C42....     MOV.W   &display_4, R12
   \   000040   ........     BRA     #lcd_out
     24          }
     25          

   \                                 In  segment CODE, align 2
     26          void setLCD(const char display1[], int pos1, const char display2[], int pos2,// ONLY TAKES STRINGS
   \                     setLCD:
     27                      const char display3[], int pos3, const char display4[], int pos4){
   \   000000   7B15         PUSHM.W #0x8, R11
   \   000002   0D12         PUSH.W  R13
   \   000004   0A4C         MOV.W   R12, R10
   \   000006   0B4E         MOV.W   R14, R11
   \   000008   084F         MOV.W   R15, R8
   \   00000A   19411600     MOV.W   0x16(SP), R9
   \   00000E   16411800     MOV.W   0x18(SP), R6
   \   000012   17411A00     MOV.W   0x1a(SP), R7
   \   000016   15411C00     MOV.W   0x1c(SP), R5
     28                        
     29            int i = ZERO;
   \   00001A   0443         MOV.W   #0x0, R4
     30            posL1 = pos1;
   \   00001C   E241....     MOV.B   @SP, &posL1
     31            posL2 = pos2;
   \   000020   C248....     MOV.B   R8, &posL2
     32            posL3 = pos3;
   \   000024   C246....     MOV.B   R6, &posL3
     33            posL4 = pos4;
   \   000028   C245....     MOV.B   R5, &posL4
     34            while(i<10){
   \                     ??setLCD_0:
   \   00002C   34900A00     CMP.W   #0xa, R4
   \   000030   1E34         JGE     ??setLCD_1
     35              display_1[i] = display1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F54         ADD.W   R4, R15
   \   000036   1E42....     MOV.W   &display_1, R14
   \   00003A   0E54         ADD.W   R4, R14
   \   00003C   EE4F0000     MOV.B   @R15, 0(R14)
     36              display_2[i] = display2[i];
   \   000040   0F4B         MOV.W   R11, R15
   \   000042   0F54         ADD.W   R4, R15
   \   000044   1E42....     MOV.W   &display_2, R14
   \   000048   0E54         ADD.W   R4, R14
   \   00004A   EE4F0000     MOV.B   @R15, 0(R14)
     37              display_3[i] = display3[i];
   \   00004E   0F49         MOV.W   R9, R15
   \   000050   0F54         ADD.W   R4, R15
   \   000052   1E42....     MOV.W   &display_3, R14
   \   000056   0E54         ADD.W   R4, R14
   \   000058   EE4F0000     MOV.B   @R15, 0(R14)
     38              display_4[i] = display4[i];
   \   00005C   0F47         MOV.W   R7, R15
   \   00005E   0F54         ADD.W   R4, R15
   \   000060   1E42....     MOV.W   &display_4, R14
   \   000064   0E54         ADD.W   R4, R14
   \   000066   EE4F0000     MOV.B   @R15, 0(R14)
     39              i++;
   \   00006A   1453         ADD.W   #0x1, R4
   \   00006C   DF3F         JMP     ??setLCD_0
     40            }
     41            Display_Process();
   \                     ??setLCD_1:
   \   00006E   ........     CALLA   #Display_Process
     42            Five_msec_Delay(30);
   \   000072   3C401E00     MOV.W   #0x1e, R12
   \   000076   ........     CALLA   #Five_msec_Delay
     43          }
   \   00007A   2153         ADD.W   #0x2, SP
   \   00007C   7417         POPM.W  #0x8, R11
   \   00007E   1001         RETA
     44          

   \                                 In  segment CODE, align 2
     45          void clearLCD(void){
   \                     clearLCD:
   \   000000   0A12         PUSH.W  R10
     46            int i = ZERO;
   \   000002   0A43         MOV.W   #0x0, R10
     47            posL1 = ZERO;
   \   000004   C243....     MOV.B   #0x0, &posL1
     48            posL2 = ZERO;
   \   000008   C243....     MOV.B   #0x0, &posL2
     49            posL3 = ZERO;
   \   00000C   C243....     MOV.B   #0x0, &posL3
     50            posL4 = ZERO;
   \   000010   C243....     MOV.B   #0x0, &posL4
     51            while(i<10){
   \                     ??clearLCD_0:
   \   000014   3A900A00     CMP.W   #0xa, R10
   \   000018   1634         JGE     ??clearLCD_1
     52              display_1[i] = ORIGINAL;
   \   00001A   1F42....     MOV.W   &display_1, R15
   \   00001E   0F5A         ADD.W   R10, R15
   \   000020   CF430000     MOV.B   #0x0, 0(R15)
     53              display_2[i] = ORIGINAL;
   \   000024   1F42....     MOV.W   &display_2, R15
   \   000028   0F5A         ADD.W   R10, R15
   \   00002A   CF430000     MOV.B   #0x0, 0(R15)
     54              display_3[i] = ORIGINAL;
   \   00002E   1F42....     MOV.W   &display_3, R15
   \   000032   0F5A         ADD.W   R10, R15
   \   000034   CF430000     MOV.B   #0x0, 0(R15)
     55              display_4[i] = ORIGINAL;
   \   000038   1F42....     MOV.W   &display_4, R15
   \   00003C   0F5A         ADD.W   R10, R15
   \   00003E   CF430000     MOV.B   #0x0, 0(R15)
     56              i++;
   \   000042   1A53         ADD.W   #0x1, R10
   \   000044   E73F         JMP     ??clearLCD_0
     57            }
     58            Display_Process();
   \                     ??clearLCD_1:
   \   000046   ........     CALLA   #Display_Process
     59            Five_msec_Delay(30);
   \   00004A   3C401E00     MOV.W   #0x1e, R12
   \   00004E   ........     CALLA   #Five_msec_Delay
     60          }
   \   000052   3A41         POP.W   R10
   \   000054   1001         RETA
     61          

   \                                 In  segment CODE, align 2
     62          void displayLine1(const char display1[], int pos1){
   \                     displayLine1:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   0A4D         MOV.W   R13, R10
     63            int i = ZERO;
   \   000006   0843         MOV.W   #0x0, R8
     64            posL1 = pos1;
   \   000008   C24A....     MOV.B   R10, &posL1
     65            while(i<10){
   \                     ??displayLine1_0:
   \   00000C   38900A00     CMP.W   #0xa, R8
   \   000010   0934         JGE     ??displayLine1_1
     66              display_1[i] = display1[i];
   \   000012   0F4B         MOV.W   R11, R15
   \   000014   0F58         ADD.W   R8, R15
   \   000016   1E42....     MOV.W   &display_1, R14
   \   00001A   0E58         ADD.W   R8, R14
   \   00001C   EE4F0000     MOV.B   @R15, 0(R14)
     67              i++;
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   F43F         JMP     ??displayLine1_0
     68            }
     69            Display_Process();
   \                     ??displayLine1_1:
   \   000024   ........     CALLA   #Display_Process
     70            Five_msec_Delay(30);
   \   000028   3C401E00     MOV.W   #0x1e, R12
   \   00002C   ........     CALLA   #Five_msec_Delay
     71          }
   \   000030   3817         POPM.W  #0x4, R11
   \   000032   1001         RETA
     72          

   \                                 In  segment CODE, align 2
     73          void displayLine2(const char display2[], int pos2){
   \                     displayLine2:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   0A4D         MOV.W   R13, R10
     74            int i = ZERO;
   \   000006   0843         MOV.W   #0x0, R8
     75            posL2 = pos2;
   \   000008   C24A....     MOV.B   R10, &posL2
     76            while(i<10){
   \                     ??displayLine2_0:
   \   00000C   38900A00     CMP.W   #0xa, R8
   \   000010   0934         JGE     ??displayLine2_1
     77              display_2[i] = display2[i];
   \   000012   0F4B         MOV.W   R11, R15
   \   000014   0F58         ADD.W   R8, R15
   \   000016   1E42....     MOV.W   &display_2, R14
   \   00001A   0E58         ADD.W   R8, R14
   \   00001C   EE4F0000     MOV.B   @R15, 0(R14)
     78              i++;
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   F43F         JMP     ??displayLine2_0
     79            }
     80            Display_Process();
   \                     ??displayLine2_1:
   \   000024   ........     CALLA   #Display_Process
     81            Five_msec_Delay(30);
   \   000028   3C401E00     MOV.W   #0x1e, R12
   \   00002C   ........     CALLA   #Five_msec_Delay
     82          }
   \   000030   3817         POPM.W  #0x4, R11
   \   000032   1001         RETA
     83          

   \                                 In  segment CODE, align 2
     84          void displayLine3(const char display3[], int pos3){
   \                     displayLine3:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   0A4D         MOV.W   R13, R10
     85            int i = ZERO;
   \   000006   0843         MOV.W   #0x0, R8
     86            posL3 = pos3;
   \   000008   C24A....     MOV.B   R10, &posL3
     87            while(i<10){
   \                     ??displayLine3_0:
   \   00000C   38900A00     CMP.W   #0xa, R8
   \   000010   0934         JGE     ??displayLine3_1
     88              display_3[i] = display3[i];
   \   000012   0F4B         MOV.W   R11, R15
   \   000014   0F58         ADD.W   R8, R15
   \   000016   1E42....     MOV.W   &display_3, R14
   \   00001A   0E58         ADD.W   R8, R14
   \   00001C   EE4F0000     MOV.B   @R15, 0(R14)
     89              i++;
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   F43F         JMP     ??displayLine3_0
     90            }
     91            Display_Process();
   \                     ??displayLine3_1:
   \   000024   ........     CALLA   #Display_Process
     92            Five_msec_Delay(30);
   \   000028   3C401E00     MOV.W   #0x1e, R12
   \   00002C   ........     CALLA   #Five_msec_Delay
     93          }
   \   000030   3817         POPM.W  #0x4, R11
   \   000032   1001         RETA
     94          

   \                                 In  segment CODE, align 2
     95          void displayLine4(const char display4[], int pos4){
   \                     displayLine4:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
   \   000004   0A4D         MOV.W   R13, R10
     96            int i = ZERO;
   \   000006   0843         MOV.W   #0x0, R8
     97            posL4 = pos4;
   \   000008   C24A....     MOV.B   R10, &posL4
     98            while(i<10){
   \                     ??displayLine4_0:
   \   00000C   38900A00     CMP.W   #0xa, R8
   \   000010   0934         JGE     ??displayLine4_1
     99              display_4[i] = display4[i];
   \   000012   0F4B         MOV.W   R11, R15
   \   000014   0F58         ADD.W   R8, R15
   \   000016   1E42....     MOV.W   &display_4, R14
   \   00001A   0E58         ADD.W   R8, R14
   \   00001C   EE4F0000     MOV.B   @R15, 0(R14)
    100              i++;
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   F43F         JMP     ??displayLine4_0
    101            }
    102            Display_Process();
   \                     ??displayLine4_1:
   \   000024   ........     CALLA   #Display_Process
    103            Five_msec_Delay(30);
   \   000028   3C401E00     MOV.W   #0x1e, R12
   \   00002C   ........     CALLA   #Five_msec_Delay
    104          }
   \   000030   3817         POPM.W  #0x4, R11
   \   000032   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Display_Process
        4   -> ClrDisplay
        0   -> lcd_out
        4   -> lcd_out
      6   clearLCD
        6   -> Display_Process
        6   -> Five_msec_Delay
     12   displayLine1
       12   -> Display_Process
       12   -> Five_msec_Delay
     12   displayLine2
       12   -> Display_Process
       12   -> Five_msec_Delay
     12   displayLine3
       12   -> Display_Process
       12   -> Five_msec_Delay
     12   displayLine4
       12   -> Display_Process
       12   -> Five_msec_Delay
     22   setLCD
       22   -> Display_Process
       22   -> Five_msec_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      68  Display_Process
      86  clearLCD
      52  displayLine1
      52  displayLine2
      52  displayLine3
      52  displayLine4
     128  setLCD

 
 490 bytes in segment CODE
 
 490 bytes of CODE memory

Errors: none
Warnings: none
