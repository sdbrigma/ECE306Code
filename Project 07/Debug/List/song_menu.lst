###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           15/Nov/2015  16:22:52
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\song_menu.c
#    Command line  =  
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\song_menu.c" -lC
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\List\song_menu.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_09\Debug\Obj\song_menu.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_09\song_menu.c
      1          #include  "macros.h"
      2          #include  "msp430.h"
      3          #include  "functions.h"
      4          

   \                                 In  segment CODE, align 2
      5          void getSongMenu(unsigned int adc_value){
   \                     getSongMenu:
   \   000000   0A12         PUSH.W  R10
   \   000002   3180EA00     SUB.W   #0xea, SP
   \   000006   0A4C         MOV.W   R12, R10
      6            ADC_Process();
   \   000008   ........     CALLA   #ADC_Process
      7            char HW9_String[233] = "We're the Red and White from State And we know we are the best. A hand behind our back, We can take on all the rest. Come over the hill, Carolina. Devils and Deacs stand in line. The Red and White from N.C. State. Go State!";
   \   00000C   0C41         MOV.W   SP, R12
   \   00000E   3E40....     MOV.W   #`?<Constant "We\\'re the Red and Whi...">`, R14
   \   000012   3D40E900     MOV.W   #0xe9, R13
   \   000016   ........     CALLA   #?CopyMemoryBytes
      8            if(adc_value > (ADC_Thumb + LINE_POS_L3)){
   \   00001A   1F42....     MOV.W   &ADC_Thumb, R15
   \   00001E   3F500300     ADD.W   #0x3, R15
   \   000022   0F9A         CMP.W   R10, R15
   \   000024   762C         JC      ??getSongMenu_0
      9              if(color == ALWAYS){
   \   000026   9293....     CMP.W   #0x1, &color
   \   00002A   0E20         JNE     ??getSongMenu_1
     10                display_1 = "Red";
   \   00002C   B240........ MOV.W   #`?<Constant "Red">`, &display_1
     11                posL1 = LINE_POS_L4;
   \   000032   E242....     MOV.B   #0x4, &posL1
     12                display_3 = "White";
   \   000036   B240........ MOV.W   #`?<Constant "White">`, &display_3
     13                posL3 = LINE_POS_L3;
   \   00003C   F2400300.... MOV.B   #0x3, &posL3
     14                color++;
   \   000042   9253....     ADD.W   #0x1, &color
   \   000046   0D3C         JMP     ??getSongMenu_2
     15              }
     16              else {
     17                display_1 = "White";
   \                     ??getSongMenu_1:
   \   000048   B240........ MOV.W   #`?<Constant "White">`, &display_1
     18                posL1 = LINE_POS_L3;
   \   00004E   F2400300.... MOV.B   #0x3, &posL1
     19                display_3 = "Red";
   \   000054   B240........ MOV.W   #`?<Constant "Red">`, &display_3
     20                posL3 = LINE_POS_L4;
   \   00005A   E242....     MOV.B   #0x4, &posL3
     21                color--;
   \   00005E   B253....     ADD.W   #0xffff, &color
     22              }
     23              display_2[LINE_POS_L0] = HW9_String[inc];
   \                     ??getSongMenu_2:
   \   000062   1F42....     MOV.W   &`inc`, R15
   \   000066   0F51         ADD.W   SP, R15
   \   000068   1E42....     MOV.W   &display_2, R14
   \   00006C   EE4F0000     MOV.B   @R15, 0(R14)
     24              display_2[LINE_POS_L1] = HW9_String[inc + LINE_POS_L1];
   \   000070   0F41         MOV.W   SP, R15
   \   000072   1F52....     ADD.W   &`inc`, R15
   \   000076   1E42....     MOV.W   &display_2, R14
   \   00007A   DE4F01000100 MOV.B   0x1(R15), 0x1(R14)
     25              display_2[LINE_POS_L2] = HW9_String[inc + LINE_POS_L2];
   \   000080   0F41         MOV.W   SP, R15
   \   000082   1F52....     ADD.W   &`inc`, R15
   \   000086   1E42....     MOV.W   &display_2, R14
   \   00008A   DE4F02000200 MOV.B   0x2(R15), 0x2(R14)
     26              display_2[LINE_POS_L3] = HW9_String[inc + LINE_POS_L3];
   \   000090   0F41         MOV.W   SP, R15
   \   000092   1F52....     ADD.W   &`inc`, R15
   \   000096   1E42....     MOV.W   &display_2, R14
   \   00009A   DE4F03000300 MOV.B   0x3(R15), 0x3(R14)
     27              display_2[LINE_POS_L4] = HW9_String[inc + LINE_POS_L4];
   \   0000A0   0F41         MOV.W   SP, R15
   \   0000A2   1F52....     ADD.W   &`inc`, R15
   \   0000A6   1E42....     MOV.W   &display_2, R14
   \   0000AA   DE4F04000400 MOV.B   0x4(R15), 0x4(R14)
     28              display_2[LINE_POS_L5] = HW9_String[inc + LINE_POS_L5];
   \   0000B0   0F41         MOV.W   SP, R15
   \   0000B2   1F52....     ADD.W   &`inc`, R15
   \   0000B6   1E42....     MOV.W   &display_2, R14
   \   0000BA   DE4F05000500 MOV.B   0x5(R15), 0x5(R14)
     29              display_2[LINE_POS_L6] = HW9_String[inc + LINE_POS_L6];
   \   0000C0   0F41         MOV.W   SP, R15
   \   0000C2   1F52....     ADD.W   &`inc`, R15
   \   0000C6   1E42....     MOV.W   &display_2, R14
   \   0000CA   DE4F06000600 MOV.B   0x6(R15), 0x6(R14)
     30              display_2[LINE_POS_L7] = HW9_String[inc + LINE_POS_L7];
   \   0000D0   0F41         MOV.W   SP, R15
   \   0000D2   1F52....     ADD.W   &`inc`, R15
   \   0000D6   1E42....     MOV.W   &display_2, R14
   \   0000DA   DE4F07000700 MOV.B   0x7(R15), 0x7(R14)
     31              display_2[LINE_POS_L8] = HW9_String[inc + LINE_POS_L8];
   \   0000E0   0F41         MOV.W   SP, R15
   \   0000E2   1F52....     ADD.W   &`inc`, R15
   \   0000E6   1E42....     MOV.W   &display_2, R14
   \   0000EA   DE4F08000800 MOV.B   0x8(R15), 0x8(R14)
     32              display_2[LINE_POS_L9] = HW9_String[inc + LINE_POS_L9];
   \   0000F0   0F41         MOV.W   SP, R15
   \   0000F2   1F52....     ADD.W   &`inc`, R15
   \   0000F6   1E42....     MOV.W   &display_2, R14
   \   0000FA   DE4F09000900 MOV.B   0x9(R15), 0x9(R14)
     33              Display_Process();
   \   000100   ........     CALLA   #Display_Process
     34              Five_msec_Delay(15);
   \   000104   3C400F00     MOV.W   #0xf, R12
   \   000108   ........     CALLA   #Five_msec_Delay
     35              inc = inc + 10;
   \   00010C   B2500A00.... ADD.W   #0xa, &`inc`
     36              /*unsigned int tmp = adc_value-ADC_Thumb;
     37              if(tmp>3){
     38                inc = inc + 10;
     39              }*/
     40            }
     41          }
   \                     ??getSongMenu_0:
   \   000112   3150EA00     ADD.W   #0xea, SP
   \   000116   3A41         POP.W   R10
   \   000118   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "We\\'re the Red and Whi...">`:
   \   000000   576527726520 DC8 57H, 65H, 27H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000008   652052656420 DC8 65H, 20H, 52H, 65H, 64H, 20H, 61H, 6EH
   \            616E        
   \   000010   642057686974 DC8 64H, 20H, 57H, 68H, 69H, 74H, 65H, 20H
   \            6520        
   \   000018   66726F6D2053 DC8 66H, 72H, 6FH, 6DH, 20H, 53H, 74H, 61H
   \            7461        
   \   000020   746520416E64 DC8 74H, 65H, 20H, 41H, 6EH, 64H, 20H, 77H
   \            2077        
   \   000028   65206B6E6F77 DC8 65H, 20H, 6BH, 6EH, 6FH, 77H, 20H, 77H
   \            2077        
   \   000030   652061726520 DC8 65H, 20H, 61H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000038   652062657374 DC8 65H, 20H, 62H, 65H, 73H, 74H, 2EH, 20H
   \            2E20        
   \   000040   412068616E64 DC8 41H, 20H, 68H, 61H, 6EH, 64H, 20H, 62H
   \            2062        
   \   000048   6568696E6420 DC8 65H, 68H, 69H, 6EH, 64H, 20H, 6FH, 75H
   \            6F75        
   \   000050   72206261636B DC8 72H, 20H, 62H, 61H, 63H, 6BH, 2CH, 20H
   \            2C20        
   \   000058   57652063616E DC8 57H, 65H, 20H, 63H, 61H, 6EH, 20H, 74H
   \            2074        
   \   000060   616B65206F6E DC8 61H, 6BH, 65H, 20H, 6FH, 6EH, 20H, 61H
   \            2061        
   \   000068   6C6C20746865 DC8 6CH, 6CH, 20H, 74H, 68H, 65H, 20H, 72H
   \            2072        
   \   000070   6573742E2043 DC8 65H, 73H, 74H, 2EH, 20H, 43H, 6FH, 6DH
   \            6F6D        
   \   000078   65206F766572 DC8 65H, 20H, 6FH, 76H, 65H, 72H, 20H, 74H
   \            2074        
   \   000080   68652068696C DC8 68H, 65H, 20H, 68H, 69H, 6CH, 6CH, 2CH
   \            6C2C        
   \   000088   204361726F6C DC8 20H, 43H, 61H, 72H, 6FH, 6CH, 69H, 6EH
   \            696E        
   \   000090   612E20446576 DC8 61H, 2EH, 20H, 44H, 65H, 76H, 69H, 6CH
   \            696C        
   \   000098   7320616E6420 DC8 73H, 20H, 61H, 6EH, 64H, 20H, 44H, 65H
   \            4465        
   \   0000A0   616373207374 DC8 61H, 63H, 73H, 20H, 73H, 74H, 61H, 6EH
   \            616E        
   \   0000A8   6420696E206C DC8 64H, 20H, 69H, 6EH, 20H, 6CH, 69H, 6EH
   \            696E        
   \   0000B0   652E20546865 DC8 65H, 2EH, 20H, 54H, 68H, 65H, 20H, 52H
   \            2052        
   \   0000B8   656420616E64 DC8 65H, 64H, 20H, 61H, 6EH, 64H, 20H, 57H
   \            2057        
   \   0000C0   686974652066 DC8 68H, 69H, 74H, 65H, 20H, 66H, 72H, 6FH
   \            726F        
   \   0000C8   6D204E2E432E DC8 6DH, 20H, 4EH, 2EH, 43H, 2EH, 20H, 53H
   \            2053        
   \   0000D0   746174652E20 DC8 74H, 61H, 74H, 65H, 2EH, 20H, 47H, 6FH
   \            476F        
   \   0000D8   205374617465 DC8 20H, 53H, 74H, 61H, 74H, 65H, 21H, 0
   \            2100        
   \   0000E0   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Red">`:
   \   000000   52656400     DC8 "Red"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "White">`:
   \   000000   576869746500 DC8 "White"

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
    240   getSongMenu
      240   -> ADC_Process
      240   -> Display_Process
      240   -> Five_msec_Delay
      240 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "Red">
     233  ?<Constant "We\'re the Red and Whi...">
       6  ?<Constant "White">
     282  getSongMenu

 
 282 bytes in segment CODE
 243 bytes in segment DATA16_C
 
 282 bytes of CODE  memory
 243 bytes of CONST memory

Errors: none
Warnings: none
