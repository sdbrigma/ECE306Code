###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           18/Nov/2015  13:44:00
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\main.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\main.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 07\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\main.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\main.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\main.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "macros.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          
     16          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          int ISR_COUNT = ZERO;
   \                     ISR_COUNT:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          int UPDATE_LCD = ZERO;
   \                     UPDATE_LCD:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          unsigned int ADC_Thumb;
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          unsigned int ADC_Right_Detector;
   \                     ADC_Right_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          unsigned int ADC_Left_Detector;
   \                     ADC_Left_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          unsigned int ADC_Temp;
   \                     ADC_Temp:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int ADC_Bat;
   \                     ADC_Bat:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned int tracking_value_high;
   \                     tracking_value_high:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          unsigned int tracking_value_low;
   \                     tracking_value_low:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int tracking_value;
   \                     tracking_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int ambience;
   \                     ambience:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          int ADC_Channel = ZERO;
   \                     ADC_Channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1
     33          extern char display_line_1[DISPLAY_LENGTH];
     34          extern char display_line_2[DISPLAY_LENGTH];
     35          extern char display_line_3[DISPLAY_LENGTH];
     36          extern char display_line_4[DISPLAY_LENGTH];
     37          extern char *display_1;
     38          extern char *display_2;
     39          extern char *display_3;
     40          extern char *display_4;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          char posL1;
   \                     posL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          char posL2;
   \                     posL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          char posL3;
   \                     posL3:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          char posL4;
   \                     posL4:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          char size_count;
   \                     size_count:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          unsigned int cpu_rx_ring_wr;
   \                     cpu_rx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          unsigned int cpu_rx_ring_rd;
   \                     cpu_rx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          unsigned int cpu_tx_ring_wr;
   \                     cpu_tx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          unsigned int cpu_tx_ring_rd;
   \                     cpu_tx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          char big;
   \                     big:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          volatile char CPU_Char_Rx[IOT_RING_SIZE];
   \                     CPU_Char_Rx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     52          volatile char CPU_Char_Tx[IOT_RING_SIZE];
   \                     CPU_Char_Tx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     53          unsigned int inc = ZERO;
   \                     `inc`:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     54          unsigned int color = ALWAYS;
   \                     color:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for color>`

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     55          volatile char USB_Char_Rx[IOT_RING_SIZE];
   \                     USB_Char_Rx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     56          volatile char USB_Char_Tx[IOT_RING_SIZE];
   \                     USB_Char_Tx:
   \   000000                DS8 40

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     57          unsigned int usb_rx_ring_wr;
   \                     usb_rx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     58          unsigned int usb_rx_ring_rd;
   \                     usb_rx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     59          unsigned int usb_tx_ring_wr;
   \                     usb_tx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     60          unsigned int usb_tx_ring_rd;
   \                     usb_tx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     61          volatile unsigned int rxRead;
   \                     rxRead:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     62          volatile unsigned int IOTRead;
   \                     IOTRead:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     63          volatile char RX_Char[SMALL_RING_SIZE];
   \                     RX_Char:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     64          volatile char IOT_RX[SMALL_RING_SIZE];
   \                     IOT_RX:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     65          volatile char test;
   \                     test:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     66          volatile _Bool receiveEnable;
   \                     receiveEnable:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     67          volatile _Bool USB_Received;
   \                     USB_Received:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     68          volatile _Bool IOT_Received;
   \                     IOT_Received:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     69          char sw_select;
   \                     sw_select:
   \   000000                DS8 1
     70          

   \                                 In  segment CODE, align 2
     71          void main(void){
   \                     main:
   \   000000   0A12         PUSH.W  R10
     72          //------------------------------------------------------------------------------
     73          // Main Program
     74          // This is the main routine for the program. Execution of code starts here.
     75          // The operating system is Back Ground Fore Ground.
     76          // 
     77          //------------------------------------------------------------------------------
     78            Init_Ports();
   \   000002   ........     CALLA   #Init_Ports
     79            Init_Clocks();                            // Initialize Clock System 
   \   000006   ........     CALLA   #Init_Clocks
     80            Init_Conditions();
   \   00000A   ........     CALLA   #Init_Conditions
     81            Time_Sequence = ZERO;                        // 
   \   00000E   8243....     MOV.W   #0x0, &Time_Sequence
     82            Init_Timers();                            // Initialize Timers
   \   000012   ........     CALLA   #Init_Timers
     83            Five_msec_Delay(QUARTER_SECOND);          // 250 msec delay for the clock to settle
   \   000016   3C403200     MOV.W   #0x32, R12
   \   00001A   ........     CALLA   #Five_msec_Delay
     84            Init_LEDs();                              // Initialize LEDs
   \   00001E   ........     CALLA   #Init_LEDs
     85            Init_LCD();                               // Initialize LCD
   \   000022   ........     CALLA   #Init_LCD
     86            Init_Motors();                            // Turns off both motors
   \   000026   ........     CALLA   #Init_Motors
     87            Init_ADC();
   \   00002A   ........     CALLA   #Init_ADC
     88            Init_Serial_UCA1();
   \   00002E   ........     CALLA   #Init_Serial_UCA1
     89            Init_Serial_UCA0();
   \   000032   ........     CALLA   #Init_Serial_UCA0
     90            //Init_IOT();
     91            int i = ZERO;
   \   000036   0A43         MOV.W   #0x0, R10
     92            
     93          //             1234567890
     94            clearLCD();
   \   000038   ........     CALLA   #clearLCD
     95            setLCD("NCSU",SW1_posL1,"WOLFPACK",SW1_posL2,"ECE306",SW1_posL3,"S Brigman",SW1_posL4);
   \   00003C   1312         PUSH.W  #0x1
   \   00003E   3012....     PUSH.W  #`?<Constant "S Brigman">`
   \   000042   2312         PUSH.W  #0x2
   \   000044   3012....     PUSH.W  #`?<Constant "ECE306">`
   \   000048   1F43         MOV.W   #0x1, R15
   \   00004A   3E40....     MOV.W   #`?<Constant "WOLFPACK">`, R14
   \   00004E   3D400300     MOV.W   #0x3, R13
   \   000052   3C40....     MOV.W   #`?<Constant "NCSU">`, R12
   \   000056   ........     CALLA   #setLCD
     96            big = ZERO;
   \   00005A   C243....     MOV.B   #0x0, &big
     97            ADC_Channel = Thumbwheel;
   \   00005E   A243....     MOV.W   #0x2, &ADC_Channel
   \   000062   3152         ADD.W   #0x8, SP
     98            
     99            while (ALWAYS) {
    100              if (!(P4IN & SW1)) {
   \                     ??main_0:
   \   000064   D2B32102     BIT.B   #0x1, &0x221
   \   000068   052C         JC      ??main_6
    101                Five_msec_Delay(switch_delay);
   \   00006A   3C403200     MOV.W   #0x32, R12
   \   00006E   ........     CALLA   #Five_msec_Delay
    102                break;
   \   000072   073C         JMP     ??main_2
    103              }
    104              if (!(P4IN & SW2)) {
   \                     ??main_6:
   \   000074   E2B32102     BIT.B   #0x2, &0x221
   \   000078   F52F         JC      ??main_0
    105                Five_msec_Delay(switch_delay);
   \   00007A   3C403200     MOV.W   #0x32, R12
   \   00007E   ........     CALLA   #Five_msec_Delay
    106                break;
    107              }
    108            }
    109            
    110          //------------------------------------------------------------------------------
    111          // Begining of the "While" Operating System
    112          //------------------------------------------------------------------------------
    113           while(ALWAYS) {  
    114             ADC_Process();
   \                     ??main_2:
   \   000082   ........     CALLA   #ADC_Process
    115             // Can the Operating system run
    116            switch(Time_Sequence){
   \   000086   1F42....     MOV.W   &Time_Sequence, R15
   \   00008A   3F803200     SUB.W   #0x32, R15
   \   00008E   2224         JEQ     ??main_7
   \   000090   3F803200     SUB.W   #0x32, R15
   \   000094   1A24         JEQ     ??main_8
   \   000096   3F803200     SUB.W   #0x32, R15
   \   00009A   1224         JEQ     ??main_9
   \   00009C   3F803200     SUB.W   #0x32, R15
   \   0000A0   0A24         JEQ     ??main_10
   \   0000A2   3F803200     SUB.W   #0x32, R15
   \   0000A6   1D20         JNE     ??main_3
    117              case FULL_SECOND:                               // 1000 msec  
    118                if(one_time){
   \   0000A8   C293....     CMP.B   #0x0, &one_time
   \   0000AC   0224         JEQ     ??main_11
    119                  //Init_LEDs();                        // Initialize LEDs
    120                  one_time = ZERO;
   \   0000AE   C243....     MOV.B   #0x0, &one_time
    121                }
    122                Time_Sequence = ZERO;                    // 
   \                     ??main_11:
   \   0000B2   8243....     MOV.W   #0x0, &Time_Sequence
    123              case THOU_MS:                               // 1000 msec  
    124                if(one_time){
   \                     ??main_10:
   \   0000B6   C293....     CMP.B   #0x0, &one_time
   \   0000BA   0224         JEQ     ??main_9
    125                  //P3OUT |= LED5;                      // Change State of LED 5
    126                  one_time = ZERO;
   \   0000BC   C243....     MOV.B   #0x0, &one_time
    127                }
    128              case THIRD_SECOND:                               // 750 msec  
    129                if(one_time){
   \                     ??main_9:
   \   0000C0   C293....     CMP.B   #0x0, &one_time
   \   0000C4   0224         JEQ     ??main_8
    130                  //PJOUT |= LED3;                      // Change State of LED 3
    131                  //P3OUT |= LED6;                      // Change State of LED 6
    132                  one_time = ZERO;
   \   0000C6   C243....     MOV.B   #0x0, &one_time
    133                }
    134              case HALF_SECOND:                               // 500 msec  
    135                if(one_time){
   \                     ??main_8:
   \   0000CA   C293....     CMP.B   #0x0, &one_time
   \   0000CE   0224         JEQ     ??main_7
    136                  //PJOUT |= LED2;                      // Change State of LED 2
    137                  //P3OUT |= LED7;                      // Change State of LED 7
    138                  one_time = ZERO;
   \   0000D0   C243....     MOV.B   #0x0, &one_time
    139                }
    140              case  QUARTER_SECOND:                               // 250 msec  
    141                if(one_time){
   \                     ??main_7:
   \   0000D4   C293....     CMP.B   #0x0, &one_time
   \   0000D8   0224         JEQ     ??main_12
    142                  //PJOUT |= LED1;                      // Change State of LED 1
    143                  //P3OUT |= LED8;                      // Change State of LED 8
    144                  one_time = ZERO;
   \   0000DA   C243....     MOV.B   #0x0, &one_time
    145                }
    146                Display_Process();
   \                     ??main_12:
   \   0000DE   ........     CALLA   #Display_Process
    147                break;                                // 
    148              default: break; 
    149            }
    150            
    151            // Update all ADC channels
    152            for(i = LINE_POS_L5; i > ZERO; i--) {
   \                     ??main_3:
   \   0000E2   3A400500     MOV.W   #0x5, R10
   \                     ??main_1:
   \   0000E6   1A93         CMP.W   #0x1, R10
   \   0000E8   0438         JL      ??main_13
    153            ADC_Process();
   \   0000EA   ........     CALLA   #ADC_Process
    154            }
   \   0000EE   3A53         ADD.W   #0xffff, R10
   \   0000F0   FA3F         JMP     ??main_1
    155            
    156            // START MAIN MENU//
    157            
    158            // ITEM ONE
    159            if ((ADC_Thumb > ZERO) && (ADC_Thumb <= MENU1)) {
   \                     ??main_13:
   \   0000F2   8293....     CMP.W   #0x0, &ADC_Thumb
   \   0000F6   0724         JEQ     ??main_14
   \   0000F8   B2906700.... CMP.W   #0x67, &ADC_Thumb
   \   0000FE   032C         JC      ??main_14
    160              Configuration();
   \   000100   ........     CALLA   #Configuration
   \   000104   4E3C         JMP     ??main_4
    161            }
    162            // ITEM TWO
    163            else if ((ADC_Thumb > MENU1) && (ADC_Thumb <= MENU2)) {
   \                     ??main_14:
   \   000106   B2906700.... CMP.W   #0x67, &ADC_Thumb
   \   00010C   0728         JNC     ??main_15
   \   00010E   B290CE00.... CMP.W   #0xce, &ADC_Thumb
   \   000114   032C         JC      ??main_15
    164              IOT_Commands();
   \   000116   ........     CALLA   #IOT_Commands
   \   00011A   433C         JMP     ??main_4
    165            }
    166            // ITEM THREE
    167            else if ((ADC_Thumb > MENU2) && (ADC_Thumb <= MENU3)) {
   \                     ??main_15:
   \   00011C   B290CE00.... CMP.W   #0xce, &ADC_Thumb
   \   000122   0728         JNC     ??main_16
   \   000124   B2903401.... CMP.W   #0x134, &ADC_Thumb
   \   00012A   032C         JC      ??main_16
    168              backdoorDisplay();
   \   00012C   ........     CALLA   #backdoorDisplay
   \   000130   383C         JMP     ??main_4
    169            }
    170            // ITEM FOUR
    171            else if ((ADC_Thumb > MENU3) && (ADC_Thumb <= MENU4)) {
   \                     ??main_16:
   \   000132   B2903401.... CMP.W   #0x134, &ADC_Thumb
   \   000138   0728         JNC     ??main_17
   \   00013A   B2909A01.... CMP.W   #0x19a, &ADC_Thumb
   \   000140   032C         JC      ??main_17
    172              IOTDetect();
   \   000142   ........     CALLA   #IOTDetect
   \   000146   2D3C         JMP     ??main_4
    173            }
    174            // ITEM FIVE
    175            else if ((ADC_Thumb > MENU4) && (ADC_Thumb <= MENU5)) {
   \                     ??main_17:
   \   000148   B2909A01.... CMP.W   #0x19a, &ADC_Thumb
   \   00014E   0728         JNC     ??main_18
   \   000150   B2900102.... CMP.W   #0x201, &ADC_Thumb
   \   000156   032C         JC      ??main_18
    176              calibrationDisplay();
   \   000158   ........     CALLA   #calibrationDisplay
   \   00015C   223C         JMP     ??main_4
    177            }
    178            // ITEM SIX
    179            else if ((ADC_Thumb > MENU5) && (ADC_Thumb <= MENU6)) {
   \                     ??main_18:
   \   00015E   B2900102.... CMP.W   #0x201, &ADC_Thumb
   \   000164   0728         JNC     ??main_19
   \   000166   B2906702.... CMP.W   #0x267, &ADC_Thumb
   \   00016C   032C         JC      ??main_19
    180              formatDisplay();
   \   00016E   ........     CALLA   #formatDisplay
   \   000172   173C         JMP     ??main_4
    181            }
    182            // ITEM SEVEN
    183            else if ((ADC_Thumb > MENU6) && (ADC_Thumb <= MENU7)) {
   \                     ??main_19:
   \   000174   B2906702.... CMP.W   #0x267, &ADC_Thumb
   \   00017A   0428         JNC     ??main_20
   \   00017C   B290CD02.... CMP.W   #0x2cd, &ADC_Thumb
   \   000182   0F28         JNC     ??main_4
    184            }
    185            // ITEM EIGHT
    186            else if ((ADC_Thumb > MENU7) && (ADC_Thumb <= MENU8)) {
   \                     ??main_20:
   \   000184   B290CD02.... CMP.W   #0x2cd, &ADC_Thumb
   \   00018A   0428         JNC     ??main_21
   \   00018C   B2903303.... CMP.W   #0x333, &ADC_Thumb
   \   000192   0728         JNC     ??main_4
    187            }
    188            // ITEM NINE
    189            else if ((ADC_Thumb > MENU8) && (ADC_Thumb <= MENU9)) {
   \                     ??main_21:
   \   000194   B2903303.... CMP.W   #0x333, &ADC_Thumb
   \   00019A   0328         JNC     ??main_4
   \   00019C   B2909A03.... CMP.W   #0x39a, &ADC_Thumb
    190            }
    191            // ITEM TEN
    192            else if ((ADC_Thumb > MENU9) && (ADC_Thumb <= MENU10)) {
    193            }
    194            else {
    195          
    196            }
    197            
    198            Display_Process();
   \                     ??main_4:
   \   0001A2   ........     CALLA   #Display_Process
    199            Five_msec_Delay(small_delay);
   \   0001A6   3C401900     MOV.W   #0x19, R12
   \   0001AA   ........     CALLA   #Five_msec_Delay
    200            
    201            Switches_Process();
   \   0001AE   ........     CALLA   #Switches_Process
    202            if(Time_Sequence > FULL_SECOND){ // 1000 msec
   \   0001B2   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   0001B8   642B         JNC     ??main_2
    203              Time_Sequence = ZERO;
   \   0001BA   8243....     MOV.W   #0x0, &Time_Sequence
   \   0001BE   613F         JMP     ??main_2
   \   0001C0   0343         NOP
   \   0001C2                REQUIRE _A_PBIN_L
    204            }
    205           }
    206          //------------------------------------------------------------------------------
    207          }

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for color>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     14   main
        6   -> ADC_Process
        6   -> Configuration
        6   -> Display_Process
        6   -> Five_msec_Delay
        6   -> IOTDetect
        6   -> IOT_Commands
        6   -> Init_ADC
        6   -> Init_Clocks
        6   -> Init_Conditions
        6   -> Init_LCD
        6   -> Init_LEDs
        6   -> Init_Motors
        6   -> Init_Ports
        6   -> Init_Serial_UCA0
        6   -> Init_Serial_UCA1
        6   -> Init_Timers
        6   -> Switches_Process
        6   -> backdoorDisplay
        6   -> calibrationDisplay
        6   -> clearLCD
        6   -> formatDisplay
       14   -> setLCD


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "ECE306">
       5  ?<Constant "NCSU">
      10  ?<Constant "S Brigman">
       9  ?<Constant "WOLFPACK">
       2  ?<Initializer for color>
       2  ADC_Bat
       2  ADC_Channel
       2  ADC_Left_Detector
       2  ADC_Right_Detector
       2  ADC_Temp
       2  ADC_Thumb
      40  CPU_Char_Rx
      40  CPU_Char_Tx
       2  IOTRead
      16  IOT_RX
       1  IOT_Received
       2  ISR_COUNT
      16  RX_Char
       2  Time_Sequence
       2  UPDATE_LCD
      40  USB_Char_Rx
      40  USB_Char_Tx
       1  USB_Received
       2  _A_PBIN_L
       2  ambience
       1  big
       2  color
       3  control_state
       2  cpu_rx_ring_rd
       2  cpu_rx_ring_wr
       2  cpu_tx_ring_rd
       2  cpu_tx_ring_wr
       2  inc
       1  led_smclk
     450  main
       1  one_time
       1  posL1
       1  posL2
       1  posL3
       1  posL4
       1  receiveEnable
       2  rxRead
       1  size_count
       1  sw_select
       1  test
       2  tracking_value
       2  tracking_value_high
       2  tracking_value_low
       2  usb_rx_ring_rd
       2  usb_rx_ring_wr
       2  usb_tx_ring_rd
       2  usb_tx_ring_wr

 
 450 bytes in segment CODE
   2 bytes in segment DATA16_AN
  31 bytes in segment DATA16_C
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
 256 bytes in segment DATA16_Z
 
 450 bytes of CODE  memory
  33 bytes of CONST memory
 258 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
