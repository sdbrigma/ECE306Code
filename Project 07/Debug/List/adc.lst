###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           16/Nov/2015  17:14:06
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\adc.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\adc.c" -lC
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 07\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\adc.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\adc.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\adc.c
      1          /*******************************************************************************
      2          *        Author: Steffon Brigman
      3          *        Date:   October 2015
      4          *        Description: This files contains code to setup the ADC.
      5          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
      6          *
      7          *        File name: adc.c
      8          *        Passed : No variables passed 
      9          *        Locals: No locals variables
     10          *        Returned: no values returned 
     11          *        Globlas: No variables used
     12          *******************************************************************************/
     13          
     14          // Includes
     15          #include  "macros.h"
     16          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADC10CTL0_L
   \                     _A_ADC10CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADC10CTL1_L
   \                     _A_ADC10CTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x704
   \   union <unnamed> _A_ADC10CTL2_L
   \                     _A_ADC10CTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADC10MCTL0_L
   \                     _A_ADC10MCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71a
   \   union <unnamed> _A_ADC10IE_L
   \                     _A_ADC10IE_L:
   \   000000                DS8 2
     17          #include  "functions.h"
     18          
     19          //------------------------------------------------------------------------------
     20          // Configure ADC10_B

   \                                 In  segment CODE, align 2
     21          void Init_ADC(void){
   \                     Init_ADC:
     22          /*******************************************************************************
     23          *        Author: Steffon Brigman
     24          *        Date:   October 2015
     25          *        Description: This function initializes the ADC
     26          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     27          *
     28          *        Function name: Init_ADC
     29          *        Passed : None passed
     30          *        Locals: None declared
     31          *        Returned: no values returned 
     32          *        Globlas: None used
     33          *******************************************************************************/
     34           ADC10CTL0 = CLEAR_REGISTER; // Clear ADC10CTL0
   \   000000   82430007     MOV.W   #0x0, &0x700
     35           ADC10CTL0 |= ADC10SHT_2; // 16 ADC clocks
   \   000004   B2D000020007 BIS.W   #0x200, &0x700
     36           ADC10CTL0 &= ~ADC10MSC; // Single Sequence
   \   00000A   B2C080000007 BIC.W   #0x80, &0x700
     37           ADC10CTL0 |= ADC10ON; // ADC ON - Core Enabled
   \   000010   B2D010000007 BIS.W   #0x10, &0x700
     38           ADC10CTL1 = CLEAR_REGISTER; // Clear ADC10CTL1
   \   000016   82430207     MOV.W   #0x0, &0x702
     39           ADC10CTL1 |= ADC10SHS_0; // ADC10SC bit
   \   00001A   924202070207 MOV.W   &0x702, &0x702
     40           ADC10CTL1 |= ADC10SHP; // SAMPCON signal sourced from sampling timer
   \   000020   B2D000020207 BIS.W   #0x200, &0x702
     41           ADC10CTL1 &= ~ADC10ISSH; // The sample-input signal is not inverted.
   \   000026   B2C000010207 BIC.W   #0x100, &0x702
     42           ADC10CTL1 |= ADC10DIV_0; // ADC10_B clock divider – Divide by 1.
   \   00002C   924202070207 MOV.W   &0x702, &0x702
     43           ADC10CTL1 |= ADC10SSEL_0; // MODCLK
   \   000032   924202070207 MOV.W   &0x702, &0x702
     44           ADC10CTL1 |= ADC10CONSEQ_0; // Single-channel, single-conversion
   \   000038   924202070207 MOV.W   &0x702, &0x702
     45           ADC10CTL2 = CLEAR_REGISTER; // Clear ADC10CTL2
   \   00003E   82430407     MOV.W   #0x0, &0x704
     46           ADC10CTL2 |= ADC10DIV_0; // Pre-divide by 1
   \   000042   924204070407 MOV.W   &0x704, &0x704
     47           ADC10CTL2 |= ADC10RES; // 10-bit resolution
   \   000048   B2D010000407 BIS.W   #0x10, &0x704
     48           ADC10CTL2 &= ~ADC10DF; // Binary unsigned
   \   00004E   B2C20407     BIC.W   #0x8, &0x704
     49           ADC10CTL2 &= ~ADC10SR; // supports up to approximately 200 ksps
   \   000052   A2C20407     BIC.W   #0x4, &0x704
     50           ADC10MCTL0 = CLEAR_REGISTER; // Clear ADC10MCTL0
   \   000056   82430A07     MOV.W   #0x0, &0x70a
     51           ADC10MCTL0 |= ADC10SREF_0; // V(R+) = AVCC and V(R-) = AVSS
   \   00005A   92420A070A07 MOV.W   &0x70a, &0x70a
     52           ADC10MCTL0 |= ADC10INCH_3; // Channel A3 Thumb Wheel
   \   000060   B2D003000A07 BIS.W   #0x3, &0x70a
     53           ADC10IE |= ADC10IE0; // Enable ADC conversion complete interrupt
   \   000066   92D31A07     BIS.W   #0x1, &0x71a
     54          }
   \   00006A   1001         RETA
   \   00006C                REQUIRE _A_ADC10CTL0_L
   \   00006C                REQUIRE _A_ADC10CTL1_L
   \   00006C                REQUIRE _A_ADC10CTL2_L
   \   00006C                REQUIRE _A_ADC10MCTL0_L
   \   00006C                REQUIRE _A_ADC10IE_L
     55          //---------------------------------------------------------------------
     56          
     57          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     58          void ADC_Process(void){
   \                     ADC_Process:
   \                     ??ADC_Process_0:
     59          /*******************************************************************************
     60          *        Author: Steffon Brigman
     61          *        Date:   October 2015
     62          *        Description: This function prepars the ADC to take sampes
     63          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     64          *
     65          *        Function name: ADC_Process
     66          *        Passed : None passed
     67          *        Locals: None declared
     68          *        Returned: no values returned 
     69          *        Globlas: None used
     70          *******************************************************************************/
     71           while (ADC10CTL1 & BUSY); // Wait if ADC10 core is active
   \   000000   92B30207     BIT.W   #0x1, &0x702
   \   000004   FD2F         JC      ??ADC_Process_0
     72           ADC10CTL0 |= ADC10ENC + ADC10SC; // Sampling and conversion start
   \   000006   B2D003000007 BIS.W   #0x3, &0x700
     73          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_ADC10CTL1_L
   \   00000E                REQUIRE _A_ADC10CTL0_L
     74          //------------------------------------------------------------------------------

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ADC_Process
      4   Init_ADC


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ADC_Process
     108  Init_ADC
       2  _A_ADC10CTL0_L
       2  _A_ADC10CTL1_L
       2  _A_ADC10CTL2_L
       2  _A_ADC10IE_L
       2  _A_ADC10MCTL0_L

 
 122 bytes in segment CODE
  10 bytes in segment DATA16_AN
 
 122 bytes of CODE memory
   0 bytes of DATA memory (+ 10 bytes shared)

Errors: none
Warnings: none
