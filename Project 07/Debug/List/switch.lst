###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           18/Nov/2015  13:46:39
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\switch.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 07\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"

   \                                 In  segment CODE, align 2
     16          void Switches_Process(void){
   \                     Switches_Process:
     17          //******************************************************************************
     18          //
     19          //  Description: This functions sets code for switch 1 and 2 upon being pressed
     20          //
     21          //  Steffon Brigman
     22          //  Sept 2015
     23          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
     24          //******************************************************************************
     25           if (!(P4IN & SW1)){
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   262C         JC      ??Switches_Process_0
     26             Five_msec_Delay(small_delay);                   
   \   000006   3C401900     MOV.W   #0x19, R12
   \   00000A   ........     CALLA   #Five_msec_Delay
     27             
     28             if (sw_select == LINE_POS_L1) {
   \   00000E   D293....     CMP.B   #0x1, &sw_select
   \   000012   0320         JNE     ??Switches_Process_1
     29              Init_IOT();
   \   000014   ........     CALLA   #Init_IOT
   \   000018   1C3C         JMP     ??Switches_Process_0
     30             }
     31             else if (sw_select == LINE_POS_L2) {
   \                     ??Switches_Process_1:
   \   00001A   E293....     CMP.B   #0x2, &sw_select
   \   00001E   0320         JNE     ??Switches_Process_2
     32              IOT_Commands();
   \   000020   ........     CALLA   #IOT_Commands
   \   000024   163C         JMP     ??Switches_Process_0
     33             }
     34             else if (sw_select == LINE_POS_L3) {
   \                     ??Switches_Process_2:
   \   000026   F2900300.... CMP.B   #0x3, &sw_select
   \   00002C   0320         JNE     ??Switches_Process_3
     35              bufferDisplay();
   \   00002E   ........     CALLA   #bufferDisplay
   \   000032   0F3C         JMP     ??Switches_Process_0
     36             }
     37             else if (sw_select == LINE_POS_L4) {
   \                     ??Switches_Process_3:
   \   000034   E292....     CMP.B   #0x4, &sw_select
   \   000038   0320         JNE     ??Switches_Process_4
     38              IOTDetect();
   \   00003A   ........     CALLA   #IOTDetect
   \   00003E   093C         JMP     ??Switches_Process_0
     39             }
     40             else if (sw_select == LINE_POS_L5) {
   \                     ??Switches_Process_4:
   \   000040   F2900500.... CMP.B   #0x5, &sw_select
   \   000046   0320         JNE     ??Switches_Process_5
     41              calibrationDisplay();
   \   000048   ........     CALLA   #calibrationDisplay
   \   00004C   023C         JMP     ??Switches_Process_0
     42             }
     43             else {
     44               sw_select = LINE_POS_L1;
   \                     ??Switches_Process_5:
   \   00004E   D243....     MOV.B   #0x1, &sw_select
     45             }
     46          }
     47            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_0:
   \   000052   E2B32102     BIT.B   #0x2, &0x221
   \   000056   042C         JC      ??Switches_Process_6
     48              Five_msec_Delay(small_delay);               
   \   000058   3C401900     MOV.W   #0x19, R12
   \   00005C   ........     CALLA   #Five_msec_Delay
     49          
     50            }
     51          //------------------------------------------------------------------------------
     52          }
   \                     ??Switches_Process_6:
   \   000060   1001         RETA
   \   000062                REQUIRE _A_PBIN_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Switches_Process
        4   -> Five_msec_Delay
        4   -> IOTDetect
        4   -> IOT_Commands
        4   -> Init_IOT
        4   -> bufferDisplay
        4   -> calibrationDisplay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      98  Switches_Process
       2  _A_PBIN_L

 
 98 bytes in segment CODE
  2 bytes in segment DATA16_AN
 
 98 bytes of CODE memory
  0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
