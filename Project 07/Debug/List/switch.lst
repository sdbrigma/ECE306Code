###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           16/Nov/2015  03:34:33
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\switch.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 07\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"

   \                                 In  segment CODE, align 2
     16          void Switches_Process(void){
   \                     Switches_Process:
     17          //******************************************************************************
     18          //
     19          //  Description: This functions sets code for switch 1 and 2 upon being pressed
     20          //
     21          //  Steffon Brigman
     22          //  Sept 2015
     23          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
     24          //******************************************************************************
     25            if (!(P4IN & SW1)){
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   442C         JC      ??Switches_Process_2
     26              Five_msec_Delay(15);
   \   000006   3C400F00     MOV.W   #0xf, R12
   \   00000A   ........     CALLA   #Five_msec_Delay
     27              while(ALWAYS){
     28                if (!(P4IN & SW2)){break;}
   \                     ??Switches_Process_0:
   \   00000E   E2B32102     BIT.B   #0x2, &0x221
   \   000012   3D28         JNC     ??Switches_Process_2
     29                ADC_Process(); // read ADC value for thumbwheel
   \   000014   ........     CALLA   #ADC_Process
     30                if(ADC_Thumb <= 340){// Divides range of ADC values into three for main menu
   \   000018   B2905501.... CMP.W   #0x155, &ADC_Thumb
   \   00001E   102C         JC      ??Switches_Process_3
     31                  setLCD("Resistor",LINE_POS_L0,"",LINE_POS_L0,"",LINE_POS_L0,"",LINE_POS_L0);
   \   000020   0312         PUSH.W  #0x0
   \   000022   3012....     PUSH.W  #`?<Constant "">`
   \   000026   0312         PUSH.W  #0x0
   \   000028   3012....     PUSH.W  #`?<Constant "">`
   \   00002C   0F43         MOV.W   #0x0, R15
   \   00002E   3E40....     MOV.W   #`?<Constant "">`, R14
   \   000032   0D43         MOV.W   #0x0, R13
   \   000034   3C40....     MOV.W   #`?<Constant "Resistor">`, R12
   \   000038   ........     CALLA   #setLCD
   \   00003C   3152         ADD.W   #0x8, SP
   \   00003E   E73F         JMP     ??Switches_Process_0
     32                }      
     33                else if(ADC_Thumb >= 681){ // this range the last third of the full range of values for the ADC
   \                     ??Switches_Process_3:
   \   000040   B290A902.... CMP.W   #0x2a9, &ADC_Thumb
   \   000046   1328         JNC     ??Switches_Process_4
     34                  setLCD("Song",LINE_POS_L3,"",LINE_POS_L0,"",LINE_POS_L0,"",LINE_POS_L0);
   \   000048   0312         PUSH.W  #0x0
   \   00004A   3012....     PUSH.W  #`?<Constant "">`
   \   00004E   0312         PUSH.W  #0x0
   \   000050   3012....     PUSH.W  #`?<Constant "">`
   \   000054   0F43         MOV.W   #0x0, R15
   \   000056   3E40....     MOV.W   #`?<Constant "">`, R14
   \   00005A   3D400300     MOV.W   #0x3, R13
   \   00005E   3C40....     MOV.W   #`?<Constant "Song">`, R12
   \   000062   ........     CALLA   #setLCD
     35                  lcd_BIG_mid();
   \   000066   ........     CALLA   #lcd_BIG_mid
   \   00006A   3152         ADD.W   #0x8, SP
   \   00006C   D03F         JMP     ??Switches_Process_0
     36                }     
     37                else{ // If it's not in the lower or upper third it's in the middle
     38                  setLCD("Shapes",LINE_POS_L2,"",LINE_POS_L0,"",LINE_POS_L0,"",LINE_POS_L0);
   \                     ??Switches_Process_4:
   \   00006E   0312         PUSH.W  #0x0
   \   000070   3012....     PUSH.W  #`?<Constant "">`
   \   000074   0312         PUSH.W  #0x0
   \   000076   3012....     PUSH.W  #`?<Constant "">`
   \   00007A   0F43         MOV.W   #0x0, R15
   \   00007C   3E40....     MOV.W   #`?<Constant "">`, R14
   \   000080   2D43         MOV.W   #0x2, R13
   \   000082   3C40....     MOV.W   #`?<Constant "Shapes">`, R12
   \   000086   ........     CALLA   #setLCD
   \   00008A   3152         ADD.W   #0x8, SP
   \   00008C   C03F         JMP     ??Switches_Process_0
     39                }
     40              }
     41              
     42                /*while(ALWAYS){
     43                  if (!(P4IN & SW2)) { break; }
     44                  UCA1TXBUF = HW8_String[cpu_rx_ring_wr];
     45                  display_1[LINE_POS_L9] = display_1[LINE_POS_L8];
     46                  display_1[LINE_POS_L8] = display_1[LINE_POS_L7];
     47                  display_1[LINE_POS_L7] = display_1[LINE_POS_L6];
     48                  display_1[LINE_POS_L6] = display_1[LINE_POS_L5];
     49                  display_1[LINE_POS_L5] = display_1[LINE_POS_L4];
     50                  display_1[LINE_POS_L4] = display_1[LINE_POS_L3];
     51                  display_1[LINE_POS_L3] = display_1[LINE_POS_L2];
     52                  display_1[LINE_POS_L2] = display_1[LINE_POS_L1];
     53                  display_1[LINE_POS_L1] = display_1[LINE_POS_L0];
     54                  display_1[LINE_POS_L0] = UCA1RXBUF;
     55                  posL1 = ZERO;
     56                  display_2 = "          ";
     57                  posL2 = ZERO;
     58                  display_3 = " Baud Rate";
     59                  posL3 = ZERO;
     60                  display_4 = "  9600  ";
     61                  posL4 = ZERO;
     62                  Display_Process();
     63                  Five_msec_Delay(transmit_delay);
     64                }*/
     65            }
     66            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_2:
   \   00008E   E2B32102     BIT.B   #0x2, &0x221
   \   000092   0C2C         JC      ??Switches_Process_5
     67            getHostName();
   \   000094   ........     CALLA   #getHostName
     68            displayIOT();
   \   000098   ........     CALLA   #displayIOT
     69            Five_msec_Delay(10);
   \   00009C   3C400A00     MOV.W   #0xa, R12
   \   0000A0   ........     CALLA   #Five_msec_Delay
     70            getIpAddress();
   \   0000A4   ........     CALLA   #getIpAddress
     71            displayIOT();
   \   0000A8   ........     CALLA   #displayIOT
     72          }
     73          //------------------------------------------------------------------------------
     74          }
   \                     ??Switches_Process_5:
   \   0000AC   1001         RETA
   \   0000AE                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Resistor">`:
   \   000000   526573697374 DC8 "Resistor"
   \            6F7200      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Song">`:
   \   000000   536F6E6700   DC8 "Song"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Shapes">`:
   \   000000   536861706573 DC8 "Shapes"
   \            00          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Switches_Process
        4   -> ADC_Process
        4   -> Five_msec_Delay
        4   -> displayIOT
        4   -> getHostName
        4   -> getIpAddress
       12   -> lcd_BIG_mid
       12   -> setLCD


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       9  ?<Constant "Resistor">
       7  ?<Constant "Shapes">
       5  ?<Constant "Song">
     174  Switches_Process
       2  _A_PBIN_L

 
 174 bytes in segment CODE
   2 bytes in segment DATA16_AN
  22 bytes in segment DATA16_C
 
 174 bytes of CODE  memory
  22 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
