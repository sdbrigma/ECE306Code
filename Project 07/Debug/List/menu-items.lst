###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           18/Nov/2015  13:41:10
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\menu-items.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\menu-items.c" -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 07\Debug\List\" -o
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR5739__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\menu-items.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\menu-items.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\menu-items.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the functions to display repetitive
      4          //  strings to the LCD screen
      5          //
      6          //
      7          //  Steffon Brigman
      8          //  Sept 2015
      9          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     10          //******************************************************************************
     11          
     12          //------------------------------------------------------------------------------
     13          
     14          //Points to Header files for Preprocessing
     15          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
     16          #include  "functions.h"
     17          #include  "macros.h"
     18          

   \                                 In  segment CODE, align 2
     19          void Configuration(void){
   \                     Configuration:
     20          //******************************************************************************
     21          //
     22          //  Description: This file updates the menu element based on selection
     23          //
     24          //
     25          //  Steffon Brigman
     26          //  Sept 2015
     27          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     28          //
     29          // Globals:
     30          //
     31          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
     32          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
     33          //
     34          // Local:
     35          //
     36          // Return: VOID
     37          //
     38          //******************************************************************************  
     39            
     40            sw_select = LINE_POS_L1;
   \   000000   D243....     MOV.B   #0x1, &sw_select
     41            display_1 = "Calibrate ";
   \   000004   B240........ MOV.W   #`?<Constant "Calibrate ">`, &display_1
     42            posL1 = LINE_POS_L0;
   \   00000A   C243....     MOV.B   #0x0, &posL1
     43            display_2 = "IOT Config";
   \   00000E   B240........ MOV.W   #`?<Constant "IOT Config">`, &display_2
     44            posL2 = LINE_POS_L0;
   \   000014   C243....     MOV.B   #0x0, &posL2
     45            display_3 = " IOT CMD  ";
   \   000018   B240........ MOV.W   #`?<Constant " IOT CMD  ">`, &display_3
     46            posL3 = LINE_POS_L0;
   \   00001E   C243....     MOV.B   #0x0, &posL3
     47            display_4 = "          ";
   \   000022   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     48            posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
     49            big = ALWAYS;
   \   00002C   D243....     MOV.B   #0x1, &big
     50            lcd_BIG_mid();
   \   000030   ........     BRA     #lcd_BIG_mid
     51          }
     52          

   \                                 In  segment CODE, align 2
     53          void IOT_Commands(void){
   \                     IOT_Commands:
     54          //******************************************************************************
     55          //
     56          //  Description: This file updates the menu element based on selection
     57          //
     58          //
     59          //  Steffon Brigman
     60          //  Sept 2015
     61          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     62          //
     63          // Globals:
     64          //
     65          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
     66          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
     67          //
     68          // Local:
     69          //
     70          // Return: VOID
     71          //
     72          //******************************************************************************  
     73            
     74            sw_select = LINE_POS_L2;
   \   000000   E243....     MOV.B   #0x2, &sw_select
     75            display_1 = "IOT Config";
   \   000004   B240........ MOV.W   #`?<Constant "IOT Config">`, &display_1
     76            posL1 = LINE_POS_L0;
   \   00000A   C243....     MOV.B   #0x0, &posL1
     77            display_2 = " IOT CMD  ";
   \   00000E   B240........ MOV.W   #`?<Constant " IOT CMD  ">`, &display_2
     78            posL2 = LINE_POS_L0;
   \   000014   C243....     MOV.B   #0x0, &posL2
     79            display_3 = "Back Door ";
   \   000018   B240........ MOV.W   #`?<Constant "Back Door ">`, &display_3
     80            posL3 = LINE_POS_L0;
   \   00001E   C243....     MOV.B   #0x0, &posL3
     81            display_4 = "          ";
   \   000022   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     82            posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
     83            big = ALWAYS;
   \   00002C   D243....     MOV.B   #0x1, &big
     84            lcd_BIG_mid();
   \   000030   ........     BRA     #lcd_BIG_mid
     85          }
     86          

   \                                 In  segment CODE, align 2
     87          void backdoorDisplay(void){
   \                     backdoorDisplay:
     88          //******************************************************************************
     89          //
     90          //  Description: This file updates the menu element based on selection
     91          //
     92          //
     93          //  Steffon Brigman
     94          //  Sept 2015
     95          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     96          //
     97          // Globals:
     98          //
     99          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
    100          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
    101          //
    102          // Local:
    103          //
    104          // Return: VOID
    105          //
    106          //******************************************************************************  
    107            
    108            sw_select = LINE_POS_L3;
   \   000000   F2400300.... MOV.B   #0x3, &sw_select
    109            display_1 = " IOT CMD  ";
   \   000006   B240........ MOV.W   #`?<Constant " IOT CMD  ">`, &display_1
    110            posL1 = LINE_POS_L0;
   \   00000C   C243....     MOV.B   #0x0, &posL1
    111            display_2 = "Back Door ";
   \   000010   B240........ MOV.W   #`?<Constant "Back Door ">`, &display_2
    112            posL2 = LINE_POS_L0;
   \   000016   C243....     MOV.B   #0x0, &posL2
    113            display_3 = "  Detect  ";
   \   00001A   B240........ MOV.W   #`?<Constant "  Detect  ">`, &display_3
    114            posL3 = LINE_POS_L0;
   \   000020   C243....     MOV.B   #0x0, &posL3
    115            display_4 = "          ";
   \   000024   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    116            posL4 = LINE_POS_L0;
   \   00002A   C243....     MOV.B   #0x0, &posL4
    117            big = ALWAYS;
   \   00002E   D243....     MOV.B   #0x1, &big
    118            lcd_BIG_mid();
   \   000032   ........     BRA     #lcd_BIG_mid
    119          }
    120          

   \                                 In  segment CODE, align 2
    121          void IOTDetect(void){
   \                     IOTDetect:
    122          //******************************************************************************
    123          //
    124          //  Description: This file updates the menu element based on selection
    125          //
    126          //
    127          //  Steffon Brigman
    128          //  Sept 2015
    129          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    130          //
    131          // Globals:
    132          //
    133          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
    134          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
    135          //
    136          // Local:
    137          //
    138          // Return: VOID
    139          //
    140          //******************************************************************************  
    141            
    142            sw_select = LINE_POS_L4;
   \   000000   E242....     MOV.B   #0x4, &sw_select
    143            display_1 = "Back Door ";
   \   000004   B240........ MOV.W   #`?<Constant "Back Door ">`, &display_1
    144            posL1 = LINE_POS_L0;
   \   00000A   C243....     MOV.B   #0x0, &posL1
    145            display_2 = "  Detect  ";
   \   00000E   B240........ MOV.W   #`?<Constant "  Detect  ">`, &display_2
    146            posL2 = LINE_POS_L0;
   \   000014   C243....     MOV.B   #0x0, &posL2
    147            display_3 = "Calibrate ";
   \   000018   B240........ MOV.W   #`?<Constant "Calibrate ">`, &display_3
    148            posL3 = LINE_POS_L0;
   \   00001E   C243....     MOV.B   #0x0, &posL3
    149            display_4 = "          ";
   \   000022   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    150            posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
    151            big = ALWAYS;
   \   00002C   D243....     MOV.B   #0x1, &big
    152            lcd_BIG_mid();
   \   000030   ........     BRA     #lcd_BIG_mid
    153          }
    154          

   \                                 In  segment CODE, align 2
    155          void calibrationDisplay(void){
   \                     calibrationDisplay:
    156          //******************************************************************************
    157          //
    158          //  Description: This file updates the menu element based on selection
    159          //
    160          //
    161          //  Steffon Brigman
    162          //  Sept 2015
    163          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    164          //
    165          // Globals:
    166          //
    167          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
    168          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
    169          //
    170          // Local:
    171          //
    172          // Return: VOID
    173          //
    174          //******************************************************************************  
    175            
    176            sw_select = LINE_POS_L5;
   \   000000   F2400500.... MOV.B   #0x5, &sw_select
    177            display_1 = "  Detect  ";
   \   000006   B240........ MOV.W   #`?<Constant "  Detect  ">`, &display_1
    178            posL1 = LINE_POS_L0;
   \   00000C   C243....     MOV.B   #0x0, &posL1
    179            display_2 = "Calibrate ";
   \   000010   B240........ MOV.W   #`?<Constant "Calibrate ">`, &display_2
    180            posL2 = LINE_POS_L0;
   \   000016   C243....     MOV.B   #0x0, &posL2
    181            display_3 = "IOT Config";
   \   00001A   B240........ MOV.W   #`?<Constant "IOT Config">`, &display_3
    182            posL3 = LINE_POS_L0;
   \   000020   C243....     MOV.B   #0x0, &posL3
    183            display_4 = "          ";
   \   000024   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    184            posL4 = LINE_POS_L0;
   \   00002A   C243....     MOV.B   #0x0, &posL4
    185            big = ALWAYS;
   \   00002E   D243....     MOV.B   #0x1, &big
    186            lcd_BIG_mid();
   \   000032   ........     BRA     #lcd_BIG_mid
    187          }
    188          

   \                                 In  segment CODE, align 2
    189          void formatDisplay(void){
   \                     formatDisplay:
    190          //******************************************************************************
    191          //
    192          //  Description: This file updates the menu element based on selection
    193          //
    194          //
    195          //  Steffon Brigman
    196          //  Sept 2015
    197          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    198          //
    199          // Globals:
    200          //
    201          // Passed: display_1, display_2, display_3, display_4, LCD_HOME_L1, LCD_HOME_L2,
    202          // LCD_HOME_L3, LCD_HOME_L4, posL1, posL2, posL3, posL4
    203          //
    204          // Local:
    205          //
    206          // Return: VOID
    207          //
    208          //******************************************************************************  
    209            
    210            sw_select = LINE_POS_L1;
   \   000000   D243....     MOV.B   #0x1, &sw_select
    211            display_1 = "----------";
   \   000004   B240........ MOV.W   #`?<Constant "----------">`, &display_1
    212            posL1 = LINE_POS_L0;
   \   00000A   C243....     MOV.B   #0x0, &posL1
    213            display_2 = "          ";
   \   00000E   B240........ MOV.W   #`?<Constant "          ">`, &display_2
    214            posL2 = LINE_POS_L0;
   \   000014   C243....     MOV.B   #0x0, &posL2
    215            display_3 = "----------";
   \   000018   B240........ MOV.W   #`?<Constant "----------">`, &display_3
    216            posL3 = LINE_POS_L0;
   \   00001E   C243....     MOV.B   #0x0, &posL3
    217            display_4 = "          ";
   \   000022   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    218            posL4 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL4
    219            big = ALWAYS;
   \   00002C   D243....     MOV.B   #0x1, &big
    220            lcd_BIG_mid();
   \   000030   ........     BRA     #lcd_BIG_mid
    221          }
    222          

   \                                 In  segment CODE, align 2
    223          void bufferDisplay(void){
   \                     bufferDisplay:
   \   000000   0A12         PUSH.W  R10
   \   000002   2182         SUB.W   #0x4, SP
    224          //******************************************************************************
    225          //
    226          //  Description: This function is used to test serial communcation lines
    227          //
    228          //
    229          //  Steffon Brigman
    230          //  Sept 2015
    231          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
    232          //
    233          // Globals: RX_Char
    234          //
    235          // Passed: 
    236          //
    237          // Local:
    238          //
    239          // Return: VOID
    240          //
    241          //****************************************************************************** 
    242            
    243            unsigned volatile int i = ZERO;
   \   000004   81430200     MOV.W   #0x0, 0x2(SP)
    244            unsigned volatile int index = ZERO;
   \   000008   81430000     MOV.W   #0x0, 0(SP)
    245            int OLD_ADC_Thumb;
    246            display_1 = "----------";
   \   00000C   B240........ MOV.W   #`?<Constant "----------">`, &display_1
    247            display_2 = "          ";
   \   000012   B240........ MOV.W   #`?<Constant "          ">`, &display_2
    248            display_3 = "----------";
   \   000018   B240........ MOV.W   #`?<Constant "----------">`, &display_3
    249            display_4 = "          ";
   \   00001E   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    250            posL1 = LINE_POS_L0;
   \   000024   C243....     MOV.B   #0x0, &posL1
    251            posL2 = LINE_POS_L0;
   \   000028   C243....     MOV.B   #0x0, &posL2
    252            posL3 = LINE_POS_L0;
   \   00002C   C243....     MOV.B   #0x0, &posL3
    253            posL4 = LINE_POS_L0;
   \   000030   C243....     MOV.B   #0x0, &posL4
    254            big = ALWAYS;
   \   000034   D243....     MOV.B   #0x1, &big
    255            lcd_BIG_mid();
   \   000038   ........     CALLA   #lcd_BIG_mid
    256            
    257            while(ALWAYS) {
    258          	// Update all ADC channels
    259          	  for(i = LINE_POS_L5; i > ZERO; i--) {
   \                     ??bufferDisplay_1:
   \   00003C   B14005000200 MOV.W   #0x5, 0x2(SP)
   \                     ??bufferDisplay_0:
   \   000042   81930200     CMP.W   #0x0, 0x2(SP)
   \   000046   0524         JEQ     ??bufferDisplay_2
    260          	  ADC_Process();
   \   000048   ........     CALLA   #ADC_Process
    261          	  }
   \   00004C   B1530200     ADD.W   #0xffff, 0x2(SP)
   \   000050   F83F         JMP     ??bufferDisplay_0
    262          	  
    263                    // Only update when moving in the positive direction
    264                    if (OLD_ADC_Thumb < ZERO) OLD_ADC_Thumb = LINE_POS_L1;
   \                     ??bufferDisplay_2:
   \   000052   0A93         CMP.W   #0x0, R10
   \   000054   0134         JGE     ??bufferDisplay_3
   \   000056   1A43         MOV.W   #0x1, R10
    265                    if ((ADC_Thumb < OLD_ADC_Thumb - LINE_POS_L1) && (ADC_Thumb > LINE_POS_L1)) {
   \                     ??bufferDisplay_3:
   \   000058   0F4A         MOV.W   R10, R15
   \   00005A   3F53         ADD.W   #0xffff, R15
   \   00005C   829F....     CMP.W   R15, &ADC_Thumb
   \   000060   052C         JC      ??bufferDisplay_4
   \   000062   A293....     CMP.W   #0x2, &ADC_Thumb
   \   000066   0228         JNC     ??bufferDisplay_4
    266                        index+=LINE_POS_L2; 
   \   000068   A1530000     ADD.W   #0x2, 0(SP)
    267                    }
    268                    
    269                    if (receiveEnable) {
   \                     ??bufferDisplay_4:
   \   00006C   C293....     CMP.B   #0x0, &receiveEnable
   \   000070   0424         JEQ     ??bufferDisplay_5
    270                      UCA1IE |= UCTXIE;                       // Enable TX interrupt
   \   000072   A2D3FA05     BIS.W   #0x2, &0x5fa
    271                      UCA1IE |= UCRXIE;	                    // Enable RX interrupt 
   \   000076   92D3FA05     BIS.W   #0x1, &0x5fa
    272                    }
    273                    
    274                    if (index > Index30) index = ZERO;
   \                     ??bufferDisplay_5:
   \   00007A   B1901F000000 CMP.W   #0x1f, 0(SP)
   \   000080   0228         JNC     ??bufferDisplay_6
   \   000082   81430000     MOV.W   #0x0, 0(SP)
    275                    
    276                    // Sets previous thumbwheel value
    277                    OLD_ADC_Thumb = ADC_Thumb - LINE_POS_L6;
   \                     ??bufferDisplay_6:
   \   000086   1F42....     MOV.W   &ADC_Thumb, R15
   \   00008A   3F50FAFF     ADD.W   #0xfffa, R15
   \   00008E   0A4F         MOV.W   R15, R10
    278                        
    279                    // Scroll Fight Song
    280                    display_2[LINE_POS_L0] = RX_Char[index];
   \   000090   2F41         MOV.W   @SP, R15
   \   000092   1E42....     MOV.W   &display_2, R14
   \   000096   DE4F....0000 MOV.B   RX_Char(R15), 0(R14)
    281                    display_2[LINE_POS_L1] = RX_Char[index + LINE_POS_L1];
   \   00009C   2F41         MOV.W   @SP, R15
   \   00009E   1E42....     MOV.W   &display_2, R14
   \   0000A2   DE4F....0100 MOV.B   RX_Char + 1(R15), 0x1(R14)
    282                    display_2[LINE_POS_L2] = RX_Char[index + LINE_POS_L2];
   \   0000A8   2F41         MOV.W   @SP, R15
   \   0000AA   1E42....     MOV.W   &display_2, R14
   \   0000AE   DE4F....0200 MOV.B   RX_Char + 2(R15), 0x2(R14)
    283                    display_2[LINE_POS_L3] = RX_Char[index + LINE_POS_L3];
   \   0000B4   2F41         MOV.W   @SP, R15
   \   0000B6   1E42....     MOV.W   &display_2, R14
   \   0000BA   DE4F....0300 MOV.B   RX_Char + 3(R15), 0x3(R14)
    284                    display_2[LINE_POS_L4] = RX_Char[index + LINE_POS_L4];
   \   0000C0   2F41         MOV.W   @SP, R15
   \   0000C2   1E42....     MOV.W   &display_2, R14
   \   0000C6   DE4F....0400 MOV.B   RX_Char + 4(R15), 0x4(R14)
    285                    display_2[LINE_POS_L5] = RX_Char[index + LINE_POS_L5];
   \   0000CC   2F41         MOV.W   @SP, R15
   \   0000CE   1E42....     MOV.W   &display_2, R14
   \   0000D2   DE4F....0500 MOV.B   RX_Char + 5(R15), 0x5(R14)
    286                    display_2[LINE_POS_L6] = RX_Char[index + LINE_POS_L6];
   \   0000D8   2F41         MOV.W   @SP, R15
   \   0000DA   1E42....     MOV.W   &display_2, R14
   \   0000DE   DE4F....0600 MOV.B   RX_Char + 6(R15), 0x6(R14)
    287                    display_2[LINE_POS_L7] = RX_Char[index + LINE_POS_L7];
   \   0000E4   2F41         MOV.W   @SP, R15
   \   0000E6   1E42....     MOV.W   &display_2, R14
   \   0000EA   DE4F....0700 MOV.B   RX_Char + 7(R15), 0x7(R14)
    288                    display_2[LINE_POS_L8] = RX_Char[index + LINE_POS_L8];
   \   0000F0   2F41         MOV.W   @SP, R15
   \   0000F2   1E42....     MOV.W   &display_2, R14
   \   0000F6   DE4F....0800 MOV.B   RX_Char + 8(R15), 0x8(R14)
    289                    display_2[LINE_POS_L9] = RX_Char[index + LINE_POS_L9];
   \   0000FC   2F41         MOV.W   @SP, R15
   \   0000FE   1E42....     MOV.W   &display_2, R14
   \   000102   DE4F....0900 MOV.B   RX_Char + 9(R15), 0x9(R14)
    290           
    291                    // Update LCD Display
    292          	  Display_Process();
   \   000108   ........     CALLA   #Display_Process
    293          	  Five_msec_Delay(small_delay);
   \   00010C   3C401900     MOV.W   #0x19, R12
   \   000110   ........     CALLA   #Five_msec_Delay
    294          		
    295                    // Clean before return
    296                    if (!(P4IN & SW2)) {
   \   000114   E2B32102     BIT.B   #0x2, &0x221
   \   000118   912F         JC      ??bufferDisplay_1
    297                      Five_msec_Delay(small_delay);
   \   00011A   3C401900     MOV.W   #0x19, R12
   \   00011E   ........     CALLA   #Five_msec_Delay
    298                      display_1 = "          ";
   \   000122   B240........ MOV.W   #`?<Constant "          ">`, &display_1
    299                      display_2 = "          ";
   \   000128   B240........ MOV.W   #`?<Constant "          ">`, &display_2
    300                      display_3 = "          ";
   \   00012E   B240........ MOV.W   #`?<Constant "          ">`, &display_3
    301                      display_4 = "          ";
   \   000134   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    302                      break;
    303                    }
    304                }  
    305          }
   \   00013A   2152         ADD.W   #0x4, SP
   \   00013C   3A41         POP.W   R10
   \   00013E   1001         RETA
   \   000140                REQUIRE _A_UCA1IE_L
   \   000140                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Calibrate ">`:
   \   000000   43616C696272 DC8 "Calibrate "
   \            6174652000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "IOT Config">`:
   \   000000   494F5420436F DC8 "IOT Config"
   \            6E66696700  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " IOT CMD  ">`:
   \   000000   20494F542043 DC8 " IOT CMD  "
   \            4D44202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Back Door ">`:
   \   000000   4261636B2044 DC8 "Back Door "
   \            6F6F722000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Detect  ">`:
   \   000000   202044657465 DC8 "  Detect  "
   \            6374202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Configuration
        0   -> lcd_BIG_mid
      4   IOTDetect
        0   -> lcd_BIG_mid
      4   IOT_Commands
        0   -> lcd_BIG_mid
      4   backdoorDisplay
        0   -> lcd_BIG_mid
     10   bufferDisplay
       10   -> ADC_Process
       10   -> Display_Process
       10   -> Five_msec_Delay
       10   -> lcd_BIG_mid
      4   calibrationDisplay
        0   -> lcd_BIG_mid
      4   formatDisplay
        0   -> lcd_BIG_mid


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "  Detect  ">
      11  ?<Constant " IOT CMD  ">
      11  ?<Constant "----------">
      11  ?<Constant "Back Door ">
      11  ?<Constant "Calibrate ">
      11  ?<Constant "IOT Config">
      52  Configuration
      52  IOTDetect
      52  IOT_Commands
       2  _A_PBIN_L
       2  _A_UCA1IE_L
      54  backdoorDisplay
     320  bufferDisplay
      54  calibrationDisplay
      52  formatDisplay

 
 636 bytes in segment CODE
   4 bytes in segment DATA16_AN
  77 bytes in segment DATA16_C
 
 636 bytes of CODE  memory
  77 bytes of CONST memory
   0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
