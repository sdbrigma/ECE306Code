###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           18/Nov/2015  13:48:05
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\iot-functions.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\iot-functions.c" -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 07\Debug\List\" -o
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR5739__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\iot-functions.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\iot-functions.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\iot-functions.c
      1          #include  "macros.h"
      2          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ce
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fa
   \   union <unnamed> _A_UCA1IE_L
   \                     _A_UCA1IE_L:
   \   000000                DS8 2
      3          #include  "functions.h"
      4          /*******************************************************************************
      5          *        Author: Steffon Brigman
      6          *        Date:   October 2015
      7          *        Description: This file contains code to initialize UART serial communication.
      8          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
      9          *
     10          *        File name: init_cereal.c
     11          *        Passed : No variables passed 
     12          *        Returned: no values returned 
     13          *        Globlas: None used
     14          *******************************************************************************/

   \                                 In  segment CODE, align 2
     15          void Init_IOT(void){
   \                     Init_IOT:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   31801E00     SUB.W   #0x1e, SP
     16            //******************************************************************************
     17          //
     18          //  Description: This function is used to configure the IOT device on NCSU
     19          //  wireless network
     20          //
     21          //
     22          //  Steffon Brigman
     23          //  Sept 2015
     24          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (6.30.3)
     25          //
     26          // Globals: IOT_RX[SMALL_RING_SIZE], display_1, display_2, display_3,
     27          // display_4
     28          //
     29          // Passed: 
     30          //
     31          // Local: i, firstDOT, secondDOT
     32          //
     33          // Return: VOID
     34          //
     35          //****************************************************************************** 
     36            
     37            int i = ALWAYS;
   \   000006   1B43         MOV.W   #0x1, R11
     38            int firstDOT = ZERO;
   \   000008   0A43         MOV.W   #0x0, R10
     39            formatDisplay();
   \   00000A   ........     CALLA   #formatDisplay
     40            
     41            UCA1IE |= UCTXIE;                       // Enable TX interrupt
   \   00000E   A2D3FA05     BIS.W   #0x2, &0x5fa
     42            UCA1IE |= UCRXIE;	                  // Enable RX interrupt 
   \   000012   92D3FA05     BIS.W   #0x1, &0x5fa
     43            
     44            // CONFIGURE SSID
     45            setSSID();
   \   000016   ........     CALLA   #setSSID
     46            // CONFIGURE HOSTNAME
     47            setHostName();
   \   00001A   ........     CALLA   #setHostName
     48            // CONFIGURE NETWORK PRIVACY MODE
     49            setPrivacyMode();
   \   00001E   ........     CALLA   #setPrivacyMode
     50            // CONFIGURE NETWORK MODE
     51            setNetworkMode();
   \   000022   ........     CALLA   #setNetworkMode
     52            // FLASH SETTING
     53            iotSave();
   \   000026   ........     CALLA   #iotSave
     54            
     55          //// RESET ////
     56            display_2 = "  RESET   ";
   \   00002A   B240........ MOV.W   #`?<Constant "  RESET   ">`, &display_2
     57            Display_Process();
   \   000030   ........     CALLA   #Display_Process
     58            Five_msec_Delay(switch_delay);
   \   000034   3C403200     MOV.W   #0x32, R12
   \   000038   ........     CALLA   #Five_msec_Delay
     59            
     60            PJOUT |= RESET;
   \   00003C   B2D22203     BIS.W   #0x8, &0x322
     61            Five_msec_Delay(ONE_SECOND);
   \   000040   3C40E803     MOV.W   #0x3e8, R12
   \   000044   ........     CALLA   #Five_msec_Delay
     62            PJOUT &= ~RESET;
   \   000048   B2C22203     BIC.W   #0x8, &0x322
     63            Init_LCD();
   \   00004C   ........     CALLA   #Init_LCD
     64            
     65            Five_msec_Delay(time_multiple);
   \   000050   3C40C800     MOV.W   #0xc8, R12
   \   000054   ........     CALLA   #Five_msec_Delay
     66            
     67            display_1 = "----------";
   \   000058   B240........ MOV.W   #`?<Constant "----------">`, &display_1
     68            display_2 = " COMPLETE ";
   \   00005E   B240........ MOV.W   #`?<Constant " COMPLETE ">`, &display_2
     69            display_3 = "----------";
   \   000064   B240........ MOV.W   #`?<Constant "----------">`, &display_3
     70            display_4 = "          ";
   \   00006A   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     71            Display_Process();
   \   000070   ........     CALLA   #Display_Process
     72            posL1 = LINE_POS_L0;
   \   000074   C243....     MOV.B   #0x0, &posL1
     73            posL2 = LINE_POS_L0;
   \   000078   C243....     MOV.B   #0x0, &posL2
     74            posL3 = LINE_POS_L0;
   \   00007C   C243....     MOV.B   #0x0, &posL3
     75            posL4 = LINE_POS_L0;
   \   000080   C243....     MOV.B   #0x0, &posL4
     76            big = ALWAYS;
   \   000084   D243....     MOV.B   #0x1, &big
     77            lcd_BIG_mid();
   \   000088   ........     CALLA   #lcd_BIG_mid
     78            
     79            Five_msec_Delay(time_multiple);
   \   00008C   3C40C800     MOV.W   #0xc8, R12
   \   000090   ........     CALLA   #Five_msec_Delay
     80            
     81            display_1 = "----------";
   \   000094   B240........ MOV.W   #`?<Constant "----------">`, &display_1
     82            display_2 = "CONNECTING";
   \   00009A   B240........ MOV.W   #`?<Constant "CONNECTING">`, &display_2
     83            display_3 = "----------";
   \   0000A0   B240........ MOV.W   #`?<Constant "----------">`, &display_3
     84            display_4 = "          ";
   \   0000A6   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     85            Display_Process();
   \   0000AC   ........     CALLA   #Display_Process
     86            posL1 = LINE_POS_L0;
   \   0000B0   C243....     MOV.B   #0x0, &posL1
     87            posL2 = LINE_POS_L0;
   \   0000B4   C243....     MOV.B   #0x0, &posL2
     88            posL3 = LINE_POS_L0;
   \   0000B8   C243....     MOV.B   #0x0, &posL3
     89            posL4 = LINE_POS_L0;
   \   0000BC   C243....     MOV.B   #0x0, &posL4
     90            big = ALWAYS;
   \   0000C0   D243....     MOV.B   #0x1, &big
     91            lcd_BIG_mid();
   \   0000C4   ........     CALLA   #lcd_BIG_mid
     92            
     93            Five_msec_Delay(ONE_SECOND);
   \   0000C8   3C40E803     MOV.W   #0x3e8, R12
   \   0000CC   ........     CALLA   #Five_msec_Delay
     94          
     95            // GET SSID to Display
     96            char SSIDcmd[LINE_POS_L12] = "AT+S.SSIDTXT";
   \   0000D0   0C41         MOV.W   SP, R12
   \   0000D2   3E40....     MOV.W   #`?<Constant "AT+S.SSIDTXT">`, R14
   \   0000D6   3D400C00     MOV.W   #0xc, R13
   \   0000DA   ........     CALLA   #?CopyMemoryBytes
     97            // Initialize IOT_RX ring
     98            for(i=ALWAYS; i < SMALL_RING_SIZE; i++) IOT_RX[i] = ZERO;
   \   0000DE   1B43         MOV.W   #0x1, R11
   \                     ??Init_IOT_0:
   \   0000E0   3B901000     CMP.W   #0x10, R11
   \   0000E4   0434         JGE     ??Init_IOT_10
   \   0000E6   CB43....     MOV.B   #0x0, IOT_RX(R11)
   \   0000EA   1B53         ADD.W   #0x1, R11
   \   0000EC   F93F         JMP     ??Init_IOT_0
     99            
    100            IOTRead = ALWAYS;
   \                     ??Init_IOT_10:
   \   0000EE   9243....     MOV.W   #0x1, &IOTRead
    101            for(i=ZERO; i < LINE_POS_L12; i++) {
   \   0000F2   0B43         MOV.W   #0x0, R11
   \                     ??Init_IOT_1:
   \   0000F4   3B900C00     CMP.W   #0xc, R11
   \   0000F8   0D34         JGE     ??Init_IOT_11
    102              UCA1TXBUF = UCA0TXBUF = SSIDcmd[i];
   \   0000FA   0F4B         MOV.W   R11, R15
   \   0000FC   0F51         ADD.W   SP, R15
   \   0000FE   6E4F         MOV.B   @R15, R14
   \   000100   4E4E         MOV.B   R14, R14
   \   000102   824ECE05     MOV.W   R14, &0x5ce
   \   000106   824EEE05     MOV.W   R14, &0x5ee
    103              Five_msec_Delay(ALWAYS);
   \   00010A   1C43         MOV.W   #0x1, R12
   \   00010C   ........     CALLA   #Five_msec_Delay
    104            }
   \   000110   1B53         ADD.W   #0x1, R11
   \   000112   F03F         JMP     ??Init_IOT_1
    105            UCA1TXBUF = UCA0TXBUF = END_COMMAND;
   \                     ??Init_IOT_11:
   \   000114   3F400D00     MOV.W   #0xd, R15
   \   000118   824FCE05     MOV.W   R15, &0x5ce
   \   00011C   824FEE05     MOV.W   R15, &0x5ee
    106            Five_msec_Delay(ALWAYS);
   \   000120   1C43         MOV.W   #0x1, R12
   \   000122   ........     CALLA   #Five_msec_Delay
    107            
    108            Five_msec_Delay(switch_delay);
   \   000126   3C403200     MOV.W   #0x32, R12
   \   00012A   ........     CALLA   #Five_msec_Delay
    109            
    110            display_1[LINE_POS_L0] = ' ';
   \   00012E   1F42....     MOV.W   &display_1, R15
   \   000132   FF4020000000 MOV.B   #0x20, 0(R15)
    111            display_1[LINE_POS_L1] = ' ';
   \   000138   1F42....     MOV.W   &display_1, R15
   \   00013C   FF4020000100 MOV.B   #0x20, 0x1(R15)
    112            display_1[LINE_POS_L2] = ' ';
   \   000142   1F42....     MOV.W   &display_1, R15
   \   000146   FF4020000200 MOV.B   #0x20, 0x2(R15)
    113            display_1[LINE_POS_L3] = IOT_RX[LINE_POS_L8];
   \   00014C   1F42....     MOV.W   &display_1, R15
   \   000150   DF42....0300 MOV.B   &IOT_RX + 8, 0x3(R15)
    114            display_1[LINE_POS_L4] = IOT_RX[LINE_POS_L9];
   \   000156   1F42....     MOV.W   &display_1, R15
   \   00015A   DF42....0400 MOV.B   &IOT_RX + 9, 0x4(R15)
    115            display_1[LINE_POS_L5] = IOT_RX[LINE_POS_L10];
   \   000160   1F42....     MOV.W   &display_1, R15
   \   000164   DF42....0500 MOV.B   &IOT_RX + 10, 0x5(R15)
    116            display_1[LINE_POS_L6] = IOT_RX[LINE_POS_L11];
   \   00016A   1F42....     MOV.W   &display_1, R15
   \   00016E   DF42....0600 MOV.B   &IOT_RX + 11, 0x6(R15)
    117            display_1[LINE_POS_L7] = ' ';
   \   000174   1F42....     MOV.W   &display_1, R15
   \   000178   FF4020000700 MOV.B   #0x20, 0x7(R15)
    118            display_1[LINE_POS_L8] = ' ';
   \   00017E   1F42....     MOV.W   &display_1, R15
   \   000182   FF4020000800 MOV.B   #0x20, 0x8(R15)
    119            display_1[LINE_POS_L9] = ' ';
   \   000188   1F42....     MOV.W   &display_1, R15
   \   00018C   FF4020000900 MOV.B   #0x20, 0x9(R15)
    120            display_2 = "  ipaddr  ";
   \   000192   B240........ MOV.W   #`?<Constant "  ipaddr  ">`, &display_2
    121            display_3 = display_4 = "          ";
   \   000198   B240........ MOV.W   #`?<Constant "          ">`, &display_4
   \   00019E   9242........ MOV.W   &display_4, &display_3
    122            big = ZERO;
   \   0001A4   C243....     MOV.B   #0x0, &big
    123            lcd_4line();
   \   0001A8   ........     CALLA   #lcd_4line
    124            Display_Process();
   \   0001AC   ........     CALLA   #Display_Process
    125            
    126            Five_msec_Delay(time_multiple);
   \   0001B0   3C40C800     MOV.W   #0xc8, R12
   \   0001B4   ........     CALLA   #Five_msec_Delay
    127            
    128            // GET IP Address to display
    129            char IPADDRcmd[LINE_POS_L18] = "AT+S.STS=ip_ipaddr";
   \   0001B8   0C41         MOV.W   SP, R12
   \   0001BA   3C500C00     ADD.W   #0xc, R12
   \   0001BE   3E40....     MOV.W   #`?<Constant "AT+S.STS=ip_ipaddr">`, R14
   \   0001C2   3D401200     MOV.W   #0x12, R13
   \   0001C6   ........     CALLA   #?CopyMemoryBytes
    130            // Initialize IOT_RX ring
    131            for(i=ALWAYS; i < SMALL_RING_SIZE; i++) IOT_RX[i] = ZERO;
   \   0001CA   1B43         MOV.W   #0x1, R11
   \                     ??Init_IOT_2:
   \   0001CC   3B901000     CMP.W   #0x10, R11
   \   0001D0   0434         JGE     ??Init_IOT_12
   \   0001D2   CB43....     MOV.B   #0x0, IOT_RX(R11)
   \   0001D6   1B53         ADD.W   #0x1, R11
   \   0001D8   F93F         JMP     ??Init_IOT_2
    132            
    133            IOTRead = ALWAYS;
   \                     ??Init_IOT_12:
   \   0001DA   9243....     MOV.W   #0x1, &IOTRead
    134            for(i=ALWAYS; i < LINE_POS_L18; i++) {
   \   0001DE   1B43         MOV.W   #0x1, R11
   \                     ??Init_IOT_3:
   \   0001E0   3B901200     CMP.W   #0x12, R11
   \   0001E4   0E34         JGE     ??Init_IOT_13
    135              UCA1TXBUF = UCA0TXBUF = IPADDRcmd[i];
   \   0001E6   0F4B         MOV.W   R11, R15
   \   0001E8   0F51         ADD.W   SP, R15
   \   0001EA   5E4F0C00     MOV.B   0xc(R15), R14
   \   0001EE   4E4E         MOV.B   R14, R14
   \   0001F0   824ECE05     MOV.W   R14, &0x5ce
   \   0001F4   824EEE05     MOV.W   R14, &0x5ee
    136              Five_msec_Delay(ALWAYS);
   \   0001F8   1C43         MOV.W   #0x1, R12
   \   0001FA   ........     CALLA   #Five_msec_Delay
    137            }
   \   0001FE   1B53         ADD.W   #0x1, R11
   \   000200   EF3F         JMP     ??Init_IOT_3
    138            UCA1TXBUF = UCA0TXBUF = END_COMMAND;
   \                     ??Init_IOT_13:
   \   000202   3F400D00     MOV.W   #0xd, R15
   \   000206   824FCE05     MOV.W   R15, &0x5ce
   \   00020A   824FEE05     MOV.W   R15, &0x5ee
    139            Five_msec_Delay(ALWAYS);;
   \   00020E   1C43         MOV.W   #0x1, R12
   \   000210   ........     CALLA   #Five_msec_Delay
    140            
    141            Five_msec_Delay(switch_delay);
   \   000214   3C403200     MOV.W   #0x32, R12
   \   000218   ........     CALLA   #Five_msec_Delay
    142            UCA1IE &= ~UCRXIE;
   \   00021C   92C3FA05     BIC.W   #0x1, &0x5fa
    143            
    144            int indexIP = ALWAYS;
   \   000220   1843         MOV.W   #0x1, R8
    145            firstDOT = ZERO;
   \   000222   0A43         MOV.W   #0x0, R10
    146            display_3[LINE_POS_L0] = ' ';
   \   000224   1F42....     MOV.W   &display_3, R15
   \   000228   FF4020000000 MOV.B   #0x20, 0(R15)
    147            for(i=LINE_POS_L1; i < LINE_POS_L9; i++) {
   \   00022E   1B43         MOV.W   #0x1, R11
   \                     ??Init_IOT_4:
   \   000230   3B900900     CMP.W   #0x9, R11
   \   000234   1834         JGE     ??Init_IOT_14
    148              display_3[i] = IOT_RX[i+LINE_POS_L14];
   \   000236   1F42....     MOV.W   &display_3, R15
   \   00023A   0F5B         ADD.W   R11, R15
   \   00023C   DF4B....0000 MOV.B   IOT_RX + 14(R11), 0(R15)
    149              if ((IOT_RX[i+LINE_POS_L14] == '.') && (firstDOT == ALWAYS)) {
   \   000242   FB902E00.... CMP.B   #0x2e, IOT_RX + 14(R11)
   \   000248   0720         JNE     ??Init_IOT_15
   \   00024A   1A93         CMP.W   #0x1, R10
   \   00024C   0520         JNE     ??Init_IOT_15
    150                indexIP = i+Index13;
   \   00024E   0F4B         MOV.W   R11, R15
   \   000250   3F500D00     ADD.W   #0xd, R15
   \   000254   084F         MOV.W   R15, R8
    151                break;
   \   000256   073C         JMP     ??Init_IOT_14
    152              }
    153              if (IOT_RX[i+LINE_POS_L14] == '.') firstDOT = ALWAYS;
   \                     ??Init_IOT_15:
   \   000258   FB902E00.... CMP.B   #0x2e, IOT_RX + 14(R11)
   \   00025E   0120         JNE     ??Init_IOT_16
   \   000260   1A43         MOV.W   #0x1, R10
    154            }
   \                     ??Init_IOT_16:
   \   000262   1B53         ADD.W   #0x1, R11
   \   000264   E53F         JMP     ??Init_IOT_4
    155            display_3[LINE_POS_L9] = ' ';
   \                     ??Init_IOT_14:
   \   000266   1F42....     MOV.W   &display_3, R15
   \   00026A   FF4020000900 MOV.B   #0x20, 0x9(R15)
    156           
    157            Display_Process();
   \   000270   ........     CALLA   #Display_Process
    158            Five_msec_Delay(switch_delay);
   \   000274   3C403200     MOV.W   #0x32, R12
   \   000278   ........     CALLA   #Five_msec_Delay
    159            
    160            display_4 = "         ";
   \   00027C   B240........ MOV.W   #`?<Constant "         ">`, &display_4
    161            for(i=LINE_POS_L2; i < LINE_POS_L9; i++) {
   \   000282   2B43         MOV.W   #0x2, R11
   \                     ??Init_IOT_5:
   \   000284   3B900900     CMP.W   #0x9, R11
   \   000288   1034         JGE     ??Init_IOT_9
    162              if (IOT_RX[i+indexIP] == '\r') break;
   \   00028A   0F4B         MOV.W   R11, R15
   \   00028C   0F58         ADD.W   R8, R15
   \   00028E   FF900D00.... CMP.B   #0xd, IOT_RX(R15)
   \   000294   0A24         JEQ     ??Init_IOT_9
    163              display_4[i] = IOT_RX[i+indexIP];
   \   000296   0F4B         MOV.W   R11, R15
   \   000298   0F58         ADD.W   R8, R15
   \   00029A   1E42....     MOV.W   &display_4, R14
   \   00029E   0E5B         ADD.W   R11, R14
   \   0002A0   DE4F....0000 MOV.B   IOT_RX(R15), 0(R14)
    164            }
   \   0002A6   1B53         ADD.W   #0x1, R11
   \   0002A8   ED3F         JMP     ??Init_IOT_5
    165            
    166            // Display IP Address
    167            Display_Process();
   \                     ??Init_IOT_9:
   \   0002AA   ........     CALLA   #Display_Process
    168            Five_msec_Delay(switch_delay);
   \   0002AE   3C403200     MOV.W   #0x32, R12
   \   0002B2   ........     CALLA   #Five_msec_Delay
    169            UCA1IE |= UCRXIE;
   \   0002B6   92D3FA05     BIS.W   #0x1, &0x5fa
    170            
    171            // PING LAB COMPUTER
    172            pingIOT();
   \   0002BA   ........     CALLA   #pingIOT
    173            
    174            // Wait for IOT confirmation
    175            while (IOT_RX[Index31] != 'O') {
                                ^
Warning[Pe175]: subscript out of range
   \                     ??Init_IOT_6:
   \   0002BE   F2904F00.... CMP.B   #0x4f, &LWRD(IOT_RX + 31)
   \   0002C4   0724         JEQ     ??Init_IOT_7
    176              if (!(P4IN & SW2)) {
   \   0002C6   E2B32102     BIT.B   #0x2, &0x221
   \   0002CA   F92F         JC      ??Init_IOT_6
    177                Five_msec_Delay(small_delay); 
   \   0002CC   3C401900     MOV.W   #0x19, R12
   \   0002D0   ........     CALLA   #Five_msec_Delay
    178                break;
    179              }
    180            }
    181            
    182            while(ALWAYS) {
    183              if (!(P4IN & SW2)) {
   \                     ??Init_IOT_7:
   \   0002D4   E2B32102     BIT.B   #0x2, &0x221
   \   0002D8   FD2F         JC      ??Init_IOT_7
    184                Five_msec_Delay(small_delay); 
   \   0002DA   3C401900     MOV.W   #0x19, R12
   \   0002DE   ........     CALLA   #Five_msec_Delay
    185                break;
    186              }
    187            }
    188          }
   \   0002E2   31501E00     ADD.W   #0x1e, SP
   \   0002E6   3817         POPM.W  #0x4, R11
   \   0002E8   1001         RETA
   \   0002EA                REQUIRE _A_UCA1IE_L
   \   0002EA                REQUIRE _A_PJOUT_L
   \   0002EA                REQUIRE _A_UCA1TXBUF_L
   \   0002EA                REQUIRE _A_UCA0TXBUF_L
   \   0002EA                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  RESET   ">`:
   \   000000   202052455345 DC8 "  RESET   "
   \            5420202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " COMPLETE ">`:
   \   000000   20434F4D504C DC8 " COMPLETE "
   \            4554452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CONNECTING">`:
   \   000000   434F4E4E4543 DC8 "CONNECTING"
   \            54494E4700  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SSIDTXT">`:
   \   000000   41542B532E53 DC8 41H, 54H, 2BH, 53H, 2EH, 53H, 53H, 49H
   \            5349        
   \   000008   44545854     DC8 44H, 54H, 58H, 54H

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ipaddr  ">`:
   \   000000   202069706164 DC8 "  ipaddr  "
   \            6472202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.STS=ip_ipaddr">`:
   \   000000   41542B532E53 DC8 41H, 54H, 2BH, 53H, 2EH, 53H, 54H, 53H
   \            5453        
   \   000008   3D69705F6970 DC8 3DH, 69H, 70H, 5FH, 69H, 70H, 61H, 64H
   \            6164        
   \   000010   6472         DC8 64H, 72H

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "         ">`:
   \   000000   202020202020 DC8 "         "
   \            20202000    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     42   Init_IOT
       42   -> Display_Process
       42   -> Five_msec_Delay
       42   -> Init_LCD
       42   -> formatDisplay
       42   -> iotSave
       42   -> lcd_4line
       42   -> lcd_BIG_mid
       42   -> pingIOT
       42   -> setHostName
       42   -> setNetworkMode
       42   -> setPrivacyMode
       42   -> setSSID
       42 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      10  ?<Constant "         ">
      11  ?<Constant "  RESET   ">
      11  ?<Constant "  ipaddr  ">
      11  ?<Constant " COMPLETE ">
      11  ?<Constant "----------">
      12  ?<Constant "AT+S.SSIDTXT">
      18  ?<Constant "AT+S.STS=ip_ipaddr">
      11  ?<Constant "CONNECTING">
     746  Init_IOT
       2  _A_PBIN_L
       2  _A_PJOUT_L
       2  _A_UCA0TXBUF_L
       2  _A_UCA1IE_L
       2  _A_UCA1TXBUF_L

 
 746 bytes in segment CODE
  10 bytes in segment DATA16_AN
 106 bytes in segment DATA16_C
 
 746 bytes of CODE  memory
 106 bytes of CONST memory
   0 bytes of DATA  memory (+ 10 bytes shared)

Errors: none
Warnings: 1
