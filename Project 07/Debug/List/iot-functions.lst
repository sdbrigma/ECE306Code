###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           16/Nov/2015  17:58:38
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\iot-functions.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\iot-functions.c" -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 07\Debug\List\" -o
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR5739__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\List\iot-functions.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        07\Debug\Obj\iot-functions.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 07\iot-functions.c
      1          #include  "macros.h"
      2          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ce
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2
      3          #include  "functions.h"
      4          /*******************************************************************************
      5          *        Author: Steffon Brigman
      6          *        Date:   October 2015
      7          *        Description: This file contains code to initialize UART serial communication.
      8          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
      9          *
     10          *        File name: init_cereal.c
     11          *        Passed : No variables passed 
     12          *        Returned: no values returned 
     13          *        Globlas: None used
     14          *******************************************************************************/
     15          /*
     16          
     17          
     18          ALL FUNCTIONS ONLY SET IOT TO OPERATE ON NCSU WIFI
     19          TO DO - MAKE FUNCTIONS CUSTOMIZABLE
     20          
     21          
     22          */

   \                                 In  segment CODE, align 2
     23          void Init_IOT(void){
   \                     Init_IOT:
     24            setSSID();
   \   000000   ........     CALLA   #setSSID
     25            setHostName();
   \   000004   ........     CALLA   #setHostName
     26            setPrivacyMode();
   \   000008   ........     CALLA   #setPrivacyMode
     27            setNetworkMode();
   \   00000C   ........     CALLA   #setNetworkMode
     28            iotSave();
   \   000010   ........     CALLA   #iotSave
     29            iotReset();
   \   000014   ........     BRA     #iotReset
     30          }
     31          // Use UCA1

   \                                 In  segment CODE, align 2
     32          void setSSID(void){
   \                     setSSID:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801400     SUB.W   #0x14, SP
     33            const char transmitA1[] = "AT+S.SSIDTXT=ncsu\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.SSIDTXT=ncsu\\r">`, R14
   \   00000C   3D401300     MOV.W   #0x13, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
     34            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
     35            while(i<IOT_RING_SIZE){
   \                     ??setSSID_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??setSSID_3
     36              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
     37              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??setSSID_0
     38            }
     39            i = ZERO;
   \                     ??setSSID_3:
   \   000024   0A43         MOV.W   #0x0, R10
     40            while(ALWAYS){
     41              UCA1TXBUF = transmitA1[i];
   \                     ??setSSID_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
     42              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
     43              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0220         JNE     ??setSSID_4
     44              Five_msec_Delay(20);
     45              i++;
     46            }  
     47            i = ZERO;
   \   00004A   0A43         MOV.W   #0x0, R10
   \   00004C   063C         JMP     ??setSSID_2
   \                     ??setSSID_4:
   \   00004E   3C401400     MOV.W   #0x14, R12
   \   000052   ........     CALLA   #Five_msec_Delay
   \   000056   1A53         ADD.W   #0x1, R10
   \   000058   E63F         JMP     ??setSSID_1
     48            while(CPU_Char_Rx[i] != 'O'){
   \                     ??setSSID_2:
   \   00005A   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000060   0B24         JEQ     ??setSSID_5
     49              UCA0TXBUF = CPU_Char_Rx[i];
   \   000062   5F4A....     MOV.B   CPU_Char_Rx(R10), R15
   \   000066   4F4F         MOV.B   R15, R15
   \   000068   824FCE05     MOV.W   R15, &0x5ce
     50              Five_msec_Delay(5);
   \   00006C   3C400500     MOV.W   #0x5, R12
   \   000070   ........     CALLA   #Five_msec_Delay
     51                i++;
   \   000074   1A53         ADD.W   #0x1, R10
   \   000076   F13F         JMP     ??setSSID_2
     52              }
     53            }
   \                     ??setSSID_5:
   \   000078   31501400     ADD.W   #0x14, SP
   \   00007C   3A41         POP.W   R10
   \   00007E   1001         RETA
   \   000080                REQUIRE _A_UCA1TXBUF_L
   \   000080                REQUIRE _A_UCA0TXBUF_L
     54          

   \                                 In  segment CODE, align 2
     55          void getSSID(void){
   \                     getSSID:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   31800E00     SUB.W   #0xe, SP
     56            const char transmitA1[] = "AT+S.SSIDTXT\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.SSIDTXT\\r">`, R14
   \   00000C   3D400E00     MOV.W   #0xe, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
     57            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
     58              while(i<IOT_RING_SIZE){
   \                     ??getSSID_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??getSSID_3
     59              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
     60              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??getSSID_0
     61            }
     62            i = ZERO;
   \                     ??getSSID_3:
   \   000024   0A43         MOV.W   #0x0, R10
     63            while(ALWAYS){
     64              UCA1TXBUF = transmitA1[i];
   \                     ??getSSID_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
     65              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
     66              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0320         JNE     ??getSSID_4
     67              Five_msec_Delay(5);
     68              i++;
     69            }
     70            i = ZERO;
   \   00004A   0A43         MOV.W   #0x0, R10
     71            int m = 0;
                       ^
Warning[Pe177]: variable "m" was declared but never referenced
   \   00004C   0B43         MOV.W   #0x0, R11
   \   00004E   063C         JMP     ??getSSID_2
   \                     ??getSSID_4:
   \   000050   3C400500     MOV.W   #0x5, R12
   \   000054   ........     CALLA   #Five_msec_Delay
   \   000058   1A53         ADD.W   #0x1, R10
   \   00005A   E53F         JMP     ??getSSID_1
     72            while(CPU_Char_Rx[i] != 'O'){
   \                     ??getSSID_2:
   \   00005C   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000062   1A24         JEQ     ??getSSID_5
     73              Five_msec_Delay(5);
   \   000064   3C400500     MOV.W   #0x5, R12
   \   000068   ........     CALLA   #Five_msec_Delay
     74              if(CPU_Char_Rx[i] == 'n'){
   \   00006C   FA906E00.... CMP.B   #0x6e, CPU_Char_Rx(R10)
   \   000072   1020         JNE     ??getSSID_6
     75                i++;
   \   000074   1A53         ADD.W   #0x1, R10
     76                if(CPU_Char_Rx[i] == 'c'){
   \   000076   FA906300.... CMP.B   #0x63, CPU_Char_Rx(R10)
   \   00007C   0B20         JNE     ??getSSID_6
     77                  i++;
   \   00007E   1A53         ADD.W   #0x1, R10
     78                   if(CPU_Char_Rx[i] == 's'){
   \   000080   FA907300.... CMP.B   #0x73, CPU_Char_Rx(R10)
   \   000086   0620         JNE     ??getSSID_6
     79                  i++;
   \   000088   1A53         ADD.W   #0x1, R10
     80                   if(CPU_Char_Rx[i] == 'u'){
   \   00008A   FA907500.... CMP.B   #0x75, CPU_Char_Rx(R10)
   \   000090   0120         JNE     ??getSSID_6
     81                  i++;
   \   000092   1A53         ADD.W   #0x1, R10
     82                }
     83                }
     84                }
     85              }
     86                i++;
   \                     ??getSSID_6:
   \   000094   1A53         ADD.W   #0x1, R10
   \   000096   E23F         JMP     ??getSSID_2
     87              }
     88          }
   \                     ??getSSID_5:
   \   000098   31500E00     ADD.W   #0xe, SP
   \   00009C   1A17         POPM.W  #0x2, R11
   \   00009E   1001         RETA
   \   0000A0                REQUIRE _A_UCA1TXBUF_L
   \   0000A0                REQUIRE _A_UCA0TXBUF_L
     89          

   \                                 In  segment CODE, align 2
     90          void setHostName(void){
   \                     setHostName:
   \   000000   0A12         PUSH.W  R10
   \   000002   31802400     SUB.W   #0x24, SP
     91            const char transmitA1[] = "AT+S.SCFG=ip_hostname,ECE-306-02-Q\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=ip_hostname...">`, R14
   \   00000C   3D402400     MOV.W   #0x24, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
     92            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
     93            while(i<IOT_RING_SIZE){
   \                     ??setHostName_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??setHostName_3
     94              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
     95              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??setHostName_0
     96            }
     97            i = ZERO;
   \                     ??setHostName_3:
   \   000024   0A43         MOV.W   #0x0, R10
     98            while(ALWAYS){
     99              UCA1TXBUF = transmitA1[i];
   \                     ??setHostName_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
    100              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
    101              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0220         JNE     ??setHostName_4
    102              Five_msec_Delay(5);
    103              i++;
    104            }
    105            i = ZERO;
   \   00004A   0A43         MOV.W   #0x0, R10
   \   00004C   063C         JMP     ??setHostName_2
   \                     ??setHostName_4:
   \   00004E   3C400500     MOV.W   #0x5, R12
   \   000052   ........     CALLA   #Five_msec_Delay
   \   000056   1A53         ADD.W   #0x1, R10
   \   000058   E63F         JMP     ??setHostName_1
    106            while(CPU_Char_Rx[i] != 'O'){
   \                     ??setHostName_2:
   \   00005A   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000060   0624         JEQ     ??setHostName_5
    107              Five_msec_Delay(5);
   \   000062   3C400500     MOV.W   #0x5, R12
   \   000066   ........     CALLA   #Five_msec_Delay
    108                i++;
   \   00006A   1A53         ADD.W   #0x1, R10
   \   00006C   F63F         JMP     ??setHostName_2
    109              }
    110          }
   \                     ??setHostName_5:
   \   00006E   31502400     ADD.W   #0x24, SP
   \   000072   3A41         POP.W   R10
   \   000074   1001         RETA
   \   000076                REQUIRE _A_UCA1TXBUF_L
   \   000076                REQUIRE _A_UCA0TXBUF_L
    111          

   \                                 In  segment CODE, align 2
    112          void getHostName(void){
   \                     getHostName:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801800     SUB.W   #0x18, SP
    113            const char transmitA1[] = "AT+S.GCFG=ip_hostname\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.GCFG=ip_hostname\\r">`, R14
   \   00000C   3D401700     MOV.W   #0x17, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
    114            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
    115            while(i<IOT_RING_SIZE){
   \                     ??getHostName_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??getHostName_3
    116              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    117              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??getHostName_0
    118            }
    119            i = ZERO;
   \                     ??getHostName_3:
   \   000024   0A43         MOV.W   #0x0, R10
    120            while(ALWAYS){
    121              UCA1TXBUF = transmitA1[i];
   \                     ??getHostName_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
    122              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
    123              if(transmitA1[i] == END_COMMAND) {
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0620         JNE     ??getHostName_4
    124                break;
    125              }
    126              Five_msec_Delay(5);
    127              i++;
    128            }
    129            Five_msec_Delay(30);
   \   00004A   3C401E00     MOV.W   #0x1e, R12
   \   00004E   ........     CALLA   #Five_msec_Delay
    130            i = ZERO;
   \   000052   0A43         MOV.W   #0x0, R10
   \   000054   063C         JMP     ??getHostName_2
   \                     ??getHostName_4:
   \   000056   3C400500     MOV.W   #0x5, R12
   \   00005A   ........     CALLA   #Five_msec_Delay
   \   00005E   1A53         ADD.W   #0x1, R10
   \   000060   E23F         JMP     ??getHostName_1
    131            while(CPU_Char_Rx[i] != 'O'){
   \                     ??getHostName_2:
   \   000062   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000068   0624         JEQ     ??getHostName_5
    132              Five_msec_Delay(5);
   \   00006A   3C400500     MOV.W   #0x5, R12
   \   00006E   ........     CALLA   #Five_msec_Delay
    133                i++;
   \   000072   1A53         ADD.W   #0x1, R10
   \   000074   F63F         JMP     ??getHostName_2
    134              }
    135          }
   \                     ??getHostName_5:
   \   000076   31501800     ADD.W   #0x18, SP
   \   00007A   3A41         POP.W   R10
   \   00007C   1001         RETA
   \   00007E                REQUIRE _A_UCA1TXBUF_L
   \   00007E                REQUIRE _A_UCA0TXBUF_L
    136          

   \                                 In  segment CODE, align 2
    137          void setPrivacyMode(void){
   \                     setPrivacyMode:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801C00     SUB.W   #0x1c, SP
    138            const char transmitA1[] = "AT+S.SCFG=wifi_priv_mode,0\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=wifi_priv_m...">`, R14
   \   00000C   3D401C00     MOV.W   #0x1c, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
    139            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
    140            while(i<IOT_RING_SIZE){
   \                     ??setPrivacyMode_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??setPrivacyMode_3
    141              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    142              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??setPrivacyMode_0
    143            }
    144            i = ZERO;
   \                     ??setPrivacyMode_3:
   \   000024   0A43         MOV.W   #0x0, R10
    145            while(ALWAYS){
    146              UCA1TXBUF = transmitA1[i];
   \                     ??setPrivacyMode_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
    147              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
    148              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0220         JNE     ??setPrivacyMode_4
    149              Five_msec_Delay(5);
    150              i++;
    151            }
    152            i = ZERO;
   \   00004A   0A43         MOV.W   #0x0, R10
   \   00004C   063C         JMP     ??setPrivacyMode_2
   \                     ??setPrivacyMode_4:
   \   00004E   3C400500     MOV.W   #0x5, R12
   \   000052   ........     CALLA   #Five_msec_Delay
   \   000056   1A53         ADD.W   #0x1, R10
   \   000058   E63F         JMP     ??setPrivacyMode_1
    153            while(CPU_Char_Rx[i] != 'O'){
   \                     ??setPrivacyMode_2:
   \   00005A   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000060   0624         JEQ     ??setPrivacyMode_5
    154              Five_msec_Delay(5);
   \   000062   3C400500     MOV.W   #0x5, R12
   \   000066   ........     CALLA   #Five_msec_Delay
    155                i++;
   \   00006A   1A53         ADD.W   #0x1, R10
   \   00006C   F63F         JMP     ??setPrivacyMode_2
    156              }
    157          }
   \                     ??setPrivacyMode_5:
   \   00006E   31501C00     ADD.W   #0x1c, SP
   \   000072   3A41         POP.W   R10
   \   000074   1001         RETA
   \   000076                REQUIRE _A_UCA1TXBUF_L
   \   000076                REQUIRE _A_UCA0TXBUF_L
    158          

   \                                 In  segment CODE, align 2
    159          void getPrivacyMode(void){
   \                     getPrivacyMode:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801A00     SUB.W   #0x1a, SP
    160            const char transmitA1[] = "AT+S.GCFG=wifi_priv_mode\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.GCFG=wifi_priv_m...">`, R14
   \   00000C   3D401A00     MOV.W   #0x1a, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
    161            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
    162            while(i<IOT_RING_SIZE){
   \                     ??getPrivacyMode_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??getPrivacyMode_3
    163              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    164              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??getPrivacyMode_0
    165            }
    166            i = ZERO;
   \                     ??getPrivacyMode_3:
   \   000024   0A43         MOV.W   #0x0, R10
    167            while(ALWAYS){
    168              UCA1TXBUF = transmitA1[i];
   \                     ??getPrivacyMode_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
    169              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
    170              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0220         JNE     ??getPrivacyMode_4
    171              Five_msec_Delay(5);
    172              i++;
    173            }
    174            i = ZERO;
   \   00004A   0A43         MOV.W   #0x0, R10
   \   00004C   063C         JMP     ??getPrivacyMode_2
   \                     ??getPrivacyMode_4:
   \   00004E   3C400500     MOV.W   #0x5, R12
   \   000052   ........     CALLA   #Five_msec_Delay
   \   000056   1A53         ADD.W   #0x1, R10
   \   000058   E63F         JMP     ??getPrivacyMode_1
    175            while(CPU_Char_Rx[i] != 'O'){
   \                     ??getPrivacyMode_2:
   \   00005A   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000060   0624         JEQ     ??getPrivacyMode_5
    176              Five_msec_Delay(5);
   \   000062   3C400500     MOV.W   #0x5, R12
   \   000066   ........     CALLA   #Five_msec_Delay
    177                i++;
   \   00006A   1A53         ADD.W   #0x1, R10
   \   00006C   F63F         JMP     ??getPrivacyMode_2
    178              }
    179          }
   \                     ??getPrivacyMode_5:
   \   00006E   31501A00     ADD.W   #0x1a, SP
   \   000072   3A41         POP.W   R10
   \   000074   1001         RETA
   \   000076                REQUIRE _A_UCA1TXBUF_L
   \   000076                REQUIRE _A_UCA0TXBUF_L
    180          

   \                                 In  segment CODE, align 2
    181          void setNetworkMode(void){
   \                     setNetworkMode:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801800     SUB.W   #0x18, SP
    182            const char transmitA1[] = "AT+S.SCFG=wifi_mode,1\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.SCFG=wifi_mode,1\\r">`, R14
   \   00000C   3D401700     MOV.W   #0x17, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
    183            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
    184            while(i<IOT_RING_SIZE){
   \                     ??setNetworkMode_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??setNetworkMode_3
    185              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    186              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??setNetworkMode_0
    187            }
    188            i = ZERO;
   \                     ??setNetworkMode_3:
   \   000024   0A43         MOV.W   #0x0, R10
    189            while(ALWAYS){
    190              UCA1TXBUF = transmitA1[i];
   \                     ??setNetworkMode_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
    191              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
    192              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0220         JNE     ??setNetworkMode_4
    193              Five_msec_Delay(5);
    194              i++;
    195            }
    196            i = ZERO;
   \   00004A   0A43         MOV.W   #0x0, R10
   \   00004C   063C         JMP     ??setNetworkMode_2
   \                     ??setNetworkMode_4:
   \   00004E   3C400500     MOV.W   #0x5, R12
   \   000052   ........     CALLA   #Five_msec_Delay
   \   000056   1A53         ADD.W   #0x1, R10
   \   000058   E63F         JMP     ??setNetworkMode_1
    197            while(CPU_Char_Rx[i] != 'O'){
   \                     ??setNetworkMode_2:
   \   00005A   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000060   0624         JEQ     ??setNetworkMode_5
    198              Five_msec_Delay(5);
   \   000062   3C400500     MOV.W   #0x5, R12
   \   000066   ........     CALLA   #Five_msec_Delay
    199                i++;
   \   00006A   1A53         ADD.W   #0x1, R10
   \   00006C   F63F         JMP     ??setNetworkMode_2
    200              }
    201          }
   \                     ??setNetworkMode_5:
   \   00006E   31501800     ADD.W   #0x18, SP
   \   000072   3A41         POP.W   R10
   \   000074   1001         RETA
   \   000076                REQUIRE _A_UCA1TXBUF_L
   \   000076                REQUIRE _A_UCA0TXBUF_L
    202          

   \                                 In  segment CODE, align 2
    203          void getNetworkMode(void){
   \                     getNetworkMode:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801600     SUB.W   #0x16, SP
    204            const char transmitA1[] = "AT+S.GCFG=wifi_mode\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.GCFG=wifi_mode\\r">`, R14
   \   00000C   3D401500     MOV.W   #0x15, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
    205            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
    206            while(i<IOT_RING_SIZE){
   \                     ??getNetworkMode_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??getNetworkMode_3
    207              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    208              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??getNetworkMode_0
    209            }
    210            i = ZERO;
   \                     ??getNetworkMode_3:
   \   000024   0A43         MOV.W   #0x0, R10
    211            while(ALWAYS){
    212              UCA1TXBUF = transmitA1[i];
   \                     ??getNetworkMode_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
    213              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
    214              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0220         JNE     ??getNetworkMode_4
    215              Five_msec_Delay(5);
    216              i++;
    217            }
    218            i = ZERO;
   \   00004A   0A43         MOV.W   #0x0, R10
   \   00004C   063C         JMP     ??getNetworkMode_2
   \                     ??getNetworkMode_4:
   \   00004E   3C400500     MOV.W   #0x5, R12
   \   000052   ........     CALLA   #Five_msec_Delay
   \   000056   1A53         ADD.W   #0x1, R10
   \   000058   E63F         JMP     ??getNetworkMode_1
    219            while(CPU_Char_Rx[i] != 'O'){
   \                     ??getNetworkMode_2:
   \   00005A   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000060   0624         JEQ     ??getNetworkMode_5
    220              Five_msec_Delay(5);
   \   000062   3C400500     MOV.W   #0x5, R12
   \   000066   ........     CALLA   #Five_msec_Delay
    221                i++;
   \   00006A   1A53         ADD.W   #0x1, R10
   \   00006C   F63F         JMP     ??getNetworkMode_2
    222              }
    223          }
   \                     ??getNetworkMode_5:
   \   00006E   31501600     ADD.W   #0x16, SP
   \   000072   3A41         POP.W   R10
   \   000074   1001         RETA
   \   000076                REQUIRE _A_UCA1TXBUF_L
   \   000076                REQUIRE _A_UCA0TXBUF_L
    224          

   \                                 In  segment CODE, align 2
    225          void iotSave(void){
   \                     iotSave:
   \   000000   0A12         PUSH.W  R10
   \   000002   31800600     SUB.W   #0x6, SP
    226            const char transmitA1[] = "AT&W\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT&W\\r">`, R14
   \   00000C   3D400600     MOV.W   #0x6, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
    227            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
    228            while(i<IOT_RING_SIZE){
   \                     ??iotSave_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??iotSave_3
    229              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    230              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??iotSave_0
    231            }
    232            i = ZERO;
   \                     ??iotSave_3:
   \   000024   0A43         MOV.W   #0x0, R10
    233            while(ALWAYS){
    234              UCA1TXBUF = transmitA1[i];
   \                     ??iotSave_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
    235              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
    236              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0220         JNE     ??iotSave_4
    237              Five_msec_Delay(5);
    238              i++;
    239            }
    240            i = ZERO;
   \   00004A   0A43         MOV.W   #0x0, R10
   \   00004C   063C         JMP     ??iotSave_2
   \                     ??iotSave_4:
   \   00004E   3C400500     MOV.W   #0x5, R12
   \   000052   ........     CALLA   #Five_msec_Delay
   \   000056   1A53         ADD.W   #0x1, R10
   \   000058   E63F         JMP     ??iotSave_1
    241            while(CPU_Char_Rx[i] != 'O'){
   \                     ??iotSave_2:
   \   00005A   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000060   0624         JEQ     ??iotSave_5
    242              Five_msec_Delay(5);
   \   000062   3C400500     MOV.W   #0x5, R12
   \   000066   ........     CALLA   #Five_msec_Delay
    243                i++;
   \   00006A   1A53         ADD.W   #0x1, R10
   \   00006C   F63F         JMP     ??iotSave_2
    244              }
    245          }
   \                     ??iotSave_5:
   \   00006E   31500600     ADD.W   #0x6, SP
   \   000072   3A41         POP.W   R10
   \   000074   1001         RETA
   \   000076                REQUIRE _A_UCA1TXBUF_L
   \   000076                REQUIRE _A_UCA0TXBUF_L
    246          

   \                                 In  segment CODE, align 2
    247          void iotReset(void){
   \                     iotReset:
   \   000000   0A12         PUSH.W  R10
   \   000002   31800C00     SUB.W   #0xc, SP
    248            short unsigned int i = ZERO;
   \   000006   0A43         MOV.W   #0x0, R10
    249            const char transmitA1[] = "AT+CFUN=1\r";
   \   000008   0C41         MOV.W   SP, R12
   \   00000A   3E40....     MOV.W   #`?<Constant "AT+CFUN=1\\r">`, R14
   \   00000E   3D400B00     MOV.W   #0xb, R13
   \   000012   ........     CALLA   #?CopyMemoryBytes
    250            while(i<IOT_RING_SIZE){
   \                     ??iotReset_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??iotReset_5
    251              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    252              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??iotReset_0
    253            }
    254            i = ZERO;
   \                     ??iotReset_5:
   \   000024   0A43         MOV.W   #0x0, R10
    255            while(ALWAYS){
    256              UCA1TXBUF = transmitA1[i];
   \                     ??iotReset_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   6F4F         MOV.B   @R15, R15
   \   00002C   4F4F         MOV.B   R15, R15
   \   00002E   824FEE05     MOV.W   R15, &0x5ee
    257              UCA0TXBUF = transmitA1[i];
   \   000032   0F4A         MOV.W   R10, R15
   \   000034   0F51         ADD.W   SP, R15
   \   000036   6F4F         MOV.B   @R15, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   824FCE05     MOV.W   R15, &0x5ce
    258              if(transmitA1[i] == END_COMMAND) {break;}
   \   00003E   0F4A         MOV.W   R10, R15
   \   000040   0F51         ADD.W   SP, R15
   \   000042   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000048   0624         JEQ     ??iotReset_2
    259              Five_msec_Delay(5);
   \   00004A   3C400500     MOV.W   #0x5, R12
   \   00004E   ........     CALLA   #Five_msec_Delay
    260              i++;
   \   000052   1A53         ADD.W   #0x1, R10
   \   000054   E83F         JMP     ??iotReset_1
    261            }
    262            while(CPU_Char_Rx[i] != 'O'){
   \                     ??iotReset_2:
   \   000056   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   00005C   0624         JEQ     ??iotReset_6
    263              Five_msec_Delay(5);
   \   00005E   3C400500     MOV.W   #0x5, R12
   \   000062   ........     CALLA   #Five_msec_Delay
    264                i++;
   \   000066   1A53         ADD.W   #0x1, R10
   \   000068   F63F         JMP     ??iotReset_2
    265              }  
    266            PJOUT |= RESET;
   \                     ??iotReset_6:
   \   00006A   B2D22203     BIS.W   #0x8, &0x322
    267            while(ISR_COUNT<Second_1){}
   \                     ??iotReset_3:
   \   00006E   B2906400.... CMP.W   #0x64, &ISR_COUNT
   \   000074   FC3B         JL      ??iotReset_3
    268            ISR_COUNT = ZERO;
   \   000076   8243....     MOV.W   #0x0, &ISR_COUNT
    269            PJOUT &= ~RESET;
   \   00007A   B2C22203     BIC.W   #0x8, &0x322
    270            Init_LCD();
   \   00007E   ........     CALLA   #Init_LCD
    271          }
   \   000082   31500C00     ADD.W   #0xc, SP
   \   000086   3A41         POP.W   R10
   \   000088   1001         RETA
   \   00008A                REQUIRE _A_UCA1TXBUF_L
   \   00008A                REQUIRE _A_UCA0TXBUF_L
   \   00008A                REQUIRE _A_PJOUT_L
    272          

   \                                 In  segment CODE, align 2
    273          void getIpAddress(void){
   \                     getIpAddress:
   \   000000   0A12         PUSH.W  R10
   \   000002   31801400     SUB.W   #0x14, SP
    274            const char transmitA1[] = "AT+S.STS=ip_ipaddr\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.STS=ip_ipaddr\\r">`, R14
   \   00000C   3D401400     MOV.W   #0x14, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
    275            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
    276            while(i<IOT_RING_SIZE){
   \                     ??getIpAddress_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??getIpAddress_3
    277              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    278              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??getIpAddress_0
    279            }
    280            i = ZERO;
   \                     ??getIpAddress_3:
   \   000024   0A43         MOV.W   #0x0, R10
    281            while(ALWAYS){
    282              if(transmitA1[i] == END_COMMAND) {break;}
   \                     ??getIpAddress_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000030   0220         JNE     ??getIpAddress_4
    283              UCA0TXBUF = transmitA1[i];
    284              UCA1TXBUF = transmitA1[i];
    285              Five_msec_Delay(5);
    286              i++;
    287            }
    288            i = ZERO;
   \   000032   0A43         MOV.W   #0x0, R10
   \   000034   123C         JMP     ??getIpAddress_2
   \                     ??getIpAddress_4:
   \   000036   0F4A         MOV.W   R10, R15
   \   000038   0F51         ADD.W   SP, R15
   \   00003A   6F4F         MOV.B   @R15, R15
   \   00003C   4F4F         MOV.B   R15, R15
   \   00003E   824FCE05     MOV.W   R15, &0x5ce
   \   000042   0F4A         MOV.W   R10, R15
   \   000044   0F51         ADD.W   SP, R15
   \   000046   6F4F         MOV.B   @R15, R15
   \   000048   4F4F         MOV.B   R15, R15
   \   00004A   824FEE05     MOV.W   R15, &0x5ee
   \   00004E   3C400500     MOV.W   #0x5, R12
   \   000052   ........     CALLA   #Five_msec_Delay
   \   000056   1A53         ADD.W   #0x1, R10
   \   000058   E63F         JMP     ??getIpAddress_1
    289            while(CPU_Char_Rx[i] != 'O'){
   \                     ??getIpAddress_2:
   \   00005A   FA904F00.... CMP.B   #0x4f, CPU_Char_Rx(R10)
   \   000060   0624         JEQ     ??getIpAddress_5
    290              Five_msec_Delay(5);
   \   000062   3C400500     MOV.W   #0x5, R12
   \   000066   ........     CALLA   #Five_msec_Delay
    291                i++;
   \   00006A   1A53         ADD.W   #0x1, R10
   \   00006C   F63F         JMP     ??getIpAddress_2
    292              }
    293          }
   \                     ??getIpAddress_5:
   \   00006E   31501400     ADD.W   #0x14, SP
   \   000072   3A41         POP.W   R10
   \   000074   1001         RETA
   \   000076                REQUIRE _A_UCA0TXBUF_L
   \   000076                REQUIRE _A_UCA1TXBUF_L
    294          

   \                                 In  segment CODE, align 2
    295          void getIotStatus(void){
   \                     getIotStatus:
   \   000000   0A12         PUSH.W  R10
   \   000002   31800A00     SUB.W   #0xa, SP
    296            const char transmitA1[] = "AT+S.STS\r";
   \   000006   0C41         MOV.W   SP, R12
   \   000008   3E40....     MOV.W   #`?<Constant "AT+S.STS\\r">`, R14
   \   00000C   3D400A00     MOV.W   #0xa, R13
   \   000010   ........     CALLA   #?CopyMemoryBytes
    297            short unsigned int i = ZERO;
   \   000014   0A43         MOV.W   #0x0, R10
    298            while(i<IOT_RING_SIZE){
   \                     ??getIotStatus_0:
   \   000016   3A902800     CMP.W   #0x28, R10
   \   00001A   042C         JC      ??getIotStatus_2
    299              CPU_Char_Rx[i] = ORIGINAL;
   \   00001C   CA43....     MOV.B   #0x0, CPU_Char_Rx(R10)
    300              i++;
   \   000020   1A53         ADD.W   #0x1, R10
   \   000022   F93F         JMP     ??getIotStatus_0
    301            }
    302            i = ZERO;
   \                     ??getIotStatus_2:
   \   000024   0A43         MOV.W   #0x0, R10
    303            while(ALWAYS){
    304              if(transmitA1[i] == END_COMMAND) {break;}
   \                     ??getIotStatus_1:
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0F51         ADD.W   SP, R15
   \   00002A   FF900D000000 CMP.B   #0xd, 0(R15)
   \   000030   0220         JNE     ??getIotStatus_3
    305              UCA1TXBUF = UCA0TXBUF = transmitA1[i];
    306              //UCA0TXBUF = UCA1RXBUF;
    307              Five_msec_Delay(10);
    308              i++;
    309            }  
    310            i = ZERO;
   \   000032   0A43         MOV.W   #0x0, R10
    311          }
   \   000034   0E3C         JMP     ??getIotStatus_4
   \                     ??getIotStatus_3:
   \   000036   0F4A         MOV.W   R10, R15
   \   000038   0F51         ADD.W   SP, R15
   \   00003A   6E4F         MOV.B   @R15, R14
   \   00003C   4E4E         MOV.B   R14, R14
   \   00003E   824ECE05     MOV.W   R14, &0x5ce
   \   000042   824EEE05     MOV.W   R14, &0x5ee
   \   000046   3C400A00     MOV.W   #0xa, R12
   \   00004A   ........     CALLA   #Five_msec_Delay
   \   00004E   1A53         ADD.W   #0x1, R10
   \   000050   EA3F         JMP     ??getIotStatus_1
   \                     ??getIotStatus_4:
   \   000052   31500A00     ADD.W   #0xa, SP
   \   000056   3A41         POP.W   R10
   \   000058   1001         RETA
   \   00005A                REQUIRE _A_UCA1TXBUF_L
   \   00005A                REQUIRE _A_UCA0TXBUF_L
    312          

   \                                 In  segment CODE, align 2
    313          void displayIOT(void){
   \                     displayIOT:
   \   000000   0A12         PUSH.W  R10
    314            int i = ZERO;
   \   000002   0A43         MOV.W   #0x0, R10
    315            while(i<10){
   \                     ??displayIOT_0:
   \   000004   3A900A00     CMP.W   #0xa, R10
   \   000008   0834         JGE     ??displayIOT_4
    316              display_1[i] = CPU_Char_Rx[i];
   \   00000A   1F42....     MOV.W   &display_1, R15
   \   00000E   0F5A         ADD.W   R10, R15
   \   000010   DF4A....0000 MOV.B   CPU_Char_Rx(R10), 0(R15)
    317              i++;
   \   000016   1A53         ADD.W   #0x1, R10
   \   000018   F53F         JMP     ??displayIOT_0
    318            }
    319            i = ZERO;
   \                     ??displayIOT_4:
   \   00001A   0A43         MOV.W   #0x0, R10
    320            
    321            while(i<10){
   \                     ??displayIOT_1:
   \   00001C   3A900A00     CMP.W   #0xa, R10
   \   000020   0834         JGE     ??displayIOT_5
    322              display_2[i] = CPU_Char_Rx[i + 10];
   \   000022   1F42....     MOV.W   &display_2, R15
   \   000026   0F5A         ADD.W   R10, R15
   \   000028   DF4A....0000 MOV.B   CPU_Char_Rx + 10(R10), 0(R15)
    323              i++;
   \   00002E   1A53         ADD.W   #0x1, R10
   \   000030   F53F         JMP     ??displayIOT_1
    324            }
    325            i = ZERO;
   \                     ??displayIOT_5:
   \   000032   0A43         MOV.W   #0x0, R10
    326            while(i<10){
   \                     ??displayIOT_2:
   \   000034   3A900A00     CMP.W   #0xa, R10
   \   000038   0834         JGE     ??displayIOT_6
    327              display_3[i] = CPU_Char_Rx[i + 20];
   \   00003A   1F42....     MOV.W   &display_3, R15
   \   00003E   0F5A         ADD.W   R10, R15
   \   000040   DF4A....0000 MOV.B   CPU_Char_Rx + 20(R10), 0(R15)
    328              i++;
   \   000046   1A53         ADD.W   #0x1, R10
   \   000048   F53F         JMP     ??displayIOT_2
    329            }
    330            i = ZERO;
   \                     ??displayIOT_6:
   \   00004A   0A43         MOV.W   #0x0, R10
    331            while(i<10){
   \                     ??displayIOT_3:
   \   00004C   3A900A00     CMP.W   #0xa, R10
   \   000050   0834         JGE     ??displayIOT_7
    332              display_4[i] = CPU_Char_Rx[i + 30];
   \   000052   1F42....     MOV.W   &display_4, R15
   \   000056   0F5A         ADD.W   R10, R15
   \   000058   DF4A....0000 MOV.B   CPU_Char_Rx + 30(R10), 0(R15)
    333              i++;
   \   00005E   1A53         ADD.W   #0x1, R10
   \   000060   F53F         JMP     ??displayIOT_3
    334            }
    335            i = ZERO;
   \                     ??displayIOT_7:
   \   000062   0A43         MOV.W   #0x0, R10
    336            posL1 = ZERO;
   \   000064   C243....     MOV.B   #0x0, &posL1
    337            posL2 = ZERO;
   \   000068   C243....     MOV.B   #0x0, &posL2
    338            posL3 = ZERO;
   \   00006C   C243....     MOV.B   #0x0, &posL3
    339            posL4 = ZERO;
   \   000070   C243....     MOV.B   #0x0, &posL4
    340            Display_Process();
   \   000074   ........     CALLA   #Display_Process
    341            Five_msec_Delay(20);
   \   000078   3C401400     MOV.W   #0x14, R12
   \   00007C   ........     CALLA   #Five_msec_Delay
    342          }
   \   000080   3A41         POP.W   R10
   \   000082   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SSIDTXT=ncsu\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SSIDTXT=ncsu\015"
   \            534944545854
   \            3D6E6373750D
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SSIDTXT\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SSIDTXT\015"
   \            534944545854
   \            0D00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=ip_hostname...">`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=ip_hostname,ECE-306-02-Q\015"
   \            4346473D6970
   \            5F686F73746E
   \            616D652C4543
   \            452D3330362D
   \            30322D510D00

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.GCFG=ip_hostname\\r">`:
   \   000000   41542B532E47 DC8 "AT+S.GCFG=ip_hostname\015"
   \            4346473D6970
   \            5F686F73746E
   \            616D650D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=wifi_priv_m...">`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=wifi_priv_mode,0\015"
   \            4346473D7769
   \            66695F707269
   \            765F6D6F6465
   \            2C300D00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.GCFG=wifi_priv_m...">`:
   \   000000   41542B532E47 DC8 "AT+S.GCFG=wifi_priv_mode\015"
   \            4346473D7769
   \            66695F707269
   \            765F6D6F6465
   \            0D00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SCFG=wifi_mode,1\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.SCFG=wifi_mode,1\015"
   \            4346473D7769
   \            66695F6D6F64
   \            652C310D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.GCFG=wifi_mode\\r">`:
   \   000000   41542B532E47 DC8 "AT+S.GCFG=wifi_mode\015"
   \            4346473D7769
   \            66695F6D6F64
   \            650D00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT&W\\r">`:
   \   000000   415426570D00 DC8 "AT&W\015"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CFUN=1\\r">`:
   \   000000   41542B434655 DC8 "AT+CFUN=1\015"
   \            4E3D310D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.STS=ip_ipaddr\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.STS=ip_ipaddr\015"
   \            54533D69705F
   \            697061646472
   \            0D00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.STS\\r">`:
   \   000000   41542B532E53 DC8 "AT+S.STS\015"
   \            54530D00    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_IOT
        0   -> iotReset
        4   -> iotSave
        4   -> setHostName
        4   -> setNetworkMode
        4   -> setPrivacyMode
        4   -> setSSID
      6   displayIOT
        6   -> Display_Process
        6   -> Five_msec_Delay
     30   getHostName
       30   -> Five_msec_Delay
       30 ?CopyMemoryBytes
     16   getIotStatus
       16   -> Five_msec_Delay
       16 ?CopyMemoryBytes
     26   getIpAddress
       26   -> Five_msec_Delay
       26 ?CopyMemoryBytes
     28   getNetworkMode
       28   -> Five_msec_Delay
       28 ?CopyMemoryBytes
     32   getPrivacyMode
       32   -> Five_msec_Delay
       32 ?CopyMemoryBytes
     22   getSSID
       22   -> Five_msec_Delay
       22 ?CopyMemoryBytes
     18   iotReset
       18   -> Five_msec_Delay
       18   -> Init_LCD
       18 ?CopyMemoryBytes
     12   iotSave
       12   -> Five_msec_Delay
       12 ?CopyMemoryBytes
     42   setHostName
       42   -> Five_msec_Delay
       42 ?CopyMemoryBytes
     30   setNetworkMode
       30   -> Five_msec_Delay
       30 ?CopyMemoryBytes
     34   setPrivacyMode
       34   -> Five_msec_Delay
       34 ?CopyMemoryBytes
     26   setSSID
       26   -> Five_msec_Delay
       26 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant "AT&W\r">
      11  ?<Constant "AT+CFUN=1\r">
      23  ?<Constant "AT+S.GCFG=ip_hostname\r">
      21  ?<Constant "AT+S.GCFG=wifi_mode\r">
      26  ?<Constant "AT+S.GCFG=wifi_priv_m...">
      36  ?<Constant "AT+S.SCFG=ip_hostname...">
      23  ?<Constant "AT+S.SCFG=wifi_mode,1\r">
      28  ?<Constant "AT+S.SCFG=wifi_priv_m...">
      19  ?<Constant "AT+S.SSIDTXT=ncsu\r">
      14  ?<Constant "AT+S.SSIDTXT\r">
      20  ?<Constant "AT+S.STS=ip_ipaddr\r">
      10  ?<Constant "AT+S.STS\r">
      24  Init_IOT
       2  _A_PJOUT_L
       2  _A_UCA0TXBUF_L
       2  _A_UCA1TXBUF_L
     132  displayIOT
     126  getHostName
      90  getIotStatus
     118  getIpAddress
     118  getNetworkMode
     118  getPrivacyMode
     160  getSSID
     138  iotReset
     118  iotSave
     118  setHostName
     118  setNetworkMode
     118  setPrivacyMode
     128  setSSID

 
 1 624 bytes in segment CODE
     6 bytes in segment DATA16_AN
   237 bytes in segment DATA16_C
 
 1 624 bytes of CODE  memory
   237 bytes of CONST memory
     0 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: 1
