###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           30/Sep/2015  12:04:23
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_05\main.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_05\main.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_05\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_05\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_05\Debug\List\main.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_05\Debug\Obj\main.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_05\main.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //  File Name: main.c
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //
     10          //      Global Variables Defined in Function: 
     11          //      control_state[CNTL_STATE_INDEX]
     12          //      Time_Sequence
     13          //      led_smclk
     14          //      one_time
     15          //      display_line_1[DISPLAY_LENGTH]
     16          //      display_line_2[DISPLAY_LENGTH]
     17          //      display_line_3[DISPLAY_LENGTH]
     18          //      display_line_4[DISPLAY_LENGTH]
     19          //      *display_1
     20          //      *display_2
     21          //      *display_3
     22          //      *display_4
     23          //      posL1
     24          //      posL2
     25          //      posL3
     26          //      posL4
     27          //      size_count
     28          //      big
     29          //------------------------------------------------------------------------------
     30          #include  "macros.h"
     31          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2
     32          #include  "functions.h"
     33          
     34          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1
     39          extern char display_line_1[DISPLAY_LENGTH];
     40          extern char display_line_2[DISPLAY_LENGTH];
     41          extern char display_line_3[DISPLAY_LENGTH];
     42          extern char display_line_4[DISPLAY_LENGTH];
     43          extern char *display_1;
     44          extern char *display_2;
     45          extern char *display_3;
     46          extern char *display_4;
     47          extern char posL1;
     48          extern char posL2;
     49          extern char posL3;
     50          extern char posL4;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          char size_count;
   \                     size_count:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     52          char big;
   \                     big:
   \   000000                DS8 1
     53          

   \                                 In  segment CODE, align 2
     54          void main(void){
   \                     main:
     55          //------------------------------------------------------------------------------
     56            //    Autor: Steffon Brigman
     57            //    Date: Sept 2015
     58            //    Compiler Version: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
     59            //    Funciton Name: main
     60            //
     61            // Description: This is the main routine for the program. Execution of code starts here.
     62            //                The operating system is Back Ground Fore Ground.
     63            // Locals: no varialbes declared
     64            // Passed: no variabled declared
     65            // Returned: no variables returned
     66            // Globals: Time_Seqeuence, posL1 through posL4, display_1 throught display_4, one_time
     67            //          big  
     68          //------------------------------------------------------------------------------
     69            Init_Clocks();                            // Initialize Clock System 
   \   000000   ........     CALLA   #Init_Clocks
     70            Init_Ports();
   \   000004   ........     CALLA   #Init_Ports
     71            Init_Conditions();
   \   000008   ........     CALLA   #Init_Conditions
     72            PJOUT |= LED1;                            // Turn LED 1 on to indicate boot
   \   00000C   92D32203     BIS.W   #0x1, &0x322
     73            Time_Sequence = ZERO;                        // 
   \   000010   8243....     MOV.W   #0x0, &Time_Sequence
     74            Init_Timers();                            // Initialize Timers
   \   000014   ........     CALLA   #Init_Timers
     75            five_msec_sleep(QUARTER_SECOND);          // 250 msec delay for the clock to settle
   \   000018   3C403200     MOV.W   #0x32, R12
   \   00001C   ........     CALLA   #five_msec_sleep
     76            Init_LEDs();                              // Initialize LEDs
   \   000020   ........     CALLA   #Init_LEDs
     77            Init_LCD();                               // Initialize LCD
   \   000024   ........     CALLA   #Init_LCD
     78            Init_Motors();                            // Turns off both motors
   \   000028   ........     CALLA   #Init_Motors
     79            
     80          //             1234567890
     81            display_1 = "NCSU";
   \   00002C   B240........ MOV.W   #`?<Constant "NCSU">`, &display_1
     82            posL1 = SW1_posL1;
   \   000032   F2400300.... MOV.B   #0x3, &posL1
     83            display_2 = "WOLFPACK";
   \   000038   B240........ MOV.W   #`?<Constant "WOLFPACK">`, &display_2
     84            posL2 = SW1_posL2;
   \   00003E   D243....     MOV.B   #0x1, &posL2
     85            display_3 = "ECE306";
   \   000042   B240........ MOV.W   #`?<Constant "ECE306">`, &display_3
     86            posL3 = SW1_posL3;
   \   000048   E243....     MOV.B   #0x2, &posL3
     87            display_4 = "S Brigman";
   \   00004C   B240........ MOV.W   #`?<Constant "S Brigman">`, &display_4
     88            posL4 = SW1_posL4;
   \   000052   D243....     MOV.B   #0x1, &posL4
     89            big = ZERO;
   \   000056   C243....     MOV.B   #0x0, &big
     90            Display_Process();
   \   00005A   ........     CALLA   #Display_Process
     91          //------------------------------------------------------------------------------
     92          // Begining of the "While" Operating System
     93          //------------------------------------------------------------------------------
     94           while(ALWAYS) {                            // Can the Operating system run
     95            switch(Time_Sequence){
   \                     ??main_0:
   \   00005E   1F42....     MOV.W   &Time_Sequence, R15
   \   000062   3F803200     SUB.W   #0x32, R15
   \   000066   2224         JEQ     ??main_3
   \   000068   3F803200     SUB.W   #0x32, R15
   \   00006C   1A24         JEQ     ??main_4
   \   00006E   3F803200     SUB.W   #0x32, R15
   \   000072   1224         JEQ     ??main_5
   \   000074   3F803200     SUB.W   #0x32, R15
   \   000078   0A24         JEQ     ??main_6
   \   00007A   3F803200     SUB.W   #0x32, R15
   \   00007E   1F20         JNE     ??main_1
     96              case FULL_SECOND:                               // 1000 msec  
     97                if(one_time){
   \   000080   C293....     CMP.B   #0x0, &one_time
   \   000084   0224         JEQ     ??main_7
     98                  //Init_LEDs();                        // Initialize LEDs
     99                  one_time = ZERO;
   \   000086   C243....     MOV.B   #0x0, &one_time
    100                }
    101                Time_Sequence = ZERO;                    // 
   \                     ??main_7:
   \   00008A   8243....     MOV.W   #0x0, &Time_Sequence
    102              case THOU_MS:                               // 1000 msec  
    103                if(one_time){
   \                     ??main_6:
   \   00008E   C293....     CMP.B   #0x0, &one_time
   \   000092   0224         JEQ     ??main_5
    104                  //P3OUT |= LED5;                      // Change State of LED 5
    105                  one_time = ZERO;
   \   000094   C243....     MOV.B   #0x0, &one_time
    106                }
    107              case THIRD_SECOND:                               // 750 msec  
    108                if(one_time){
   \                     ??main_5:
   \   000098   C293....     CMP.B   #0x0, &one_time
   \   00009C   0224         JEQ     ??main_4
    109                  //PJOUT |= LED3;                      // Change State of LED 3
    110                  //P3OUT |= LED6;                      // Change State of LED 6
    111                  one_time = ZERO;
   \   00009E   C243....     MOV.B   #0x0, &one_time
    112                }
    113              case HALF_SECOND:                               // 500 msec  
    114                if(one_time){
   \                     ??main_4:
   \   0000A2   C293....     CMP.B   #0x0, &one_time
   \   0000A6   0224         JEQ     ??main_3
    115                  //PJOUT |= LED2;                      // Change State of LED 2
    116                  //P3OUT |= LED7;                      // Change State of LED 7
    117                  one_time = ZERO;
   \   0000A8   C243....     MOV.B   #0x0, &one_time
    118                }
    119              case  QUARTER_SECOND:                               // 250 msec  
    120                if(one_time){
   \                     ??main_3:
   \   0000AC   C293....     CMP.B   #0x0, &one_time
   \   0000B0   0224         JEQ     ??main_8
    121                  //PJOUT |= LED1;                      // Change State of LED 1
    122                  //P3OUT |= LED8;                      // Change State of LED 8
    123                  one_time = ZERO;
   \   0000B2   C243....     MOV.B   #0x0, &one_time
    124                }
    125                size_count++;
   \                     ??main_8:
   \   0000B6   D253....     ADD.B   #0x1, &size_count
    126                /*if(size_count > BIG_LETTERS){
    127                  size_count = ZERO;
    128                  if(big){
    129                    lcd_BIG_mid();
    130                    big = ZERO;
    131                  }else{
    132                    lcd_4line();
    133                    big = ONE;
    134                  }
    135                }*/
    136                Display_Process();
   \   0000BA   ........     CALLA   #Display_Process
    137                break;                                // 
    138              default: break; 
    139            }
    140            Switches_Process();                       // Check for switch state change 
   \                     ??main_1:
   \   0000BE   ........     CALLA   #Switches_Process
    141            if(Time_Sequence > FULL_SECOND){ // 1000 msec
   \   0000C2   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   0000C8   CA2B         JNC     ??main_0
    142              Time_Sequence = ZERO;
   \   0000CA   8243....     MOV.W   #0x0, &Time_Sequence
   \   0000CE   C73F         JMP     ??main_0
   \   0000D0   0343         NOP
   \   0000D2                REQUIRE _A_PJOUT_L
    143            }
    144           }
    145          //------------------------------------------------------------------------------
    146          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Motors
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Switches_Process
        4   -> five_msec_sleep


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "ECE306">
       5  ?<Constant "NCSU">
      10  ?<Constant "S Brigman">
       9  ?<Constant "WOLFPACK">
       2  Time_Sequence
       2  _A_PJOUT_L
       1  big
       3  control_state
       1  led_smclk
     210  main
       1  one_time
       1  size_count

 
 210 bytes in segment CODE
   2 bytes in segment DATA16_AN
  31 bytes in segment DATA16_C
   9 bytes in segment DATA16_Z
 
 210 bytes of CODE  memory
  31 bytes of CONST memory
   9 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
