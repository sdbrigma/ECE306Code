###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           30/Sep/2015  12:02:29
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_05\clocks.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_05\clocks.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_05\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_05\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_05\Debug\List\clocks.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_05\Debug\Obj\clocks.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_05\clocks.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file sets the configuration settings of different clocks 
      4          //  Here is where clock frequencies and secondary or lower clock sources are changed.
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //  File Name: clocks.c
     10          //******************************************************************************
     11          
     12          //------------------------------------------------------------------------------
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x160
   \   union <unnamed> _A_CSCTL0_L
   \                     _A_CSCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x162
   \   union <unnamed> _A_CSCTL1_L
   \                     _A_CSCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x164
   \   union <unnamed> _A_CSCTL2_L
   \                     _A_CSCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x166
   \   union <unnamed> _A_CSCTL3_L
   \                     _A_CSCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x168
   \   union <unnamed> _A_CSCTL4_L
   \                     _A_CSCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x15c
   \   union <unnamed> _A_WDTCTL_L
   \                     _A_WDTCTL_L:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          #include  "macros.h"
     16          

   \                                 In  segment CODE, align 2
     17          void Init_Clocks(void){
   \                     Init_Clocks:
     18          /*******************************************************************************
     19          *        Author: Steffon Brigman
     20          *        Date:   September 2015
     21          *        Description: Contains all ports configurations.
     22          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     23          *
     24          *        Function name: Init_Clocks
     25          *        Description: Initializes 
     26          *        Passed : no variables passed 
     27          *        Locals: no variables declared 
     28          *        Returned: no values returned 
     29          *        Globlas: no values defined
     30          *******************************************************************************/
     31          //------------------------------------------------------------------------------
     32          // Clock Configurtaions
     33          // This is the clock initialization for the program.
     34          //
     35          // Initial clock configuration, runs immediately after boot.
     36          // Disables 1ms watchdog timer, 
     37          //      configure MCLK to 8MHz
     38          //      configure SMCLK to 8MHz.  
     39          // Since the X1 oscillator is not currently connected, 
     40          // X1CLK is an unknown speed (probably ~10kHz).
     41          //------------------------------------------------------------------------------
     42            WDTCTL = WDTPW | WDTHOLD;  // Disable watchdog
   \   000000   B240805A5C01 MOV.W   #0x5a80, &0x15c
     43          //  PJSEL0 |= XINR;
     44          //  PJSEL0 |= XOUTR;
     45            
     46          // Clocks:
     47          // Clock System Control 0 Register
     48            CSCTL0 = CSKEY;            // Unlock register
   \   000006   B24000A56001 MOV.W   #0xa500, &0x160
     49            
     50          // Clock System Control 1 Register
     51            CSCTL1 = CLEAR_REGISTER;   // Clear register
   \   00000C   82436201     MOV.W   #0x0, &0x162
     52            CSCTL1 &= ~DCORSEL;        // DCO range select. For high-speed devices,
   \   000010   B2C080006201 BIC.W   #0x80, &0x162
     53                                       // this bit can be written by the user.
     54                                       // For low-speed devices, it is always reset.
     55          //  CSCTL1 |= DCOFSEL_0;     // Set 5.33MHz DCO or 16MHz  
     56          //  CSCTL1 |= DCOFSEL_1;     // Set 6.67MHz DCO or 20MHz 
     57          //  CSCTL1 |= DCOFSEL_2;     // Set 5.33MHz DCO or 16MHz
     58            CSCTL1 |= DCOFSEL_3;       // Set 8MHz DCO or 24MHz
   \   000016   B2D006006201 BIS.W   #0x6, &0x162
     59            
     60          // Clock System Control 2 Register
     61            CSCTL2 = CLEAR_REGISTER;   // Clear register
   \   00001C   82436401     MOV.W   #0x0, &0x164
     62          //  CSCTL2 |= SELA_0;        // set ACLK = XT1; 
     63            CSCTL2 = SELA_1;           // set ACLK = vlo;
   \   000020   B24000016401 MOV.W   #0x100, &0x164
     64            CSCTL2 |= SELS_3;          // set SMCLK = DCO;
   \   000026   B2D030006401 BIS.W   #0x30, &0x164
     65            CSCTL2 |= SELM_3;          // set MCLK = DCO
   \   00002C   B2D003006401 BIS.W   #0x3, &0x164
     66            
     67          // Clock System Control 3 Register
     68            CSCTL3 = CLEAR_REGISTER;   // Clear register
   \   000032   82436601     MOV.W   #0x0, &0x166
     69            CSCTL3 |= DIVA_0;          // set ACLK clock divider /1
   \   000036   924266016601 MOV.W   &0x166, &0x166
     70            CSCTL3 |= DIVS__8;          // set SMCLK clock divider /8
   \   00003C   B2D030006601 BIS.W   #0x30, &0x166
     71            CSCTL3 |= DIVM_0;          // set MCLK clock divider /1
   \   000042   924266016601 MOV.W   &0x166, &0x166
     72            
     73          // Clock System Control 4 Register
     74            CSCTL4 = CLEAR_REGISTER;   // Clear register
   \   000048   82436801     MOV.W   #0x0, &0x168
     75            CSCTL4 &= ~XT1OFF;         // XT1 is on if XT1 is selected by the port selection and XT1 is not in bypass 
   \   00004C   92C36801     BIC.W   #0x1, &0x168
     76            CSCTL4 &= ~SMCLKOFF;       // SMCLK is not Off 
   \   000050   A2C36801     BIC.W   #0x2, &0x168
     77            CSCTL4 &= ~XT1BYPASS;      // XT1 sourced from external crystal 
   \   000054   B2C010006801 BIC.W   #0x10, &0x168
     78            CSCTL4 &= ~XTS;            // Low-frequency mode
   \   00005A   B2C020006801 BIC.W   #0x20, &0x168
     79            CSCTL4 |= XT1DRIVE_0;      // Lowest current consumption for XT1 LF mode. 
   \   000060   924268016801 MOV.W   &0x168, &0x168
     80                                       // XT1 oscillator operating range in HF mode is 4 MHz to 8 MHz.
     81            CSCTL4 |= XT2OFF;          // High Frequency Oscillator 2 (XT2) disable 
   \   000066   B2D000016801 BIS.W   #0x100, &0x168
     82            
     83            CSCTL0_H = CSLOCK;         // Lock registers
   \   00006C   D2436101     MOV.B   #0x1, &0x161
     84          //------------------------------------------------------------------------------
     85          }
   \   000070   1001         RETA
   \   000072                REQUIRE _A_WDTCTL_L
   \   000072                REQUIRE _A_CSCTL0_L
   \   000072                REQUIRE _A_CSCTL1_L
   \   000072                REQUIRE _A_CSCTL2_L
   \   000072                REQUIRE _A_CSCTL3_L
   \   000072                REQUIRE _A_CSCTL4_L
     86          
     87          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Clocks


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     114  Init_Clocks
       2  _A_CSCTL0_L
       2  _A_CSCTL1_L
       2  _A_CSCTL2_L
       2  _A_CSCTL3_L
       2  _A_CSCTL4_L
       2  _A_WDTCTL_L

 
 114 bytes in segment CODE
  12 bytes in segment DATA16_AN
 
 114 bytes of CODE memory
   0 bytes of DATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
