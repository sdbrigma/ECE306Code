###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           12/Oct/2015  17:37:42
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_06\interrupts.c
#    Command line  =  
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_06\interrupts.c" -lC
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_06\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_06\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_06\Debug\List\interrupts.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_06\Debug\Obj\interrupts.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_06\interrupts.c
      1          #include  "macros.h"
      2          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2
      3          #include  "functions.h"
      4          /*******************************************************************************
      5          *        Author: Steffon Brigman
      6          *        Date:   October 2015
      7          *        Description: This file contains all interrupts used within this project.
      8          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
      9          *
     10          *        File name: interrupts.c
     11          *        Passed : No variables passed 
     12          *        Locals: No variables defined
     13          *        Returned: no values returned 
     14          *        Globlas: SW1_state and SW2_state
     15          *******************************************************************************/

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          _Bool SW1_state;
   \                     SW1_state:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          _Bool SW2_state;
   \                     SW2_state:
   \   000000                DS8 1
     18          // TimerA0 0 Interrupt handler
     19          #pragma vector = TIMER0_A0_VECTOR
     20          

   \                                 In  segment ISR_CODE, align 2
     21          __interrupt void Timer0_A0_ISR(void){
   \                     Timer0_A0_ISR:
     22            /*******************************************************************************
     23          *        Author: Steffon Brigman
     24          *        Date:   October 2015
     25          *        Description: This functions is an interrupt used to control the motors.
     26          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     27          *
     28          *        Function name: Timer0_A0_ISR
     29          *        Passed : No variables passed 
     30          *        Locals: TA0CCR0, ISR_COUNT
     31          *        Returned: no values returned 
     32          *        Globlas: no variables defined
     33          *******************************************************************************/
     34          
     35           //PJOUT ^= LED3; // Test signal
     36           ISR_COUNT++;
   \   000000   9253....     ADD.W   #0x1, &ISR_COUNT
     37           LCD_COUNT++;
   \   000004   9253....     ADD.W   #0x1, &LCD_COUNT
     38           TA0CCR0 += TA0CCR0_INTERVAL; // Add Offset to TACCR0
   \   000008   B25010275203 ADD.W   #0x2710, &0x352
     39           
     40           if(LCD_COUNT == ONE_s){
   \   00000E   B2903200.... CMP.W   #0x32, &LCD_COUNT
   \   000014   0420         JNE     ??Timer0_A0_ISR_0
     41               P3OUT ^= LCD_BACKLITE;
   \   000016   F2E22202     XOR.B   #0x8, &0x222
     42               LCD_COUNT =  ZERO;
   \   00001A   8243....     MOV.W   #0x0, &LCD_COUNT
     43              }
     44           if(SW1_state == ALWAYS){
   \                     ??Timer0_A0_ISR_0:
   \   00001E   C293....     CMP.B   #0x0, &SW1_state
   \   000022   1024         JEQ     ??Timer0_A0_ISR_1
     45             D_count1++;
   \   000024   9253....     ADD.W   #0x1, &D_count1
     46             if(D_count1>DEBOUNCE){
   \   000028   B2903300.... CMP.W   #0x33, &D_count1
   \   00002E   0A38         JL      ??Timer0_A0_ISR_1
     47               PJOUT &= ~LED3;
   \   000030   A2C22203     BIC.W   #0x4, &0x322
     48               D_count1 = ZERO;
   \   000034   8243....     MOV.W   #0x0, &D_count1
     49               SW1_state = ZERO;
   \   000038   C243....     MOV.B   #0x0, &SW1_state
     50               P4IFG &= ~SW1;
   \   00003C   D2C33D02     BIC.B   #0x1, &0x23d
     51               P4IE |= SW1;
   \   000040   D2D33B02     BIS.B   #0x1, &0x23b
     52             }
     53           }
     54           
     55            if(SW2_state == ALWAYS){
   \                     ??Timer0_A0_ISR_1:
   \   000044   C293....     CMP.B   #0x0, &SW2_state
   \   000048   1024         JEQ     ??Timer0_A0_ISR_2
     56             D_count2++;
   \   00004A   9253....     ADD.W   #0x1, &D_count2
     57             if(D_count2>DEBOUNCE){
   \   00004E   B2903300.... CMP.W   #0x33, &D_count2
   \   000054   0A38         JL      ??Timer0_A0_ISR_2
     58               PJOUT &= ~LED2;
   \   000056   A2C32203     BIC.W   #0x2, &0x322
     59               D_count2 = ZERO;
   \   00005A   8243....     MOV.W   #0x0, &D_count2
     60               SW2_state = ZERO;
   \   00005E   C243....     MOV.B   #0x0, &SW2_state
     61               P4IFG &= ~SW2;
   \   000062   E2C33D02     BIC.B   #0x2, &0x23d
     62               P4IE |= SW2;
   \   000066   E2D33B02     BIS.B   #0x2, &0x23b
     63             }
     64           }
     65           
     66           if(ISR_COUNT>FIVE_SECONDS){
   \                     ??Timer0_A0_ISR_2:
   \   00006A   B290FC00.... CMP.W   #0xfc, &ISR_COUNT
   \   000070   0238         JL      ??Timer0_A0_ISR_3
     67             ISR_COUNT = ZERO;
   \   000072   8243....     MOV.W   #0x0, &ISR_COUNT
     68           }
     69          }
   \                     ??Timer0_A0_ISR_3:
   \   000076   0013         RETI
   \   000078                REQUIRE TA0CCR0
   \   000078                REQUIRE _A_PBOUT_L
   \   000078                REQUIRE _A_PJOUT_L
   \   000078                REQUIRE _A_PBIFG_L
   \   000078                REQUIRE _A_PBIE_L
     70          
     71          // Interrupt for SW1 and SW2
     72          #pragma vector=PORT4_VECTOR

   \                                 In  segment ISR_CODE, align 2
     73          __interrupt void switch_interrupt(void){
   \                     switch_interrupt:
     74              /*******************************************************************************
     75          *        Author: Steffon Brigman
     76          *        Date:   October 2015
     77          *        Description: Interrupt function for SW1 and SW2
     78          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     79          *
     80          *        Function name: switch_interrupt
     81          *        Passed : No variables passed 
     82          *        Locals: no variables declared
     83          *        Returned: no values returned 
     84          *        Globlas: SW1_state and SW2_state
     85          *******************************************************************************/
     86          // Switch 1
     87           if (P4IFG & SW1) {
   \   000000   D2B33D02     BIT.B   #0x1, &0x23d
   \   000004   0828         JNC     ??switch_interrupt_0
     88           SW1_state = ALWAYS; // SW1 has been pressed
   \   000006   D243....     MOV.B   #0x1, &SW1_state
     89           PJOUT |= LED3; // led on
   \   00000A   A2D22203     BIS.W   #0x4, &0x322
     90          
     91            // disable interrupt
     92           P4IFG &= ~SW1; // clear interrupt flag
   \   00000E   D2C33D02     BIC.B   #0x1, &0x23d
     93           P4IE &= ~SW1;
   \   000012   D2C33B02     BIC.B   #0x1, &0x23b
     94           }
     95          // Switch 2
     96           if (P4IFG & SW2) {
   \                     ??switch_interrupt_0:
   \   000016   E2B33D02     BIT.B   #0x2, &0x23d
   \   00001A   0828         JNC     ??switch_interrupt_1
     97           SW2_state = ALWAYS;
   \   00001C   D243....     MOV.B   #0x1, &SW2_state
     98           PJOUT |= LED2; // led on
   \   000020   A2D32203     BIS.W   #0x2, &0x322
     99          
    100           // disable interrupt
    101            P4IFG &= ~SW2; // clear interrupt flag
   \   000024   E2C33D02     BIC.B   #0x2, &0x23d
    102            P4IE &= ~SW2;
   \   000028   E2C33B02     BIC.B   #0x2, &0x23b
    103           }
    104          }
   \                     ??switch_interrupt_1:
   \   00002C   0013         RETI
   \   00002E                REQUIRE _A_PBIFG_L
   \   00002E                REQUIRE _A_PJOUT_L
   \   00002E                REQUIRE _A_PBIE_L

   \                                 In  segment INTVEC, offset 0x40, root
   \                     `??switch_interrupt::??INTVEC 64`:
   \   000040   ....         DC16    switch_interrupt

   \                                 In  segment INTVEC, offset 0x5a, root
   \                     `??Timer0_A0_ISR::??INTVEC 90`:
   \   00005A   ....         DC16    Timer0_A0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Timer0_A0_ISR
      4   switch_interrupt


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  SW1_state
       1  SW2_state
       2  TA0CCR0
     120  Timer0_A0_ISR
       2  Timer0_A0_ISR::??INTVEC 90
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_PBOUT_L
       2  _A_PJOUT_L
      46  switch_interrupt
       2  switch_interrupt::??INTVEC 64

 
  10 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 166 bytes in segment ISR_CODE
 
 166 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
   2 bytes of DATA  memory (+ 10 bytes shared)

Errors: none
Warnings: none
