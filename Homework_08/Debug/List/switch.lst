###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           29/Oct/2015  14:42:42
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\switch.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e6
   \   union <unnamed> _A_UCA1BRW_L
   \                     _A_UCA1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5e8
   \   union <unnamed> _A_UCA1MCTLW_L
   \                     _A_UCA1MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ec
   \   union <unnamed> _A_UCA1RXBUF_L
   \                     _A_UCA1RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ee
   \   union <unnamed> _A_UCA1TXBUF_L
   \                     _A_UCA1TXBUF_L:
   \   000000                DS8 2
     15          #include  "functions.h"

   \                                 In  segment CODE, align 2
     16          void Switches_Process(void){
   \                     Switches_Process:
   \   000000   31800C00     SUB.W   #0xc, SP
     17          //******************************************************************************
     18          //
     19          //  Description: This functions sets code for switch 1 and 2 upon being pressed
     20          //
     21          //  Steffon Brigman
     22          //  Sept 2015
     23          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
     24          //******************************************************************************
     25            const char HW8_String[] = "NCSU  #1  ";
   \   000004   0C41         MOV.W   SP, R12
   \   000006   3E40....     MOV.W   #`?<Constant "NCSU  #1  ">`, R14
   \   00000A   3D400B00     MOV.W   #0xb, R13
   \   00000E   ........     CALLA   #?CopyMemoryBytes
     26            if (!(P4IN & SW1)){ // Transmission at 9600 baud
   \   000012   D2B32102     BIT.B   #0x1, &0x221
   \   000016   822C         JC      ??Switches_Process_3
     27              UCA1BRW = BAUD_9600;
   \   000018   B2403400E605 MOV.W   #0x34, &0x5e6
     28              UCA1MCTLW = MOD_CTRL1;
   \   00001E   B2401149E805 MOV.W   #0x4911, &0x5e8
     29              display_1 = "          ";
   \   000024   B240........ MOV.W   #`?<Constant "          ">`, &display_1
     30              posL1 = ZERO;
   \   00002A   C243....     MOV.B   #0x0, &posL1
     31              display_2 = "          ";
   \   00002E   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     32              posL2 = ZERO;
   \   000034   C243....     MOV.B   #0x0, &posL2
     33              display_3 = "Baud Rate";
   \   000038   B240........ MOV.W   #`?<Constant "Baud Rate">`, &display_3
     34              posL3 = ALWAYS;
   \   00003E   D243....     MOV.B   #0x1, &posL3
     35              display_4 = "   9600   ";
   \   000042   B240........ MOV.W   #`?<Constant "   9600   ">`, &display_4
     36              posL4 = ZERO;
   \   000048   C243....     MOV.B   #0x0, &posL4
     37              Display_Process();
   \   00004C   ........     CALLA   #Display_Process
     38              
     39                while(ALWAYS){
     40                  if (!(P4IN & SW2)) { break; }
   \                     ??Switches_Process_0:
   \   000050   E2B32102     BIT.B   #0x2, &0x221
   \   000054   6328         JNC     ??Switches_Process_3
     41                  UCA1TXBUF = HW8_String[cpu_rx_ring_wr];
   \   000056   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   00005A   0F51         ADD.W   SP, R15
   \   00005C   6F4F         MOV.B   @R15, R15
   \   00005E   4F4F         MOV.B   R15, R15
   \   000060   824FEE05     MOV.W   R15, &0x5ee
     42                  display_1[LINE_POS_L9] = display_1[LINE_POS_L8];
   \   000064   1F42....     MOV.W   &display_1, R15
   \   000068   1E42....     MOV.W   &display_1, R14
   \   00006C   DE4F08000900 MOV.B   0x8(R15), 0x9(R14)
     43                  display_1[LINE_POS_L8] = display_1[LINE_POS_L7];
   \   000072   1F42....     MOV.W   &display_1, R15
   \   000076   1E42....     MOV.W   &display_1, R14
   \   00007A   DE4F07000800 MOV.B   0x7(R15), 0x8(R14)
     44                  display_1[LINE_POS_L7] = display_1[LINE_POS_L6];
   \   000080   1F42....     MOV.W   &display_1, R15
   \   000084   1E42....     MOV.W   &display_1, R14
   \   000088   DE4F06000700 MOV.B   0x6(R15), 0x7(R14)
     45                  display_1[LINE_POS_L6] = display_1[LINE_POS_L5];
   \   00008E   1F42....     MOV.W   &display_1, R15
   \   000092   1E42....     MOV.W   &display_1, R14
   \   000096   DE4F05000600 MOV.B   0x5(R15), 0x6(R14)
     46                  display_1[LINE_POS_L5] = display_1[LINE_POS_L4];
   \   00009C   1F42....     MOV.W   &display_1, R15
   \   0000A0   1E42....     MOV.W   &display_1, R14
   \   0000A4   DE4F04000500 MOV.B   0x4(R15), 0x5(R14)
     47                  display_1[LINE_POS_L4] = display_1[LINE_POS_L3];
   \   0000AA   1F42....     MOV.W   &display_1, R15
   \   0000AE   1E42....     MOV.W   &display_1, R14
   \   0000B2   DE4F03000400 MOV.B   0x3(R15), 0x4(R14)
     48                  display_1[LINE_POS_L3] = display_1[LINE_POS_L2];
   \   0000B8   1F42....     MOV.W   &display_1, R15
   \   0000BC   1E42....     MOV.W   &display_1, R14
   \   0000C0   DE4F02000300 MOV.B   0x2(R15), 0x3(R14)
     49                  display_1[LINE_POS_L2] = display_1[LINE_POS_L1];
   \   0000C6   1F42....     MOV.W   &display_1, R15
   \   0000CA   1E42....     MOV.W   &display_1, R14
   \   0000CE   DE4F01000200 MOV.B   0x1(R15), 0x2(R14)
     50                  display_1[LINE_POS_L1] = display_1[LINE_POS_L0];
   \   0000D4   1F42....     MOV.W   &display_1, R15
   \   0000D8   1E42....     MOV.W   &display_1, R14
   \   0000DC   EE4F0100     MOV.B   @R15, 0x1(R14)
     51                  display_1[LINE_POS_L0] = UCA1RXBUF;
   \   0000E0   1E42EC05     MOV.W   &0x5ec, R14
   \   0000E4   1F42....     MOV.W   &display_1, R15
   \   0000E8   CF4E0000     MOV.B   R14, 0(R15)
     52                  posL1 = ZERO;
   \   0000EC   C243....     MOV.B   #0x0, &posL1
     53                  display_2 = "          ";
   \   0000F0   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     54                  posL2 = ZERO;
   \   0000F6   C243....     MOV.B   #0x0, &posL2
     55                  display_3 = " Baud Rate";
   \   0000FA   B240........ MOV.W   #`?<Constant " Baud Rate">`, &display_3
     56                  posL3 = ZERO;
   \   000100   C243....     MOV.B   #0x0, &posL3
     57                  display_4 = "  9600  ";
   \   000104   B240........ MOV.W   #`?<Constant "  9600  ">`, &display_4
     58                  posL4 = ZERO;
   \   00010A   C243....     MOV.B   #0x0, &posL4
     59                  Display_Process();
   \   00010E   ........     CALLA   #Display_Process
     60                  Five_msec_Delay(transmit_delay);
   \   000112   3C404B00     MOV.W   #0x4b, R12
   \   000116   ........     CALLA   #Five_msec_Delay
   \   00011A   9A3F         JMP     ??Switches_Process_0
     61                }
     62            }
     63            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_3:
   \   00011C   E2B32102     BIT.B   #0x2, &0x221
   \   000120   812C         JC      ??Switches_Process_5
     64              /*display_1 = "Embedded";
     65              posL1 = SW2_posL1;
     66              display_2 = "Systems";
     67              posL2 = SW2_posL1;
     68              display_3 = "Rock!";
     69              posL3 = SW2_posL1;
     70              display_4 = "Go Pack!";
     71              posL4 = SW2_posL1;*/
     72               
     73              display_1 = "          ";
   \   000122   B240........ MOV.W   #`?<Constant "          ">`, &display_1
     74              posL1 = ZERO;
   \   000128   C243....     MOV.B   #0x0, &posL1
     75              display_2 = "          ";
   \   00012C   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     76              posL2 = ZERO;
   \   000132   C243....     MOV.B   #0x0, &posL2
     77              display_3 = "Baud Rate";
   \   000136   B240........ MOV.W   #`?<Constant "Baud Rate">`, &display_3
     78              posL3 = ALWAYS;
   \   00013C   D243....     MOV.B   #0x1, &posL3
     79              display_4 = " 115200 ";
   \   000140   B240........ MOV.W   #`?<Constant " 115200 ">`, &display_4
     80              posL4 = ZERO;
   \   000146   C243....     MOV.B   #0x0, &posL4
     81              Display_Process();
   \   00014A   ........     CALLA   #Display_Process
     82                
     83              // transmission at 115200 baud
     84              UCA1BRW = BAUD_115200;
   \   00014E   A242E605     MOV.W   #0x4, &0x5e6
     85              UCA1MCTLW = MOD_CTRL2;
   \   000152   B2405155E805 MOV.W   #0x5551, &0x5e8
     86              
     87              while(ALWAYS){
     88                  if (!(P4IN & SW1)) { break; }
   \                     ??Switches_Process_1:
   \   000158   D2B32102     BIT.B   #0x1, &0x221
   \   00015C   6328         JNC     ??Switches_Process_5
     89                  UCA1TXBUF = HW8_String[cpu_rx_ring_wr];
   \   00015E   1F42....     MOV.W   &cpu_rx_ring_wr, R15
   \   000162   0F51         ADD.W   SP, R15
   \   000164   6F4F         MOV.B   @R15, R15
   \   000166   4F4F         MOV.B   R15, R15
   \   000168   824FEE05     MOV.W   R15, &0x5ee
     90                  display_1[LINE_POS_L9] = display_1[LINE_POS_L8];
   \   00016C   1F42....     MOV.W   &display_1, R15
   \   000170   1E42....     MOV.W   &display_1, R14
   \   000174   DE4F08000900 MOV.B   0x8(R15), 0x9(R14)
     91                  display_1[LINE_POS_L8] = display_1[LINE_POS_L7];
   \   00017A   1F42....     MOV.W   &display_1, R15
   \   00017E   1E42....     MOV.W   &display_1, R14
   \   000182   DE4F07000800 MOV.B   0x7(R15), 0x8(R14)
     92                  display_1[LINE_POS_L7] = display_1[LINE_POS_L6];
   \   000188   1F42....     MOV.W   &display_1, R15
   \   00018C   1E42....     MOV.W   &display_1, R14
   \   000190   DE4F06000700 MOV.B   0x6(R15), 0x7(R14)
     93                  display_1[LINE_POS_L6] = display_1[LINE_POS_L5];
   \   000196   1F42....     MOV.W   &display_1, R15
   \   00019A   1E42....     MOV.W   &display_1, R14
   \   00019E   DE4F05000600 MOV.B   0x5(R15), 0x6(R14)
     94                  display_1[LINE_POS_L5] = display_1[LINE_POS_L4];
   \   0001A4   1F42....     MOV.W   &display_1, R15
   \   0001A8   1E42....     MOV.W   &display_1, R14
   \   0001AC   DE4F04000500 MOV.B   0x4(R15), 0x5(R14)
     95                  display_1[LINE_POS_L4] = display_1[LINE_POS_L3];
   \   0001B2   1F42....     MOV.W   &display_1, R15
   \   0001B6   1E42....     MOV.W   &display_1, R14
   \   0001BA   DE4F03000400 MOV.B   0x3(R15), 0x4(R14)
     96                  display_1[LINE_POS_L3] = display_1[LINE_POS_L2];
   \   0001C0   1F42....     MOV.W   &display_1, R15
   \   0001C4   1E42....     MOV.W   &display_1, R14
   \   0001C8   DE4F02000300 MOV.B   0x2(R15), 0x3(R14)
     97                  display_1[LINE_POS_L2] = display_1[LINE_POS_L1];
   \   0001CE   1F42....     MOV.W   &display_1, R15
   \   0001D2   1E42....     MOV.W   &display_1, R14
   \   0001D6   DE4F01000200 MOV.B   0x1(R15), 0x2(R14)
     98                  display_1[LINE_POS_L1] = display_1[LINE_POS_L0];
   \   0001DC   1F42....     MOV.W   &display_1, R15
   \   0001E0   1E42....     MOV.W   &display_1, R14
   \   0001E4   EE4F0100     MOV.B   @R15, 0x1(R14)
     99                  display_1[LINE_POS_L0] = UCA1RXBUF;
   \   0001E8   1E42EC05     MOV.W   &0x5ec, R14
   \   0001EC   1F42....     MOV.W   &display_1, R15
   \   0001F0   CF4E0000     MOV.B   R14, 0(R15)
    100                  posL1 = ZERO;
   \   0001F4   C243....     MOV.B   #0x0, &posL1
    101                  display_2 = "          ";
   \   0001F8   B240........ MOV.W   #`?<Constant "          ">`, &display_2
    102                  posL2 = ZERO;
   \   0001FE   C243....     MOV.B   #0x0, &posL2
    103                  display_3 = " Baud Rate";
   \   000202   B240........ MOV.W   #`?<Constant " Baud Rate">`, &display_3
    104                  posL3 = ZERO;
   \   000208   C243....     MOV.B   #0x0, &posL3
    105                  display_4 = " 115200 ";
   \   00020C   B240........ MOV.W   #`?<Constant " 115200 ">`, &display_4
    106                  posL4 = ZERO;
   \   000212   C243....     MOV.B   #0x0, &posL4
    107                  Display_Process();
   \   000216   ........     CALLA   #Display_Process
    108                  Five_msec_Delay(transmit_delay);
   \   00021A   3C404B00     MOV.W   #0x4b, R12
   \   00021E   ........     CALLA   #Five_msec_Delay
   \   000222   9A3F         JMP     ??Switches_Process_1
    109              }
    110          }
    111          //------------------------------------------------------------------------------
    112          }
   \                     ??Switches_Process_5:
   \   000224   31500C00     ADD.W   #0xc, SP
   \   000228   1001         RETA
   \   00022A                REQUIRE _A_PBIN_L
   \   00022A                REQUIRE _A_UCA1BRW_L
   \   00022A                REQUIRE _A_UCA1MCTLW_L
   \   00022A                REQUIRE _A_UCA1TXBUF_L
   \   00022A                REQUIRE _A_UCA1RXBUF_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU  #1  ">`:
   \   000000   4E4353552020 DC8 "NCSU  #1  "
   \            2331202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Baud Rate">`:
   \   000000   426175642052 DC8 "Baud Rate"
   \            61746500    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   9600   ">`:
   \   000000   202020393630 DC8 "   9600   "
   \            3020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Baud Rate">`:
   \   000000   204261756420 DC8 " Baud Rate"
   \            5261746500  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  9600  ">`:
   \   000000   202039363030 DC8 "  9600  "
   \            202000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " 115200 ">`:
   \   000000   203131353230 DC8 " 115200 "
   \            302000      

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     16   Switches_Process
       16   -> Display_Process
       16   -> Five_msec_Delay
       16 ?CopyMemoryBytes


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "   9600   ">
       9  ?<Constant "  9600  ">
       9  ?<Constant " 115200 ">
      11  ?<Constant " Baud Rate">
      10  ?<Constant "Baud Rate">
      11  ?<Constant "NCSU  #1  ">
     554  Switches_Process
       2  _A_PBIN_L
       2  _A_UCA1BRW_L
       2  _A_UCA1MCTLW_L
       2  _A_UCA1RXBUF_L
       2  _A_UCA1TXBUF_L

 
 554 bytes in segment CODE
  10 bytes in segment DATA16_AN
  72 bytes in segment DATA16_C
 
 554 bytes of CODE  memory
  72 bytes of CONST memory
   0 bytes of DATA  memory (+ 10 bytes shared)

Errors: none
Warnings: none
