###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           29/Oct/2015  14:42:40
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\main.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\main.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\List\main.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\Obj\main.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\main.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "macros.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          
     16          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          int ISR_COUNT;
   \                     ISR_COUNT:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          unsigned int ADC_Thumb;
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          unsigned int ADC_Right_Detector;
   \                     ADC_Right_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          unsigned int ADC_Left_Detector;
   \                     ADC_Left_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          unsigned int ADC_Temp;
   \                     ADC_Temp:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          unsigned int ADC_Bat;
   \                     ADC_Bat:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int tracking_value_high;
   \                     tracking_value_high:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned int tracking_value_low;
   \                     tracking_value_low:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          unsigned int tracking_value;
   \                     tracking_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int ambience;
   \                     ambience:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          int ADC_Channel = ZERO;
   \                     ADC_Channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1
     32          extern char display_line_1[DISPLAY_LENGTH];
     33          extern char display_line_2[DISPLAY_LENGTH];
     34          extern char display_line_3[DISPLAY_LENGTH];
     35          extern char display_line_4[DISPLAY_LENGTH];
     36          extern char *display_1;
     37          extern char *display_2;
     38          extern char *display_3;
     39          extern char *display_4;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          char posL1;
   \                     posL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          char posL2;
   \                     posL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          char posL3;
   \                     posL3:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          char posL4;
   \                     posL4:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          char size_count;
   \                     size_count:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          unsigned int cpu_rx_ring_wr;
   \                     cpu_rx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          unsigned int cpu_rx_ring_rd;
   \                     cpu_rx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          unsigned int cpu_tx_ring_wr;
   \                     cpu_tx_ring_wr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          unsigned int cpu_tx_ring_rd;
   \                     cpu_tx_ring_rd:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          char big;
   \                     big:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          volatile char CPU_Char_Rx[16];
   \                     CPU_Char_Rx:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          volatile char CPU_Char_Tx[16];
   \                     CPU_Char_Tx:
   \   000000                DS8 16
     52          

   \                                 In  segment CODE, align 2
     53          void main(void){
   \                     main:
     54          //------------------------------------------------------------------------------
     55          // Main Program
     56          // This is the main routine for the program. Execution of code starts here.
     57          // The operating system is Back Ground Fore Ground.
     58          // 
     59          //------------------------------------------------------------------------------
     60            Init_Ports();
   \   000000   ........     CALLA   #Init_Ports
     61            Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
     62            Init_Conditions();
   \   000008   ........     CALLA   #Init_Conditions
     63            PJOUT |= LED1;                            // Turn LED 1 on to indicate boot
   \   00000C   92D32203     BIS.W   #0x1, &0x322
     64            Time_Sequence = ZERO;                        // 
   \   000010   8243....     MOV.W   #0x0, &Time_Sequence
     65            Init_Timers();                            // Initialize Timers
   \   000014   ........     CALLA   #Init_Timers
     66            five_msec_sleep(QUARTER_SECOND);          // 250 msec delay for the clock to settle
   \   000018   3C403200     MOV.W   #0x32, R12
   \   00001C   ........     CALLA   #five_msec_sleep
     67            Init_LEDs();                              // Initialize LEDs
   \   000020   ........     CALLA   #Init_LEDs
     68            Init_LCD();                               // Initialize LCD
   \   000024   ........     CALLA   #Init_LCD
     69            Init_Motors();                            // Turns off both motors
   \   000028   ........     CALLA   #Init_Motors
     70            Init_ADC();
   \   00002C   ........     CALLA   #Init_ADC
     71            Init_Serial_UCA1();
   \   000030   ........     CALLA   #Init_Serial_UCA1
     72            
     73          //             1234567890
     74            ClrDisplay();
   \   000034   ........     CALLA   #ClrDisplay
     75            display_1 = "NCSU";
   \   000038   B240........ MOV.W   #`?<Constant "NCSU">`, &display_1
     76            posL1 = SW1_posL1;
   \   00003E   F2400300.... MOV.B   #0x3, &posL1
     77            display_2 = "WOLFPACK";
   \   000044   B240........ MOV.W   #`?<Constant "WOLFPACK">`, &display_2
     78            posL2 = SW1_posL2;
   \   00004A   D243....     MOV.B   #0x1, &posL2
     79            display_3 = "ECE306";
   \   00004E   B240........ MOV.W   #`?<Constant "ECE306">`, &display_3
     80            posL3 = SW1_posL3;
   \   000054   E243....     MOV.B   #0x2, &posL3
     81            display_4 = "S Brigman";
   \   000058   B240........ MOV.W   #`?<Constant "S Brigman">`, &display_4
     82            posL4 = SW1_posL4;
   \   00005E   D243....     MOV.B   #0x1, &posL4
     83            big = ZERO;
   \   000062   C243....     MOV.B   #0x0, &big
     84            Display_Process();
   \   000066   ........     CALLA   #Display_Process
     85            
     86            Five_msec_Delay(FIVE_SECONDS); // delay for 5s
   \   00006A   3C40FB00     MOV.W   #0xfb, R12
   \   00006E   ........     CALLA   #Five_msec_Delay
     87            
     88              display_1 = "          ";
   \   000072   B240........ MOV.W   #`?<Constant "          ">`, &display_1
     89              posL1 = ZERO;
   \   000078   C243....     MOV.B   #0x0, &posL1
     90              display_2 = "          ";
   \   00007C   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     91              posL2 = ZERO;
   \   000082   C243....     MOV.B   #0x0, &posL2
     92              display_3 = "Baud Rate";
   \   000086   B240........ MOV.W   #`?<Constant "Baud Rate">`, &display_3
     93              posL3 = ALWAYS;
   \   00008C   D243....     MOV.B   #0x1, &posL3
     94              display_4 = "          ";
   \   000090   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     95              posL4 = ZERO;
   \   000096   C243....     MOV.B   #0x0, &posL4
     96              Display_Process();
   \   00009A   ........     CALLA   #Display_Process
     97            //ADC_Process();
     98          //------------------------------------------------------------------------------
     99          // Begining of the "While" Operating System
    100          //------------------------------------------------------------------------------
    101           while(ALWAYS) {                            // Can the Operating system run
    102            switch(Time_Sequence){
   \                     ??main_0:
   \   00009E   1F42....     MOV.W   &Time_Sequence, R15
   \   0000A2   3F803200     SUB.W   #0x32, R15
   \   0000A6   2224         JEQ     ??main_3
   \   0000A8   3F803200     SUB.W   #0x32, R15
   \   0000AC   1A24         JEQ     ??main_4
   \   0000AE   3F803200     SUB.W   #0x32, R15
   \   0000B2   1224         JEQ     ??main_5
   \   0000B4   3F803200     SUB.W   #0x32, R15
   \   0000B8   0A24         JEQ     ??main_6
   \   0000BA   3F803200     SUB.W   #0x32, R15
   \   0000BE   1F20         JNE     ??main_1
    103              case FULL_SECOND:                               // 1000 msec  
    104                if(one_time){
   \   0000C0   C293....     CMP.B   #0x0, &one_time
   \   0000C4   0224         JEQ     ??main_7
    105                  //Init_LEDs();                        // Initialize LEDs
    106                  one_time = ZERO;
   \   0000C6   C243....     MOV.B   #0x0, &one_time
    107                }
    108                Time_Sequence = ZERO;                    // 
   \                     ??main_7:
   \   0000CA   8243....     MOV.W   #0x0, &Time_Sequence
    109              case THOU_MS:                               // 1000 msec  
    110                if(one_time){
   \                     ??main_6:
   \   0000CE   C293....     CMP.B   #0x0, &one_time
   \   0000D2   0224         JEQ     ??main_5
    111                  //P3OUT |= LED5;                      // Change State of LED 5
    112                  one_time = ZERO;
   \   0000D4   C243....     MOV.B   #0x0, &one_time
    113                }
    114              case THIRD_SECOND:                               // 750 msec  
    115                if(one_time){
   \                     ??main_5:
   \   0000D8   C293....     CMP.B   #0x0, &one_time
   \   0000DC   0224         JEQ     ??main_4
    116                  //PJOUT |= LED3;                      // Change State of LED 3
    117                  //P3OUT |= LED6;                      // Change State of LED 6
    118                  one_time = ZERO;
   \   0000DE   C243....     MOV.B   #0x0, &one_time
    119                }
    120              case HALF_SECOND:                               // 500 msec  
    121                if(one_time){
   \                     ??main_4:
   \   0000E2   C293....     CMP.B   #0x0, &one_time
   \   0000E6   0224         JEQ     ??main_3
    122                  //PJOUT |= LED2;                      // Change State of LED 2
    123                  //P3OUT |= LED7;                      // Change State of LED 7
    124                  one_time = ZERO;
   \   0000E8   C243....     MOV.B   #0x0, &one_time
    125                }
    126              case  QUARTER_SECOND:                               // 250 msec  
    127                if(one_time){
   \                     ??main_3:
   \   0000EC   C293....     CMP.B   #0x0, &one_time
   \   0000F0   0224         JEQ     ??main_8
    128                  //PJOUT |= LED1;                      // Change State of LED 1
    129                  //P3OUT |= LED8;                      // Change State of LED 8
    130                  one_time = ZERO;
   \   0000F2   C243....     MOV.B   #0x0, &one_time
    131                }
    132                size_count++;
   \                     ??main_8:
   \   0000F6   D253....     ADD.B   #0x1, &size_count
    133                /*if(size_count > BIG_LETTERS){
    134                  size_count = ZERO;
    135                  if(big){
    136                    lcd_BIG_mid();
    137                    big = ZERO;
    138                  }else{
    139                    lcd_4line();
    140                    big = ONE;
    141                  }
    142                }*/
    143                Display_Process();
   \   0000FA   ........     CALLA   #Display_Process
    144                break;                                // 
    145              default: break; 
    146            }
    147            Switches_Process();                       // Check for switch state change 
   \                     ??main_1:
   \   0000FE   ........     CALLA   #Switches_Process
    148            if(Time_Sequence > FULL_SECOND){ // 1000 msec
   \   000102   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   000108   CA2B         JNC     ??main_0
    149              Time_Sequence = ZERO;
   \   00010A   8243....     MOV.W   #0x0, &Time_Sequence
   \   00010E   C73F         JMP     ??main_0
   \   000110   0343         NOP
   \   000112                REQUIRE _A_PJOUT_L
    150            }
    151           }
    152          //------------------------------------------------------------------------------
    153          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "NCSU">`:
   \   000000   4E43535500   DC8 "NCSU"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WOLFPACK">`:
   \   000000   574F4C465041 DC8 "WOLFPACK"
   \            434B00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ECE306">`:
   \   000000   454345333036 DC8 "ECE306"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "S Brigman">`:
   \   000000   532042726967 DC8 "S Brigman"
   \            6D616E00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Baud Rate">`:
   \   000000   426175642052 DC8 "Baud Rate"
   \            61746500    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> ClrDisplay
        4   -> Display_Process
        4   -> Five_msec_Delay
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Motors
        4   -> Init_Ports
        4   -> Init_Serial_UCA1
        4   -> Init_Timers
        4   -> Switches_Process
        4   -> five_msec_sleep


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      10  ?<Constant "Baud Rate">
       7  ?<Constant "ECE306">
       5  ?<Constant "NCSU">
      10  ?<Constant "S Brigman">
       9  ?<Constant "WOLFPACK">
       2  ADC_Bat
       2  ADC_Channel
       2  ADC_Left_Detector
       2  ADC_Right_Detector
       2  ADC_Temp
       2  ADC_Thumb
      16  CPU_Char_Rx
      16  CPU_Char_Tx
       2  ISR_COUNT
       2  Time_Sequence
       2  _A_PJOUT_L
       2  ambience
       1  big
       3  control_state
       2  cpu_rx_ring_rd
       2  cpu_rx_ring_wr
       2  cpu_tx_ring_rd
       2  cpu_tx_ring_wr
       1  led_smclk
     274  main
       1  one_time
       1  posL1
       1  posL2
       1  posL3
       1  posL4
       1  size_count
       2  tracking_value
       2  tracking_value_high
       2  tracking_value_low

 
 274 bytes in segment CODE
   2 bytes in segment DATA16_AN
  52 bytes in segment DATA16_C
  75 bytes in segment DATA16_Z
 
 274 bytes of CODE  memory
  52 bytes of CONST memory
  75 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
