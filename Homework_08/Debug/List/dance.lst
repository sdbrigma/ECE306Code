###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           29/Oct/2015  14:42:35
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\dance.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\dance.c"
#        -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\List\dance.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\Obj\dance.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\dance.c
      1            /*******************************************************************************
      2          *        Author: Steffon Brigman
      3          *        Date:   October 2015
      4          *        Description: This functions is an interrupt used to control the motors.
      5          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
      6          *
      7          *        File name: dance.c
      8          *        Passed : No variables passed 
      9          *        Locals: No locals variables
     10          *        Returned: no values returned 
     11          *        Globlas: display_1 through display_4 and posL1 through posL4
     12          *******************************************************************************/
     13          #include  "macros.h"
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          

   \                                 In  segment CODE, align 2
     17          void twerk(void){
   \                     twerk:
   \                     ??twerk_0:
     18            /*******************************************************************************
     19          *        Author: Steffon Brigman
     20          *        Date:   October 2015
     21          *        Description: This functions is an interrupt used to control the motors.
     22          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     23          *
     24          *        Function name: twerk.c
     25          *        Passed : No variables passed 
     26          *        Locals: No locals variables
     27          *        Returned: no values returned 
     28          *        Globlas: ISR_COUNT, display_1 through display_4, and posL1 through posL4
     29          *******************************************************************************/
     30              while(ISR_COUNT<TWO_s){ // pause for 2 s
   \   000000   B290C800.... CMP.W   #0xc8, &ISR_COUNT
   \   000006   0534         JGE     ??twerk_10
     31             left_off();
   \   000008   ........     CALLA   #left_off
     32             right_off();
   \   00000C   ........     CALLA   #right_off
   \   000010   F73F         JMP     ??twerk_0
     33            }
     34            ISR_COUNT = ZERO;
   \                     ??twerk_10:
   \   000012   8243....     MOV.W   #0x0, &ISR_COUNT
     35            
     36               display_1 = "=====";
   \   000016   B240........ MOV.W   #`?<Constant "=====">`, &display_1
     37              posL1 = ZERO;
   \   00001C   C243....     MOV.B   #0x0, &posL1
     38              display_2 = "FORWARD";
   \   000020   B240........ MOV.W   #`?<Constant "FORWARD">`, &display_2
     39              posL2 = ZERO;
   \   000026   C243....     MOV.B   #0x0, &posL2
     40              display_3 = "=====";
   \   00002A   B240........ MOV.W   #`?<Constant "=====">`, &display_3
     41              posL3 = ZERO;
   \   000030   C243....     MOV.B   #0x0, &posL3
     42              display_4 = "=====";
   \   000034   B240........ MOV.W   #`?<Constant "=====">`, &display_4
     43              posL4 = ZERO;
   \   00003A   C243....     MOV.B   #0x0, &posL4
     44              Display_Process();
   \   00003E   ........     CALLA   #Display_Process
     45            
     46            // STRAIGHT
     47               while(ISR_COUNT<STRAIGHT_TIME){ // straight for 1 s
   \                     ??twerk_1:
   \   000042   B2903200.... CMP.W   #0x32, &ISR_COUNT
   \   000048   0534         JGE     ??twerk_11
     48               right_on();
   \   00004A   ........     CALLA   #right_on
     49              left_on();
   \   00004E   ........     CALLA   #left_on
   \   000052   F73F         JMP     ??twerk_1
     50             }
     51            left_off();
   \                     ??twerk_11:
   \   000054   ........     CALLA   #left_off
     52            right_off();
   \   000058   ........     CALLA   #right_off
     53            ISR_COUNT = ZERO;
   \   00005C   8243....     MOV.W   #0x0, &ISR_COUNT
     54          //------------------------------------------------------------------------------  
     55          
     56            while(ISR_COUNT<PAUSE){ // pause for 1/2 s
   \                     ??twerk_2:
   \   000060   B2903200.... CMP.W   #0x32, &ISR_COUNT
   \   000066   0534         JGE     ??twerk_12
     57             left_off();
   \   000068   ........     CALLA   #left_off
     58             right_off();
   \   00006C   ........     CALLA   #right_off
   \   000070   F73F         JMP     ??twerk_2
     59            }
     60            ISR_COUNT = ZERO;
   \                     ??twerk_12:
   \   000072   8243....     MOV.W   #0x0, &ISR_COUNT
     61            
     62            display_1 = "=====";
   \   000076   B240........ MOV.W   #`?<Constant "=====">`, &display_1
     63              posL1 = ZERO;
   \   00007C   C243....     MOV.B   #0x0, &posL1
     64              display_2 = "REVERSE";
   \   000080   B240........ MOV.W   #`?<Constant "REVERSE">`, &display_2
     65              posL2 = ZERO;
   \   000086   C243....     MOV.B   #0x0, &posL2
     66              display_3 = "=====";
   \   00008A   B240........ MOV.W   #`?<Constant "=====">`, &display_3
     67              posL3 = ZERO;
   \   000090   C243....     MOV.B   #0x0, &posL3
     68              display_4 = "======";
   \   000094   B240........ MOV.W   #`?<Constant "======">`, &display_4
     69              posL4 = ZERO;
   \   00009A   C243....     MOV.B   #0x0, &posL4
     70              Display_Process();
   \   00009E   ........     CALLA   #Display_Process
     71            
     72            // REVERSE for 2 seconds
     73            while(ISR_COUNT<REVERSE_TIME){
   \                     ??twerk_3:
   \   0000A2   B2906400.... CMP.W   #0x64, &ISR_COUNT
   \   0000A8   0534         JGE     ??twerk_13
     74              l_reverse_on();
   \   0000AA   ........     CALLA   #l_reverse_on
     75              r_reverse_on();
   \   0000AE   ........     CALLA   #r_reverse_on
   \   0000B2   F73F         JMP     ??twerk_3
     76            }
     77            
     78            l_reverse_off();
   \                     ??twerk_13:
   \   0000B4   ........     CALLA   #l_reverse_off
     79            r_reverse_off();
   \   0000B8   ........     CALLA   #r_reverse_off
     80            ISR_COUNT = ZERO;
   \   0000BC   8243....     MOV.W   #0x0, &ISR_COUNT
     81            
     82          //------------------------------------------------------------------------------  
     83            
     84            while(ISR_COUNT<PAUSE){ // pause for 1/2 s
   \                     ??twerk_4:
   \   0000C0   B2903200.... CMP.W   #0x32, &ISR_COUNT
   \   0000C6   0534         JGE     ??twerk_14
     85             left_off();
   \   0000C8   ........     CALLA   #left_off
     86             right_off();
   \   0000CC   ........     CALLA   #right_off
   \   0000D0   F73F         JMP     ??twerk_4
     87            }
     88            ISR_COUNT = ZERO;
   \                     ??twerk_14:
   \   0000D2   8243....     MOV.W   #0x0, &ISR_COUNT
     89            
     90            display_1 = "=====";
   \   0000D6   B240........ MOV.W   #`?<Constant "=====">`, &display_1
     91              posL1 = ZERO;
   \   0000DC   C243....     MOV.B   #0x0, &posL1
     92              display_2 = "FORWARD";
   \   0000E0   B240........ MOV.W   #`?<Constant "FORWARD">`, &display_2
     93              posL2 = ZERO;
   \   0000E6   C243....     MOV.B   #0x0, &posL2
     94              display_3 = "=====";
   \   0000EA   B240........ MOV.W   #`?<Constant "=====">`, &display_3
     95              posL3 = ZERO;
   \   0000F0   C243....     MOV.B   #0x0, &posL3
     96              display_4 = "=====";
   \   0000F4   B240........ MOV.W   #`?<Constant "=====">`, &display_4
     97              posL4 = ZERO;
   \   0000FA   C243....     MOV.B   #0x0, &posL4
     98              Display_Process();
   \   0000FE   ........     CALLA   #Display_Process
     99            
    100              // straight
    101               while(ISR_COUNT<STRAIGHT_TIME){ // straight for 1s
   \                     ??twerk_5:
   \   000102   B2903200.... CMP.W   #0x32, &ISR_COUNT
   \   000108   0534         JGE     ??twerk_15
    102               right_on();
   \   00010A   ........     CALLA   #right_on
    103              left_on();
   \   00010E   ........     CALLA   #left_on
   \   000112   F73F         JMP     ??twerk_5
    104             }
    105            left_off();
   \                     ??twerk_15:
   \   000114   ........     CALLA   #left_off
    106            right_off();
   \   000118   ........     CALLA   #right_off
    107            ISR_COUNT = ZERO;
   \   00011C   8243....     MOV.W   #0x0, &ISR_COUNT
    108          //------------------------------------------------------------------------------
    109            while(ISR_COUNT<PAUSE){ // pause for 1/2 s
   \                     ??twerk_6:
   \   000120   B2903200.... CMP.W   #0x32, &ISR_COUNT
   \   000126   0534         JGE     ??twerk_16
    110             left_off();
   \   000128   ........     CALLA   #left_off
    111             right_off();
   \   00012C   ........     CALLA   #right_off
   \   000130   F73F         JMP     ??twerk_6
    112            }
    113            ISR_COUNT = ZERO;
   \                     ??twerk_16:
   \   000132   8243....     MOV.W   #0x0, &ISR_COUNT
    114            
    115               display_1 = "=====";
   \   000136   B240........ MOV.W   #`?<Constant "=====">`, &display_1
    116              posL1 = ZERO;
   \   00013C   C243....     MOV.B   #0x0, &posL1
    117              display_2 = "Clockwise";
   \   000140   B240........ MOV.W   #`?<Constant "Clockwise">`, &display_2
    118              posL2 = ZERO;
   \   000146   C243....     MOV.B   #0x0, &posL2
    119              display_3 = "=====";
   \   00014A   B240........ MOV.W   #`?<Constant "=====">`, &display_3
    120              posL3 = ZERO;
   \   000150   C243....     MOV.B   #0x0, &posL3
    121              display_4 = "=====";
   \   000154   B240........ MOV.W   #`?<Constant "=====">`, &display_4
    122              posL4 = ZERO;
   \   00015A   C243....     MOV.B   #0x0, &posL4
    123              Display_Process();
   \   00015E   ........     CALLA   #Display_Process
    124            
    125            // CW CIrcle
    126            while(ISR_COUNT<STRAIGHT_TIME){
   \                     ??twerk_7:
   \   000162   B2903200.... CMP.W   #0x32, &ISR_COUNT
   \   000168   0534         JGE     ??twerk_17
    127              left_on();
   \   00016A   ........     CALLA   #left_on
    128              r_reverse_on();
   \   00016E   ........     CALLA   #r_reverse_on
   \   000172   F73F         JMP     ??twerk_7
    129            }
    130            left_off();
   \                     ??twerk_17:
   \   000174   ........     CALLA   #left_off
    131            r_reverse_off();
   \   000178   ........     CALLA   #r_reverse_off
    132            ISR_COUNT = ZERO;
   \   00017C   8243....     MOV.W   #0x0, &ISR_COUNT
    133          //------------------------------------------------------------------------------
    134             while(ISR_COUNT<PAUSE){ // pause for 1/2 s
   \                     ??twerk_8:
   \   000180   B2903200.... CMP.W   #0x32, &ISR_COUNT
   \   000186   0534         JGE     ??twerk_18
    135             left_off();
   \   000188   ........     CALLA   #left_off
    136             right_off();
   \   00018C   ........     CALLA   #right_off
   \   000190   F73F         JMP     ??twerk_8
    137            }
    138            ISR_COUNT = ZERO;
   \                     ??twerk_18:
   \   000192   8243....     MOV.W   #0x0, &ISR_COUNT
    139            
    140               display_1 = "=====";
   \   000196   B240........ MOV.W   #`?<Constant "=====">`, &display_1
    141              posL1 = ZERO;
   \   00019C   C243....     MOV.B   #0x0, &posL1
    142              display_2 = "CCW CIRCLE";
   \   0001A0   B240........ MOV.W   #`?<Constant "CCW CIRCLE">`, &display_2
    143              posL2 = ZERO;
   \   0001A6   C243....     MOV.B   #0x0, &posL2
    144              display_3 = "=====";
   \   0001AA   B240........ MOV.W   #`?<Constant "=====">`, &display_3
    145              posL3 = ZERO;
   \   0001B0   C243....     MOV.B   #0x0, &posL3
    146              display_4 = "=====";
   \   0001B4   B240........ MOV.W   #`?<Constant "=====">`, &display_4
    147              posL4 = ZERO;
   \   0001BA   C243....     MOV.B   #0x0, &posL4
    148              Display_Process();
   \   0001BE   ........     CALLA   #Display_Process
    149            
    150            while(ISR_COUNT<STRAIGHT_TIME){
   \                     ??twerk_9:
   \   0001C2   B2903200.... CMP.W   #0x32, &ISR_COUNT
   \   0001C8   0534         JGE     ??twerk_19
    151              right_on();
   \   0001CA   ........     CALLA   #right_on
    152              l_reverse_on();
   \   0001CE   ........     CALLA   #l_reverse_on
   \   0001D2   F73F         JMP     ??twerk_9
    153            }
    154            right_off();
   \                     ??twerk_19:
   \   0001D4   ........     CALLA   #right_off
    155            l_reverse_off();
   \   0001D8   ........     CALLA   #l_reverse_off
    156            ISR_COUNT = ZERO;
   \   0001DC   8243....     MOV.W   #0x0, &ISR_COUNT
    157            
    158            display_1 = "Embedded";
   \   0001E0   B240........ MOV.W   #`?<Constant "Embedded">`, &display_1
    159              posL1 = SW2_posL1;
   \   0001E6   D243....     MOV.B   #0x1, &posL1
    160              display_2 = "Systems";
   \   0001EA   B240........ MOV.W   #`?<Constant "Systems">`, &display_2
    161              posL2 = SW2_posL1;
   \   0001F0   D243....     MOV.B   #0x1, &posL2
    162              display_3 = "Rock!";
   \   0001F4   B240........ MOV.W   #`?<Constant "Rock!">`, &display_3
    163              posL3 = SW2_posL1;
   \   0001FA   D243....     MOV.B   #0x1, &posL3
    164              display_4 = "Go Pack!";
   \   0001FE   B240........ MOV.W   #`?<Constant "Go Pack!">`, &display_4
    165              posL4 = SW2_posL1;
   \   000204   D243....     MOV.B   #0x1, &posL4
    166              Display_Process();
   \   000208   ........     BRA     #Display_Process
    167           }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "=====">`:
   \   000000   3D3D3D3D3D00 DC8 "====="

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "FORWARD">`:
   \   000000   464F52574152 DC8 "FORWARD"
   \            4400        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "REVERSE">`:
   \   000000   524556455253 DC8 "REVERSE"
   \            4500        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "======">`:
   \   000000   3D3D3D3D3D3D DC8 "======"
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Clockwise">`:
   \   000000   436C6F636B77 DC8 "Clockwise"
   \            69736500    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CCW CIRCLE">`:
   \   000000   434357204349 DC8 "CCW CIRCLE"
   \            52434C4500  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Embedded">`:
   \   000000   456D62656464 DC8 "Embedded"
   \            656400      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Systems">`:
   \   000000   53797374656D DC8 "Systems"
   \            7300        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Rock!">`:
   \   000000   526F636B2100 DC8 "Rock!"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Go Pack!">`:
   \   000000   476F20506163 DC8 "Go Pack!"
   \            6B2100      

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   twerk
        0   -> Display_Process
        4   -> Display_Process
        4   -> l_reverse_off
        4   -> l_reverse_on
        4   -> left_off
        4   -> left_on
        4   -> r_reverse_off
        4   -> r_reverse_on
        4   -> right_off
        4   -> right_on


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant "=====">
       7  ?<Constant "======">
      11  ?<Constant "CCW CIRCLE">
      10  ?<Constant "Clockwise">
       9  ?<Constant "Embedded">
       8  ?<Constant "FORWARD">
       9  ?<Constant "Go Pack!">
       8  ?<Constant "REVERSE">
       6  ?<Constant "Rock!">
       8  ?<Constant "Systems">
     524  twerk

 
 524 bytes in segment CODE
  82 bytes in segment DATA16_C
 
 524 bytes of CODE  memory
  82 bytes of CONST memory

Errors: none
Warnings: none
