###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           28/Oct/2015  20:48:02
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\interrupts.c
#    Command line  =  
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\interrupts.c" -lC
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\List\" -o
#        "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\List\interrupts.lst
#    Object file   =  
#        \\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Homework_08\Debug\Obj\interrupts.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Homework_08\interrupts.c
      1          #include  "macros.h"
      2          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADC10CTL0_L
   \                     _A_ADC10CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADC10MCTL0_L
   \                     _A_ADC10MCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x712
   \   union <unnamed> _A_ADC10MEM0_L
   \                     _A_ADC10MEM0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71e
   \   union <unnamed> _A_ADC10IV_L
   \                     _A_ADC10IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ec
   \   union <unnamed> _A_UCA1RXBUF_L
   \                     _A_UCA1RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5fe
   \   unsigned short volatile UCA1IV
   \                     UCA1IV:
   \   000000                DS8 2
      3          #include  "functions.h"
      4          /*******************************************************************************
      5          *        Author: Steffon Brigman
      6          *        Date:   October 2015
      7          *        Description: This file contains all interrupts used within this project.
      8          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
      9          *
     10          *        File name: interrupts.c
     11          *        Passed : No variables passed 
     12          *        Locals: No variables defined
     13          *        Returned: no values returned 
     14          *        Globlas: ADC_Thumb
     15          *******************************************************************************/

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int ADC_Thumb; 
   \                     ADC_Thumb:
   \   000000                DS8 2
     17          // TimerA0 0 Interrupt handler
     18          #pragma vector = TIMER0_A0_VECTOR
     19          

   \                                 In  segment ISR_CODE, align 2
     20          __interrupt void Timer0_A0_ISR(void){
   \                     Timer0_A0_ISR:
     21            /*******************************************************************************
     22          *        Author: Steffon Brigman
     23          *        Date:   October 2015
     24          *        Description: This functions is an interrupt used to control the motors.
     25          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     26          *
     27          *        Function name: Timer0_A0_ISR
     28          *        Passed : No variables passed 
     29          *        Locals: TA0CCR0, ISR_COUNT
     30          *        Returned: no values returned 
     31          *        Globlas: no variables defined
     32          *******************************************************************************/
     33          
     34           PJOUT ^= LED3; // Test signal
   \   000000   A2E22203     XOR.W   #0x4, &0x322
     35           ISR_COUNT++;
   \   000004   9253....     ADD.W   #0x1, &ISR_COUNT
     36           TA0CCR0 += TA0CCR0_INTERVAL; // Add Offset to TACCR0
   \   000008   B25010275203 ADD.W   #0x2710, &0x352
     37           if(ISR_COUNT>FIVE_SECONDS){
   \   00000E   B290FC00.... CMP.W   #0xfc, &ISR_COUNT
   \   000014   0238         JL      ??Timer0_A0_ISR_0
     38             ISR_COUNT = ZERO;
   \   000016   8243....     MOV.W   #0x0, &ISR_COUNT
     39           }
     40          }
   \                     ??Timer0_A0_ISR_0:
   \   00001A   0013         RETI
   \   00001C                REQUIRE _A_PJOUT_L
   \   00001C                REQUIRE TA0CCR0
     41          
     42          //------------------------------------------------------------------------------
     43          // ADC10 interrupt service routine
     44          // ADC_Right_Detector; // A00 ADC10INCH_0 - P1.0
     45          // ADC_Left_Detector; // A01 ADC10INCH_1 - P1.1
     46          // ADC_Thumb; // A03 ADC10INCH_3 - P1.3
     47          // ADC_Temp; // A10 ADC10INCH_10 – Temperature REF module
     48          // ADC_Bat; // A11 ADC10INCH_11 - Internal
     49          #pragma vector=ADC10_VECTOR

   \                                 In  segment ISR_CODE, align 2
     50          __interrupt void ADC10_ISR(void){
   \                     ADC10_ISR:
   \   000000   0F12         PUSH.W  R15
     51            /*******************************************************************************
     52          *        Author: Steffon Brigman
     53          *        Date:   October 2015
     54          *        Description: This functions is an interrupt used to control the motors.
     55          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     56          *
     57          *        Function name: ADC10_ISR
     58          *        Passed : No variables passed 
     59          *        Locals: none declared
     60          *        Returned: no values returned 
     61          *        Globlas: ADC_Right_Detector, ADC_Left_Detector, ADC_Thumb
     62          *******************************************************************************/
     63           switch(__even_in_range(ADC10IV,12)) {
   \   000002   1F421E07     MOV.W   &0x71e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for ADC10_ISR>_0`:
   \   000008   2A3C         JMP     ??ADC10_ISR_1
   \   00000A   293C         JMP     ??ADC10_ISR_1
   \   00000C   283C         JMP     ??ADC10_ISR_1
   \   00000E   273C         JMP     ??ADC10_ISR_1
   \   000010   263C         JMP     ??ADC10_ISR_1
   \   000012   253C         JMP     ??ADC10_ISR_1
   \   000014   003C         JMP     ??ADC10_ISR_5
     64           case 0: break; // No interrupt
     65           case 2: break; // conversion result overflow
     66           case 4: break; // conversion time overflow
     67           case 6: break; // ADC10HI
     68           case 8: break; // ADC10LO
     69           case 10: break; // ADC10IN
     70           case 12:
     71                 // Need this to change the ADC10INCH_x value.
     72               ADC10CTL0 &= ~ADC10ENC; // Toggle ENC bit.
   \                     ??ADC10_ISR_5:
   \   000016   A2C30007     BIC.W   #0x2, &0x700
     73               
     74               switch (ADC_Channel){
   \   00001A   1F42....     MOV.W   &ADC_Channel, R15
   \   00001E   0F83         SUB.W   #0x0, R15
   \   000020   0524         JEQ     ??ADC10_ISR_2
   \   000022   1F83         SUB.W   #0x1, R15
   \   000024   0B24         JEQ     ??ADC10_ISR_3
   \   000026   1F83         SUB.W   #0x1, R15
   \   000028   1124         JEQ     ??ADC10_ISR_4
   \   00002A   163C         JMP     ??ADC10_ISR_0
     75               case Right_Detector:
     76               ADC10MCTL0 = ADC10INCH_0; //  channel A0
   \                     ??ADC10_ISR_2:
   \   00002C   82430A07     MOV.W   #0x0, &0x70a
     77               ADC_Right_Detector = ADC10MEM0; // Read Channel A0
   \   000030   92421207.... MOV.W   &0x712, &ADC_Right_Detector
     78               ADC_Channel++;
   \   000036   9253....     ADD.W   #0x1, &ADC_Channel
     79               break;
   \   00003A   0E3C         JMP     ??ADC10_ISR_0
     80               
     81               case Left_Detector:
     82               ADC10MCTL0 = ADC10INCH_1; //  channel A1
   \                     ??ADC10_ISR_3:
   \   00003C   92430A07     MOV.W   #0x1, &0x70a
     83               ADC_Left_Detector = ADC10MEM0; // Read Channel A1
   \   000040   92421207.... MOV.W   &0x712, &ADC_Left_Detector
     84               ADC_Channel = ZERO;
   \   000046   8243....     MOV.W   #0x0, &ADC_Channel
     85               break;
   \   00004A   063C         JMP     ??ADC10_ISR_0
     86               
     87               case Thumbwheel:
     88               ADC10MCTL0 = ADC10INCH_3; // Next channel A0
   \                     ??ADC10_ISR_4:
   \   00004C   B24003000A07 MOV.W   #0x3, &0x70a
     89               ADC_Thumb = ADC10MEM0; // Read Channel A3
   \   000052   92421207.... MOV.W   &0x712, &ADC_Thumb
     90               //ADC_Channel = ZERO;
     91               break;
     92               
     93               /*case CHANNEL_A10:
     94               ADC10MCTL0 = ADC10INCH_10; // Next channel A10
     95               ADC_Temp = ADC10MEM0; // Read Channel A10
     96               ADC_Channel++;
     97               break;
     98               
     99               case CHANNEL_A11:
    100               ADC10MCTL0 = ADC10INCH_0; // Next channel A0
    101               ADC_Bat = ADC10MEM0; // Read Channel A11
    102               ADC_Channel= ZERO;
    103               break;*/
    104               
    105               default: break;
    106               }
    107             ADC10CTL0 |= ADC10ENC | ADC10SC; // Start next sample.
   \                     ??ADC10_ISR_0:
   \   000058   B2D003000007 BIS.W   #0x3, &0x700
    108           default: break;
    109             }
    110          }
   \                     ??ADC10_ISR_1:
   \   00005E   3F41         POP.W   R15
   \   000060   0013         RETI
   \   000062                REQUIRE _A_ADC10CTL0_L
   \   000062                REQUIRE _A_ADC10MCTL0_L
   \   000062                REQUIRE _A_ADC10MEM0_L
   \   000062                REQUIRE _A_ADC10IV_L
    111          //-----------------------------------------------------------------------------
    112          
    113          //------------------------------------------------------------------------------
    114          #pragma vector=USCI_A1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    115          __interrupt void USCI_A1_ISR(void){
   \                     USCI_A1_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
    116           unsigned int temp;
                               ^
Warning[Pe550]: variable "temp" was set but never used
    117           switch(__even_in_range(UCA1IV,0x08)){
   \   000002   1E42FE05     MOV.W   &0x5fe, R14
   \   000006   E00E         ADDA    R14, PC
   \                     `?<Jumptable for USCI_A1_ISR>_0`:
   \   000008   143C         JMP     ??USCI_A1_ISR_1
   \   00000A   033C         JMP     ??USCI_A1_ISR_3
   \   00000C   123C         JMP     ??USCI_A1_ISR_1
   \   00000E   113C         JMP     ??USCI_A1_ISR_1
   \   000010   103C         JMP     ??USCI_A1_ISR_1
    118           case 0: // Vector 0 - no interrupt
    119           break;
    120           case 2: // Vector 2 – RXIFG
    121             temp = cpu_rx_ring_wr;
   \                     ??USCI_A1_ISR_3:
   \   000012   1F42....     MOV.W   &cpu_rx_ring_wr, R15
    122             CPU_Char_Rx[0] = UCA1RXBUF; // RX -> CPU_Char_Rx character
   \   000016   1E42EC05     MOV.W   &0x5ec, R14
   \   00001A   C24E....     MOV.B   R14, &CPU_Char_Rx
    123             if (++cpu_rx_ring_wr >= (SMALL_RING_SIZE)){
   \   00001E   9253....     ADD.W   #0x1, &cpu_rx_ring_wr
   \   000022   B2901000.... CMP.W   #0x10, &cpu_rx_ring_wr
   \   000028   0228         JNC     ??USCI_A1_ISR_2
    124             cpu_rx_ring_wr = BEGINNING; // Circular buffer back to beginning
   \   00002A   8243....     MOV.W   #0x0, &cpu_rx_ring_wr
    125             }
    126             cpu_rx_ring_wr++;
   \                     ??USCI_A1_ISR_2:
   \   00002E   9253....     ADD.W   #0x1, &cpu_rx_ring_wr
    127           break;
    128           case 4: // Vector 4 – TXIFG
    129          // Code for Transmit
    130           break;
    131           default: break;
    132           }
    133          }
   \                     ??USCI_A1_ISR_1:
   \   000032   1E17         POPM.W  #0x2, R15
   \   000034   0013         RETI
   \   000036                REQUIRE _A_UCA1RXBUF_L
   \   000036                REQUIRE UCA1IV

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??USCI_A1_ISR::??INTVEC 86`:
   \   000056   ....         DC16    USCI_A1_ISR

   \                                 In  segment INTVEC, offset 0x5a, root
   \                     `??Timer0_A0_ISR::??INTVEC 90`:
   \   00005A   ....         DC16    Timer0_A0_ISR

   \                                 In  segment INTVEC, offset 0x5c, root
   \                     `??ADC10_ISR::??INTVEC 92`:
   \   00005C   ....         DC16    ADC10_ISR
    134          //------------------------------------------------------------------------------

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   ADC10_ISR
      4   Timer0_A0_ISR
      8   USCI_A1_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      98  ADC10_ISR
       2  ADC10_ISR::??INTVEC 92
       2  ADC_Thumb
       2  TA0CCR0
      28  Timer0_A0_ISR
       2  Timer0_A0_ISR::??INTVEC 90
       2  UCA1IV
      54  USCI_A1_ISR
       2  USCI_A1_ISR::??INTVEC 86
       2  _A_ADC10CTL0_L
       2  _A_ADC10IV_L
       2  _A_ADC10MCTL0_L
       2  _A_ADC10MEM0_L
       2  _A_PJOUT_L
       2  _A_UCA1RXBUF_L

 
  16 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
   6 bytes in segment INTVEC
 180 bytes in segment ISR_CODE
 
 180 bytes of CODE  memory
   0 bytes of CONST memory (+  6 bytes shared)
   2 bytes of DATA  memory (+ 16 bytes shared)

Errors: none
Warnings: 1
