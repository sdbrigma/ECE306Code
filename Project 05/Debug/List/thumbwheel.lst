###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           13/Nov/2015  14:29:51
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\thumbwheel.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\thumbwheel.c" -lC "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 05\Debug\List\" -o
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\Obj\" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR5739__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\List\thumbwheel.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\Obj\thumbwheel.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\thumbwheel.c
      1          /*******************************************************************************
      2          *        Author: Steffon Brigman
      3          *        Date:   October 2015
      4          *        Description: This file contains code to read data from the thumb wheel.
      5          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
      6          *
      7          *        File name: thumbwheel.c
      8          *        Passed : No variables passed 
      9          *        Locals: No locals variables
     10          *        Returned: no values returned 
     11          *        Globlas: Listed in the globals section
     12          *******************************************************************************/
     13          
     14          // Includes
     15          #include  "macros.h"
     16          #include  "msp430.h"
     17          #include  "functions.h"
     18          
     19          // GLobal Variables
     20          extern char *display_1;
     21          extern char *display_2;
     22          extern char *display_3;
     23          extern char *display_4;
     24          extern char posL1;
     25          extern char posL2;
     26          extern char posL3;
     27          extern char posL4;
     28          extern unsigned int ADC_Right_Detector;
     29          extern unsigned int ADC_thumb;
     30          extern unsigned int ADC_Left_Detector;
     31          

   \                                 In  segment CODE, align 2
     32          void ADC_read(int detect_mode){
   \                     ADC_read:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0B4C         MOV.W   R12, R11
     33          /*******************************************************************************
     34          *        Author: Steffon Brigman
     35          *        Date:   October 2015
     36          *        Description: This function converts ADC values to display to the LCD
     37          *        Built with IAR Embedded Workbench Version: V7.0.5/W32 (6.10.5)
     38          *
     39          *        Function name: ADC_read
     40          *        Passed : detect_mode
     41          *        Locals: value, tmp
     42          *        Returned: no values returned 
     43          *        Globlas: All listed in the globals section
     44          *******************************************************************************/
     45            // For detect mode 0 - right detector, 1 - left, 2 - thumbwheel
     46            unsigned int value;
     47            ADC_Channel = detect_mode;
   \   000004   824B....     MOV.W   R11, &ADC_Channel
     48            ADC_Process();
   \   000008   ........     CALLA   #ADC_Process
     49            if(ADC_Channel == Right_Detector){value = ADC_Right_Detector;}
   \   00000C   8293....     CMP.W   #0x0, &ADC_Channel
   \   000010   0220         JNE     ??ADC_read_0
   \   000012   1842....     MOV.W   &ADC_Right_Detector, R8
     50            if(ADC_Channel == Left_Detector){value = ADC_Left_Detector;}
   \                     ??ADC_read_0:
   \   000016   9293....     CMP.W   #0x1, &ADC_Channel
   \   00001A   0220         JNE     ??ADC_read_1
   \   00001C   1842....     MOV.W   &ADC_Left_Detector, R8
     51            if(ADC_Channel == Thumbwheel){value = ADC_Thumb;}
   \                     ??ADC_read_1:
   \   000020   A293....     CMP.W   #0x2, &ADC_Channel
   \   000024   0220         JNE     ??ADC_read_2
   \   000026   1842....     MOV.W   &ADC_Thumb, R8
     52            ADC_Process();
   \                     ??ADC_read_2:
   \   00002A   ........     CALLA   #ADC_Process
     53            // Hex conversion code
     54              unsigned int tmp = value & NIBBLE1; // Preserver first nibble of thumbwheel register
   \   00002E   0A48         MOV.W   R8, R10
   \   000030   3AF00F00     AND.W   #0xf, R10
     55              if(tmp > HEX_A){
   \   000034   3A900A00     CMP.W   #0xa, R10
   \   000038   0328         JNC     ??ADC_read_3
     56                tmp = tmp + ADC_conv1;
   \   00003A   3A503700     ADD.W   #0x37, R10
   \   00003E   023C         JMP     ??ADC_read_4
     57              }
     58              else{
     59                tmp = tmp | ADC_conv2;
   \                     ??ADC_read_3:
   \   000040   3AD03000     BIS.W   #0x30, R10
     60              }
     61              if(detect_mode == Thumbwheel)
   \                     ??ADC_read_4:
   \   000044   2B93         CMP.W   #0x2, R11
   \   000046   0420         JNE     ??ADC_read_5
     62                {display_1[line1] = tmp;} // thumbwheel
   \   000048   1F42....     MOV.W   &display_1, R15
   \   00004C   CF4A0600     MOV.B   R10, 0x6(R15)
     63              if(detect_mode == Left_Detector)
   \                     ??ADC_read_5:
   \   000050   1B93         CMP.W   #0x1, R11
   \   000052   0420         JNE     ??ADC_read_6
     64                {display_2[line1] = tmp;} // left detect
   \   000054   1F42....     MOV.W   &display_2, R15
   \   000058   CF4A0600     MOV.B   R10, 0x6(R15)
     65              if(detect_mode == Right_Detector)
   \                     ??ADC_read_6:
   \   00005C   0B93         CMP.W   #0x0, R11
   \   00005E   0420         JNE     ??ADC_read_7
     66                {display_3[line1] = tmp;} // right detect
   \   000060   1F42....     MOV.W   &display_3, R15
   \   000064   CF4A0600     MOV.B   R10, 0x6(R15)
     67              
     68              tmp = value & NIBBLE2; // Preserver second nibble of thumbwheel register
   \                     ??ADC_read_7:
   \   000068   0F48         MOV.W   R8, R15
   \   00006A   3FF0F000     AND.W   #0xf0, R15
   \   00006E   0A4F         MOV.W   R15, R10
     69              tmp >>= shift1; 
   \   000070   5A0F         RRUM.W  #0x4, R10
     70              if(tmp > HEX_A){
   \   000072   3A900A00     CMP.W   #0xa, R10
   \   000076   0328         JNC     ??ADC_read_8
     71                tmp = tmp + ADC_conv1;
   \   000078   3A503700     ADD.W   #0x37, R10
   \   00007C   023C         JMP     ??ADC_read_9
     72              }
     73              else{
     74                tmp = tmp | ADC_conv2;
   \                     ??ADC_read_8:
   \   00007E   3AD03000     BIS.W   #0x30, R10
     75              }
     76              if(detect_mode == Thumbwheel)
   \                     ??ADC_read_9:
   \   000082   2B93         CMP.W   #0x2, R11
   \   000084   0420         JNE     ??ADC_read_10
     77                {display_1[line2] = tmp;}
   \   000086   1F42....     MOV.W   &display_1, R15
   \   00008A   CF4A0500     MOV.B   R10, 0x5(R15)
     78              if(detect_mode == Left_Detector)
   \                     ??ADC_read_10:
   \   00008E   1B93         CMP.W   #0x1, R11
   \   000090   0420         JNE     ??ADC_read_11
     79                {display_2[line2] = tmp;} // left detect
   \   000092   1F42....     MOV.W   &display_2, R15
   \   000096   CF4A0500     MOV.B   R10, 0x5(R15)
     80              if(detect_mode == Right_Detector)
   \                     ??ADC_read_11:
   \   00009A   0B93         CMP.W   #0x0, R11
   \   00009C   0420         JNE     ??ADC_read_12
     81                {display_3[line2] = tmp;} // right detect
   \   00009E   1F42....     MOV.W   &display_3, R15
   \   0000A2   CF4A0500     MOV.B   R10, 0x5(R15)
     82              
     83                tmp = value & NIBBLE3; // Preserver last nibble of thumbwheel register
   \                     ??ADC_read_12:
   \   0000A6   0F48         MOV.W   R8, R15
   \   0000A8   3FF0000F     AND.W   #0xf00, R15
   \   0000AC   0A4F         MOV.W   R15, R10
     84                tmp >>= shift2;
   \   0000AE   8A10         SWPB    R10
   \   0000B0   3AF0FF00     AND.W   #0xff, R10
     85              if(tmp > HEX_A){
   \   0000B4   3A900A00     CMP.W   #0xa, R10
   \   0000B8   0328         JNC     ??ADC_read_13
     86                tmp = tmp + ADC_conv1;
   \   0000BA   3A503700     ADD.W   #0x37, R10
   \   0000BE   023C         JMP     ??ADC_read_14
     87              }
     88              else{
     89                tmp = tmp | ADC_conv2;
   \                     ??ADC_read_13:
   \   0000C0   3AD03000     BIS.W   #0x30, R10
     90              }
     91              if(detect_mode == Thumbwheel)
   \                     ??ADC_read_14:
   \   0000C4   2B93         CMP.W   #0x2, R11
   \   0000C6   0420         JNE     ??ADC_read_15
     92                {display_1[line3] = tmp;}
   \   0000C8   1F42....     MOV.W   &display_1, R15
   \   0000CC   CF4A0400     MOV.B   R10, 0x4(R15)
     93              if(detect_mode == Left_Detector)
   \                     ??ADC_read_15:
   \   0000D0   1B93         CMP.W   #0x1, R11
   \   0000D2   0420         JNE     ??ADC_read_16
     94                {display_2[line3] = tmp;} // left detect
   \   0000D4   1F42....     MOV.W   &display_2, R15
   \   0000D8   CF4A0400     MOV.B   R10, 0x4(R15)
     95              if(detect_mode == Right_Detector)
   \                     ??ADC_read_16:
   \   0000DC   0B93         CMP.W   #0x0, R11
   \   0000DE   0420         JNE     ??ADC_read_17
     96                {display_3[line3] = tmp;} // right detect
   \   0000E0   1F42....     MOV.W   &display_3, R15
   \   0000E4   CF4A0400     MOV.B   R10, 0x4(R15)
     97              Display_Process();
   \                     ??ADC_read_17:
   \   0000E8   ........     CALLA   #Display_Process
     98          }
   \   0000EC   3817         POPM.W  #0x4, R11
   \   0000EE   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   ADC_read
       12   -> ADC_Process
       12   -> Display_Process


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     240  ADC_read

 
 240 bytes in segment CODE
 
 240 bytes of CODE memory

Errors: none
Warnings: none
