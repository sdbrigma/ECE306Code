###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           13/Nov/2015  14:29:50
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 05\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          extern char *display_1;
     17          extern char *display_2;
     18          extern char *display_3;
     19          extern char *display_4;
     20          extern char posL1;
     21          extern char posL2;
     22          extern char posL3;
     23          extern char posL4;

   \                                 In  segment CODE, align 2
     24          void Switches_Process(void){
   \                     Switches_Process:
     25          //------------------------------------------------------------------------------
     26          // Switch proccess sets LCD text when SW1 and SW2 are pressed
     27            if (!(P4IN & SW1)){
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   042C         JC      ??Switches_Process_1
     28              calibrate_detector();
   \   000006   ........     CALLA   #calibrate_detector
     29              line_dance();
   \   00000A   ........     CALLA   #line_dance
     30            }
     31            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_1:
   \   00000E   E2B32102     BIT.B   #0x2, &0x221
   \   000012   252C         JC      ??Switches_Process_2
     32              /*display_1 = "Embedded";
     33              posL1 = SW2_posL1;
     34              display_2 = "Systems";
     35              posL2 = SW2_posL1;
     36              display_3 = "Rock!";
     37              posL3 = SW2_posL1;
     38              display_4 = "Go Pack!";
     39              posL4 = SW2_posL1;*/
     40              
     41              display_1 = "          ";
   \   000014   B240........ MOV.W   #`?<Constant "          ">`, &display_1
     42              posL1 = ZERO;
   \   00001A   C243....     MOV.B   #0x0, &posL1
     43              display_2 = "          ";
   \   00001E   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     44              posL2 = ZERO;
   \   000024   C243....     MOV.B   #0x0, &posL2
     45              display_3 = "          ";
   \   000028   B240........ MOV.W   #`?<Constant "          ">`, &display_3
     46              posL3 = ZERO;
   \   00002E   C243....     MOV.B   #0x0, &posL3
     47              display_4 = "          ";
   \   000032   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     48              posL4 = ZERO;
   \   000038   C243....     MOV.B   #0x0, &posL4
     49              Display_Process();
   \   00003C   ........     CALLA   #Display_Process
     50              emitter_on();
   \   000040   ........     CALLA   #emitter_on
     51              while(ALWAYS & (P4IN & SW1)){
   \                     ??Switches_Process_0:
   \   000044   D2B32102     BIT.B   #0x1, &0x221
   \   000048   0A28         JNC     ??Switches_Process_2
     52                ADC_Process();
   \   00004A   ........     CALLA   #ADC_Process
     53                ADC_read(Thumbwheel);
   \   00004E   2C43         MOV.W   #0x2, R12
   \   000050   ........     CALLA   #ADC_read
     54                Five_msec_Delay(CIRCLE);
   \   000054   3C401E00     MOV.W   #0x1e, R12
   \   000058   ........     CALLA   #Five_msec_Delay
   \   00005C   F33F         JMP     ??Switches_Process_0
     55              }
     56          }
     57          //------------------------------------------------------------------------------
     58          }
   \                     ??Switches_Process_2:
   \   00005E   1001         RETA
   \   000060                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Switches_Process
        4   -> ADC_Process
        4   -> ADC_read
        4   -> Display_Process
        4   -> Five_msec_Delay
        4   -> calibrate_detector
        4   -> emitter_on
        4   -> line_dance


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      96  Switches_Process
       2  _A_PBIN_L

 
 96 bytes in segment CODE
  2 bytes in segment DATA16_AN
 11 bytes in segment DATA16_C
 
 96 bytes of CODE  memory
 11 bytes of CONST memory
  0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
