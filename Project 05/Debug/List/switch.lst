###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           21/Oct/2015  02:07:27
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 05\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          extern char *display_1;
     17          extern char *display_2;
     18          extern char *display_3;
     19          extern char *display_4;
     20          extern char posL1;
     21          extern char posL2;
     22          extern char posL3;
     23          extern char ADC_TEST;
     24          extern char posL4;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          int button_counter1 = ZERO;
   \                     button_counter1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          int button_counter2 = ZERO;
   \                     button_counter2:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     27            unsigned int color_right = black;
   \                     color_right:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for color_right>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     28            unsigned int color_left = black;
   \                     color_left:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for color_left>`

   \                                 In  segment CODE, align 2
     29          void Switches_Process(void){
   \                     Switches_Process:
   \   000000   0A12         PUSH.W  R10
     30          //------------------------------------------------------------------------------
     31          // Switch proccess sets LCD text when SW1 and SW2 are pressed
     32            if (!(P4IN & SW1)){
   \   000002   D2B32102     BIT.B   #0x1, &0x221
   \   000006   042C         JC      ??Switches_Process_1
     33              calibrate_detector();
   \   000008   ........     CALLA   #calibrate_detector
     34              line_dance();
   \   00000C   ........     CALLA   #line_dance
     35            }
     36            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_1:
   \   000010   E2B32102     BIT.B   #0x2, &0x221
   \   000014   3D2C         JC      ??Switches_Process_2
     37              /*display_1 = "Embedded";
     38              posL1 = SW2_posL1;
     39              display_2 = "Systems";
     40              posL2 = SW2_posL1;
     41              display_3 = "Rock!";
     42              posL3 = SW2_posL1;
     43              display_4 = "Go Pack!";
     44              posL4 = SW2_posL1;*/
     45              
     46              display_1 = "          ";
   \   000016   B240........ MOV.W   #`?<Constant "          ">`, &display_1
     47              posL1 = ZERO;
   \   00001C   C243....     MOV.B   #0x0, &posL1
     48              display_2 = "          ";
   \   000020   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     49              posL2 = ZERO;
   \   000026   C243....     MOV.B   #0x0, &posL2
     50              display_3 = "          ";
   \   00002A   B240........ MOV.W   #`?<Constant "          ">`, &display_3
     51              posL3 = ZERO;
   \   000030   C243....     MOV.B   #0x0, &posL3
     52              display_4 = "          ";
   \   000034   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     53              posL4 = ZERO;
   \   00003A   C243....     MOV.B   #0x0, &posL4
     54              Display_Process();
   \   00003E   ........     CALLA   #Display_Process
     55          emitter_on();
   \   000042   ........     CALLA   #emitter_on
     56          unsigned int i = 0; // counter for time taken to reverse
   \   000046   0A43         MOV.W   #0x0, R10
     57              //ISR_COUNT = ZERO;
     58            while(ALWAYS){// loop to travel in reverse
     59              // give motors enough time to get away from black line
     60              if(i == 0){
   \                     ??Switches_Process_0:
   \   000048   0A93         CMP.W   #0x0, R10
   \   00004A   0520         JNE     ??Switches_Process_3
     61                  motor_reverse(50);
   \   00004C   3C403200     MOV.W   #0x32, R12
   \   000050   ........     CALLA   #motor_reverse
     62                  i++;
   \   000054   1A53         ADD.W   #0x1, R10
     63              }
     64              i++;
   \                     ??Switches_Process_3:
   \   000056   1A53         ADD.W   #0x1, R10
     65              // MOTORS IN REVERSE
     66              ADC_Process();
   \   000058   ........     CALLA   #ADC_Process
     67              r_reverse_on();
   \   00005C   ........     CALLA   #r_reverse_on
     68              ADC_Process();
   \   000060   ........     CALLA   #ADC_Process
     69              l_reverse_on();
   \   000064   ........     CALLA   #l_reverse_on
     70              ADC_Process();
   \   000068   ........     CALLA   #ADC_Process
     71              if((ADC_Right_Detector>tracking_value_high) || (ADC_Left_Detector>tracking_value_high)){
   \   00006C   9292........ CMP.W   &ADC_Right_Detector, &tracking_value_high
   \   000072   0428         JNC     ??Switches_Process_4
   \   000074   9292........ CMP.W   &ADC_Left_Detector, &tracking_value_high
   \   00007A   E62F         JC      ??Switches_Process_0
     72                l_reverse_off();
   \                     ??Switches_Process_4:
   \   00007C   ........     CALLA   #l_reverse_off
     73                r_reverse_off();
   \   000080   ........     CALLA   #r_reverse_off
     74                Five_msec_Delay(25); // pause for quarter of a second
   \   000084   3C401900     MOV.W   #0x19, R12
   \   000088   ........     CALLA   #Five_msec_Delay
     75                break;
     76              }
     77            }
     78              emitter_off();
   \   00008C   ........     CALLA   #emitter_off
     79          }
     80          //------------------------------------------------------------------------------
     81          }
   \                     ??Switches_Process_2:
   \   000090   3A41         POP.W   R10
   \   000092   1001         RETA
   \   000094                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for color_right>`:
   \   000000   5002         DC16 592

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for color_left>`:
   \   000000   5002         DC16 592

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Switches_Process
        6   -> ADC_Process
        6   -> Display_Process
        6   -> Five_msec_Delay
        6   -> calibrate_detector
        6   -> emitter_off
        6   -> emitter_on
        6   -> l_reverse_off
        6   -> l_reverse_on
        6   -> line_dance
        6   -> motor_reverse
        6   -> r_reverse_off
        6   -> r_reverse_on


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  ?<Initializer for color_left>
       2  ?<Initializer for color_right>
     148  Switches_Process
       2  _A_PBIN_L
       2  button_counter1
       2  button_counter2
       2  color_left
       2  color_right

 
 148 bytes in segment CODE
   2 bytes in segment DATA16_AN
  11 bytes in segment DATA16_C
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
   4 bytes in segment DATA16_Z
 
 148 bytes of CODE  memory
  15 bytes of CONST memory
   8 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
