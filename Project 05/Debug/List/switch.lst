###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           20/Oct/2015  20:11:16
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c
#    Command line  =  
#        "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c"
#        -lC "\\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\List\" -o "\\vmware-host\Shared
#        Folders\Desktop\ECE306Code\Project 05\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large
#    List file     =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\List\switch.lst
#    Object file   =  
#        \\vmware-host\Shared Folders\Desktop\ECE306Code\Project
#        05\Debug\Obj\switch.r43
#
###############################################################################

\\vmware-host\Shared Folders\Desktop\ECE306Code\Project 05\switch.c
      1          //******************************************************************************
      2          //
      3          //  Description: This file contains code for the switches prcesses function.
      4          //   
      5          //
      6          //  Steffon Brigman
      7          //  Sept 2015
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //******************************************************************************
     10          
     11          //------------------------------------------------------------------------------
     12          // Includes
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          extern char *display_1;
     17          extern char *display_2;
     18          extern char *display_3;
     19          extern char *display_4;
     20          extern char posL1;
     21          extern char posL2;
     22          extern char posL3;
     23          extern char ADC_TEST;
     24          extern char posL4;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          int button_counter1 = ZERO;
   \                     button_counter1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          int button_counter2 = ZERO;
   \                     button_counter2:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     27            unsigned int color_right = black;
   \                     color_right:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for color_right>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     28            unsigned int color_left = black;
   \                     color_left:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for color_left>`

   \                                 In  segment CODE, align 2
     29          void Switches_Process(void){
   \                     Switches_Process:
     30          //------------------------------------------------------------------------------
     31          // Switch proccess sets LCD text when SW1 and SW2 are pressed
     32            if (!(P4IN & SW1)){
   \   000000   D2B32102     BIT.B   #0x1, &0x221
   \   000004   042C         JC      ??Switches_Process_0
     33              calibrate_detector();    
   \   000006   ........     CALLA   #calibrate_detector
     34              line_dance();
   \   00000A   ........     CALLA   #line_dance
     35            }
     36            if (!(P4IN & SW2)) {
   \                     ??Switches_Process_0:
   \   00000E   E2B32102     BIT.B   #0x2, &0x221
   \   000012   162C         JC      ??Switches_Process_1
     37              /*display_1 = "Embedded";
     38              posL1 = SW2_posL1;
     39              display_2 = "Systems";
     40              posL2 = SW2_posL1;
     41              display_3 = "Rock!";
     42              posL3 = SW2_posL1;
     43              display_4 = "Go Pack!";
     44              posL4 = SW2_posL1;*/
     45              
     46              display_1 = "          ";
   \   000014   B240........ MOV.W   #`?<Constant "          ">`, &display_1
     47              posL1 = ZERO;
   \   00001A   C243....     MOV.B   #0x0, &posL1
     48              display_2 = "          ";
   \   00001E   B240........ MOV.W   #`?<Constant "          ">`, &display_2
     49              posL2 = ZERO;
   \   000024   C243....     MOV.B   #0x0, &posL2
     50              display_3 = "          ";
   \   000028   B240........ MOV.W   #`?<Constant "          ">`, &display_3
     51              posL3 = ZERO;
   \   00002E   C243....     MOV.B   #0x0, &posL3
     52              display_4 = "          ";
   \   000032   B240........ MOV.W   #`?<Constant "          ">`, &display_4
     53              posL4 = ZERO;
   \   000038   C243....     MOV.B   #0x0, &posL4
     54              Display_Process();
   \   00003C   ........     CALLA   #Display_Process
     55          }
     56          //------------------------------------------------------------------------------
     57          }
   \                     ??Switches_Process_1:
   \   000040   1001         RETA
   \   000042                REQUIRE _A_PBIN_L

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for color_right>`:
   \   000000   5002         DC16 592

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for color_left>`:
   \   000000   5002         DC16 592

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Switches_Process
        4   -> Display_Process
        4   -> calibrate_detector
        4   -> line_dance


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  ?<Initializer for color_left>
       2  ?<Initializer for color_right>
      66  Switches_Process
       2  _A_PBIN_L
       2  button_counter1
       2  button_counter2
       2  color_left
       2  color_right

 
 66 bytes in segment CODE
  2 bytes in segment DATA16_AN
 11 bytes in segment DATA16_C
  4 bytes in segment DATA16_I
  4 bytes in segment DATA16_ID
  4 bytes in segment DATA16_Z
 
 66 bytes of CODE  memory
 15 bytes of CONST memory
  8 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
